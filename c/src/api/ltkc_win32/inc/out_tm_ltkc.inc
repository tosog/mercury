
/*
 * Generated file - DO NOT EDIT
 *
 * This is the header file for the LLRP Tool Kit (LTK)
 * C implementation. It is generated into a .inc file
 * that is included by a platform specific .c source file.
 * That .c file takes care of prerequisites needed by this file.
 */



/*
 * Vendor descriptors
 */

  
const LLRP_tSVendorDescriptor
LLRP_vdescthingmagic =
{
  "thingmagic",	// .pName
  26554,	// .VendorID
};


/*
 * Namespace descriptors
 */

  
const LLRP_tSNamespaceDescriptor
LLRP_nsdescthingmagic =
{
  "thingmagic",	// .pPrefix
  "http://www.thingmagic.com/ltk/schema/extension/xml/1.0/",	// .pURI
  "http://www.thingmagic.com/ltk/schema/extension/xml/1.0/thingmagic.xsd",	// .pSchemaLocation
};


/*
 * Enumeration string tables
 */

  
const LLRP_tSEnumTableEntry
LLRP_estThingMagicReaderOperatingStatus[] =
{
  
    {
        "IDLE",
        LLRP_ThingMagicReaderOperatingStatus_IDLE,
    },
    {
        "RUNNING",
        LLRP_ThingMagicReaderOperatingStatus_RUNNING,
    },
    {
        "ERROR",
        LLRP_ThingMagicReaderOperatingStatus_ERROR,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicControlCapabilities[] =
{
  
    {
        "All",
        LLRP_ThingMagicControlCapabilities_All,
    },
    {
        "DeviceInformationCapabilities",
        LLRP_ThingMagicControlCapabilities_DeviceInformationCapabilities,
    },
    {
        "DeviceProtocolCapabilities",
        LLRP_ThingMagicControlCapabilities_DeviceProtocolCapabilities,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicControlConfiguration[] =
{
  
    {
        "All",
        LLRP_ThingMagicControlConfiguration_All,
    },
    {
        "ThingMagicReaderConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicReaderConfiguration,
    },
    {
        "ThingMagicRegionConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicRegionConfiguration,
    },
    {
        "ThingMagicProtocolConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicProtocolConfiguration,
    },
    {
        "ThingMagicAntennaConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicAntennaConfiguration,
    },
    {
        "ThingMagicCurrentTime",
        LLRP_ThingMagicControlConfiguration_ThingMagicCurrentTime,
    },
    {
        "ThingMagicDeDuplication",
        LLRP_ThingMagicControlConfiguration_ThingMagicDeDuplication,
    },
    {
        "ThingMagicReaderModuleTemperature",
        LLRP_ThingMagicControlConfiguration_ThingMagicReaderModuleTemperature,
    },
    {
        "ThingMagicAntennaDetection",
        LLRP_ThingMagicControlConfiguration_ThingMagicAntennaDetection,
    },
    {
        "ThingMagicLicenseKey",
        LLRP_ThingMagicControlConfiguration_ThingMagicLicenseKey,
    },
    {
        "ThingMagicHopTime",
        LLRP_ThingMagicControlConfiguration_ThingMagicHopTime,
    },
    {
        "ThingMagicAsyncOFFTime",
        LLRP_ThingMagicControlConfiguration_ThingMagicAsyncOFFTime,
    },
    {
        "ThingMagicLicensedFeatures",
        LLRP_ThingMagicControlConfiguration_ThingMagicLicensedFeatures,
    },
    {
        "ThingMagicSelectedProtocols",
        LLRP_ThingMagicControlConfiguration_ThingMagicSelectedProtocols,
    },
    {
        "ThingMagicGEN2ProtocolExtension",
        LLRP_ThingMagicControlConfiguration_ThingMagicGEN2ProtocolExtension,
    },
    {
        "ThingMagicRegulatoryConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicRegulatoryConfiguration,
    },
    {
        "ThingMagicFrequencyConfiguration",
        LLRP_ThingMagicControlConfiguration_ThingMagicFrequencyConfiguration,
    },
    {
        "ThingMagicAsyncONTime",
        LLRP_ThingMagicControlConfiguration_ThingMagicAsyncONTime,
    },
    {
        "ThingMagicAntennaReturnloss",
        LLRP_ThingMagicControlConfiguration_ThingMagicAntennaReturnloss,
    },
    {
        "ThingMagicMetadata",
        LLRP_ThingMagicControlConfiguration_ThingMagicMetadata,
    },
    {
        "ThingMagicStatsEnable",
        LLRP_ThingMagicControlConfiguration_ThingMagicStatsEnable,
    },
    {
        "ThingMagicReaderStats",
        LLRP_ThingMagicControlConfiguration_ThingMagicReaderStats,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicRegionID[] =
{
  
    {
        "UnspecifiedRegion",
        LLRP_ThingMagicRegionID_UnspecifiedRegion,
    },
    {
        "NorthAmerica",
        LLRP_ThingMagicRegionID_NorthAmerica,
    },
    {
        "EuropeanUnion",
        LLRP_ThingMagicRegionID_EuropeanUnion,
    },
    {
        "Korea",
        LLRP_ThingMagicRegionID_Korea,
    },
    {
        "India",
        LLRP_ThingMagicRegionID_India,
    },
    {
        "Japan",
        LLRP_ThingMagicRegionID_Japan,
    },
    {
        "PeoplesRepublicofChina",
        LLRP_ThingMagicRegionID_PeoplesRepublicofChina,
    },
    {
        "EuropeanUnion2",
        LLRP_ThingMagicRegionID_EuropeanUnion2,
    },
    {
        "EuropeanUnion3",
        LLRP_ThingMagicRegionID_EuropeanUnion3,
    },
    {
        "Korea2",
        LLRP_ThingMagicRegionID_Korea2,
    },
    {
        "Australia",
        LLRP_ThingMagicRegionID_Australia,
    },
    {
        "NewZealand",
        LLRP_ThingMagicRegionID_NewZealand,
    },
    {
        "Open",
        LLRP_ThingMagicRegionID_Open,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicAntennaMode[] =
{
  
    {
        "MonoStatic",
        LLRP_ThingMagicAntennaMode_MonoStatic,
    },
    {
        "BiStatic",
        LLRP_ThingMagicAntennaMode_BiStatic,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estProtocolID[] =
{
  
    {
        "UnspecifiedProtocol",
        LLRP_ProtocolID_UnspecifiedProtocol,
    },
    {
        "ISO180006B",
        LLRP_ProtocolID_ISO180006B,
    },
    {
        "GEN2",
        LLRP_ProtocolID_GEN2,
    },
    {
        "ISO180006B_UCODE",
        LLRP_ProtocolID_ISO180006B_UCODE,
    },
    {
        "IPX64",
        LLRP_ProtocolID_IPX64,
    },
    {
        "IPX256",
        LLRP_ProtocolID_IPX256,
    },
    {
        "ATA",
        LLRP_ProtocolID_ATA,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estQType[] =
{
  
    {
        "Dynamic",
        LLRP_QType_Dynamic,
    },
    {
        "Static",
        LLRP_QType_Static,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicC1G2TargetStrategy[] =
{
  
    {
        "TargetA",
        LLRP_ThingMagicC1G2TargetStrategy_TargetA,
    },
    {
        "TargetB",
        LLRP_ThingMagicC1G2TargetStrategy_TargetB,
    },
    {
        "TargetAB",
        LLRP_ThingMagicC1G2TargetStrategy_TargetAB,
    },
    {
        "TargetBA",
        LLRP_ThingMagicC1G2TargetStrategy_TargetBA,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomTagOpSpecResultType[] =
{
  
    {
        "Success",
        LLRP_ThingMagicCustomTagOpSpecResultType_Success,
    },
    {
        "Nonspecific_Tag_Error",
        LLRP_ThingMagicCustomTagOpSpecResultType_Nonspecific_Tag_Error,
    },
    {
        "No_Response_From_Tag",
        LLRP_ThingMagicCustomTagOpSpecResultType_No_Response_From_Tag,
    },
    {
        "Nonspecific_Reader_Error",
        LLRP_ThingMagicCustomTagOpSpecResultType_Nonspecific_Reader_Error,
    },
    {
        "Unsupported_Operation",
        LLRP_ThingMagicCustomTagOpSpecResultType_Unsupported_Operation,
    },
    {
        "Tag_Memory_Overrun_Error",
        LLRP_ThingMagicCustomTagOpSpecResultType_Tag_Memory_Overrun_Error,
    },
    {
        "Gen2V2_Authentication_Fail",
        LLRP_ThingMagicCustomTagOpSpecResultType_Gen2V2_Authentication_Fail,
    },
    {
        "Gen2V2_Untrace_Fail",
        LLRP_ThingMagicCustomTagOpSpecResultType_Gen2V2_Untrace_Fail,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicGen2DivideRatio[] =
{
  
    {
        "Divide_Ratio_8",
        LLRP_ThingMagicGen2DivideRatio_Divide_Ratio_8,
    },
    {
        "Divide_Ratio_64_3",
        LLRP_ThingMagicGen2DivideRatio_Divide_Ratio_64_3,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicGen2TagEncoding[] =
{
  
    {
        "FM0",
        LLRP_ThingMagicGen2TagEncoding_FM0,
    },
    {
        "M2",
        LLRP_ThingMagicGen2TagEncoding_M2,
    },
    {
        "M4",
        LLRP_ThingMagicGen2TagEncoding_M4,
    },
    {
        "M8",
        LLRP_ThingMagicGen2TagEncoding_M8,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomAirProtocolList[] =
{
  
    {
        "Iso180006b",
        LLRP_ThingMagicCustomAirProtocolList_Iso180006b,
    },
    {
        "IPX64",
        LLRP_ThingMagicCustomAirProtocolList_IPX64,
    },
    {
        "IPX256",
        LLRP_ThingMagicCustomAirProtocolList_IPX256,
    },
    {
        "Ata",
        LLRP_ThingMagicCustomAirProtocolList_Ata,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicISO180006BFilterType[] =
{
  
    {
        "ISO180006BSelect",
        LLRP_ThingMagicISO180006BFilterType_ISO180006BSelect,
    },
    {
        "ISO180006BTagData",
        LLRP_ThingMagicISO180006BFilterType_ISO180006BTagData,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustom18K6BDelimiter[] =
{
  
    {
        "ISO180006B_Delimiter1",
        LLRP_ThingMagicCustom18K6BDelimiter_ISO180006B_Delimiter1,
    },
    {
        "ISO180006B_Delimiter4",
        LLRP_ThingMagicCustom18K6BDelimiter_ISO180006B_Delimiter4,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustom18K6BModulationDepth[] =
{
  
    {
        "ISO180006B_ModulationDepth99percent",
        LLRP_ThingMagicCustom18K6BModulationDepth_ISO180006B_ModulationDepth99percent,
    },
    {
        "ISO180006B_ModulationDepth11percent",
        LLRP_ThingMagicCustom18K6BModulationDepth_ISO180006B_ModulationDepth11percent,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustom18K6BLinkFrequency[] =
{
  
    {
        "ISO180006B_LINKFREQUENCY_40KHZ",
        LLRP_ThingMagicCustom18K6BLinkFrequency_ISO180006B_LINKFREQUENCY_40KHZ,
    },
    {
        "ISO180006B_LINKFREQUENCY_160KHZ",
        LLRP_ThingMagicCustom18K6BLinkFrequency_ISO180006B_LINKFREQUENCY_160KHZ,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSSensorType[] =
{
  
    {
        "IDSSL900A_SENSOR_TEMP",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_TEMP,
    },
    {
        "IDSSL900A_SENSOR_EXT1",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_EXT1,
    },
    {
        "IDSSL900A_SENSOR_EXT2",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_EXT2,
    },
    {
        "IDSSL900A_SENSOR_BATTV",
        LLRP_ThingMagicCustomIDSSensorType_IDSSL900A_SENSOR_BATTV,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSPasswordLevel[] =
{
  
    {
        "IDSSL900A_PASSWORD_NOTALLOWED",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_NOTALLOWED,
    },
    {
        "IDSSL900A_PASSWORD_SYSTEM",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_SYSTEM,
    },
    {
        "IDSSL900A_PASSWORD_APPLICATION",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_APPLICATION,
    },
    {
        "IDSSL900A_PASSWORD_MEASUREMENT",
        LLRP_ThingMagicCustomIDSPasswordLevel_IDSSL900A_PASSWORD_MEASUREMENT,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSLoggingForm[] =
{
  
    {
        "IDSSL900A_LOGGINGFORM_DENSE",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_DENSE,
    },
    {
        "IDSSL900A_LOGGINGFORM_OUTOFLIMITS",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_OUTOFLIMITS,
    },
    {
        "IDSSL900A_LOGGINGFORM_LIMITSCROSSING",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_LIMITSCROSSING,
    },
    {
        "IDSSL900A_LOGGINGFORM_IRQ1",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_IRQ1,
    },
    {
        "IDSSL900A_LOGGINGFORM_IRQ2",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_IRQ2,
    },
    {
        "IDSSL900A_LOGGINGFORM_IRQ1IRQ2",
        LLRP_ThingMagicCustomIDSLoggingForm_IDSSL900A_LOGGINGFORM_IRQ1IRQ2,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSStorageRule[] =
{
  
    {
        "IDSSL900A_STORAGERULE_NORMAL",
        LLRP_ThingMagicCustomIDSStorageRule_IDSSL900A_STORAGERULE_NORMAL,
    },
    {
        "IDSSL900A_STORAGERULE_ROLLING",
        LLRP_ThingMagicCustomIDSStorageRule_IDSSL900A_STORAGERULE_ROLLING,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomIDSSFEType[] =
{
  
    {
        "IDSSL900A_SFE_RANG",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_RANG,
    },
    {
        "IDSSL900A_SFE_SETI",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_SETI,
    },
    {
        "IDSSL900A_SFE_EXT1",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_EXT1,
    },
    {
        "IDSSL900A_SFE_EXT2",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_EXT2,
    },
    {
        "IDSSL900A_SFE_AUTORANGEDISABLE",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_AUTORANGEDISABLE,
    },
    {
        "IDSSL900A_SFE_VERIFYSENSORID",
        LLRP_ThingMagicCustomIDSSFEType_IDSSL900A_SFE_VERIFYSENSORID,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicPhaseMode[] =
{
  
    {
        "Disabled",
        LLRP_ThingMagicPhaseMode_Disabled,
    },
    {
        "Enabled",
        LLRP_ThingMagicPhaseMode_Enabled,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicMetadataFlagStatus[] =
{
  
    {
        "Disabled",
        LLRP_ThingMagicMetadataFlagStatus_Disabled,
    },
    {
        "Enabled",
        LLRP_ThingMagicMetadataFlagStatus_Enabled,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicFastSearchValue[] =
{
  
    {
        "Disabled",
        LLRP_ThingMagicFastSearchValue_Disabled,
    },
    {
        "Enabled",
        LLRP_ThingMagicFastSearchValue_Enabled,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomNXPAuthenticationType[] =
{
  
    {
        "TAM1_AUTHENTICATION",
        LLRP_ThingMagicCustomNXPAuthenticationType_TAM1_AUTHENTICATION,
    },
    {
        "TAM2_AUTHENTICATION",
        LLRP_ThingMagicCustomNXPAuthenticationType_TAM2_AUTHENTICATION,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicNXPProfileType[] =
{
  
    {
        "EPC",
        LLRP_ThingMagicNXPProfileType_EPC,
    },
    {
        "TID",
        LLRP_ThingMagicNXPProfileType_TID,
    },
    {
        "USER",
        LLRP_ThingMagicNXPProfileType_USER,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomNXPKeyType[] =
{
  
    {
        "KEY0",
        LLRP_ThingMagicCustomNXPKeyType_KEY0,
    },
    {
        "KEY1",
        LLRP_ThingMagicCustomNXPKeyType_KEY1,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomNXPUntraceableEPC[] =
{
  
    {
        "EPC_SHOW",
        LLRP_ThingMagicCustomNXPUntraceableEPC_EPC_SHOW,
    },
    {
        "EPC_HIDE",
        LLRP_ThingMagicCustomNXPUntraceableEPC_EPC_HIDE,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomNXPUntraceableTID[] =
{
  
    {
        "HIDE_NONE",
        LLRP_ThingMagicCustomNXPUntraceableTID_HIDE_NONE,
    },
    {
        "HIDE_SOME",
        LLRP_ThingMagicCustomNXPUntraceableTID_HIDE_SOME,
    },
    {
        "HIDE_ALL",
        LLRP_ThingMagicCustomNXPUntraceableTID_HIDE_ALL,
    },
    {
        "TID_RFU",
        LLRP_ThingMagicCustomNXPUntraceableTID_TID_RFU,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomNXPUntraceableUserMemory[] =
{
  
    {
        "SHOW",
        LLRP_ThingMagicCustomNXPUntraceableUserMemory_SHOW,
    },
    {
        "HIDE",
        LLRP_ThingMagicCustomNXPUntraceableUserMemory_HIDE,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomNXPUntraceableRange[] =
{
  
    {
        "NORMAL",
        LLRP_ThingMagicCustomNXPUntraceableRange_NORMAL,
    },
    {
        "REDUCED",
        LLRP_ThingMagicCustomNXPUntraceableRange_REDUCED,
    },
    {
        "TOGGLE_TEMPORARLY",
        LLRP_ThingMagicCustomNXPUntraceableRange_TOGGLE_TEMPORARLY,
    },
    {
        "RFU",
        LLRP_ThingMagicCustomNXPUntraceableRange_RFU,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomNXPUntraceableAuthType[] =
{
  
    {
        "UNTRACEABLE_WITH_AUTHENTICATION",
        LLRP_ThingMagicCustomNXPUntraceableAuthType_UNTRACEABLE_WITH_AUTHENTICATION,
    },
    {
        "UNTRACEABLE_WITH_ACCESS",
        LLRP_ThingMagicCustomNXPUntraceableAuthType_UNTRACEABLE_WITH_ACCESS,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicRegulatoryMode[] =
{
  
    {
        "CONTINUOUS",
        LLRP_ThingMagicRegulatoryMode_CONTINUOUS,
    },
    {
        "ONE_SHOT",
        LLRP_ThingMagicRegulatoryMode_ONE_SHOT,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicRegulatoryModulation[] =
{
  
    {
        "CW",
        LLRP_ThingMagicRegulatoryModulation_CW,
    },
    {
        "PRBS",
        LLRP_ThingMagicRegulatoryModulation_PRBS,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicRegulatoryEnable[] =
{
  
    {
        "false",
        LLRP_ThingMagicRegulatoryEnable_false,
    },
    {
        "true",
        LLRP_ThingMagicRegulatoryEnable_true,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomProtocol[] =
{
  
    {
        "Gen2",
        LLRP_ThingMagicCustomProtocol_Gen2,
    },
    {
        "Iso180006b",
        LLRP_ThingMagicCustomProtocol_Iso180006b,
    },
    {
        "IPX64",
        LLRP_ThingMagicCustomProtocol_IPX64,
    },
    {
        "IPX256",
        LLRP_ThingMagicCustomProtocol_IPX256,
    },
    {
        "Ata",
        LLRP_ThingMagicCustomProtocol_Ata,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomMetadataFlag[] =
{
  
    {
        "MetadataNone",
        LLRP_ThingMagicCustomMetadataFlag_MetadataNone,
    },
    {
        "MetadataReadCount",
        LLRP_ThingMagicCustomMetadataFlag_MetadataReadCount,
    },
    {
        "MetadataRSSI",
        LLRP_ThingMagicCustomMetadataFlag_MetadataRSSI,
    },
    {
        "MetadataAntID",
        LLRP_ThingMagicCustomMetadataFlag_MetadataAntID,
    },
    {
        "MetadataFrequency",
        LLRP_ThingMagicCustomMetadataFlag_MetadataFrequency,
    },
    {
        "MetadataTimestamp",
        LLRP_ThingMagicCustomMetadataFlag_MetadataTimestamp,
    },
    {
        "MetadataPhase",
        LLRP_ThingMagicCustomMetadataFlag_MetadataPhase,
    },
    {
        "MetadataProtocol",
        LLRP_ThingMagicCustomMetadataFlag_MetadataProtocol,
    },
    {
        "MetadataData",
        LLRP_ThingMagicCustomMetadataFlag_MetadataData,
    },
    {
        "MetadataGPIOStatus",
        LLRP_ThingMagicCustomMetadataFlag_MetadataGPIOStatus,
    },
    {
        "MetadataGen2Q",
        LLRP_ThingMagicCustomMetadataFlag_MetadataGen2Q,
    },
    {
        "MetadataGen2LF",
        LLRP_ThingMagicCustomMetadataFlag_MetadataGen2LF,
    },
    {
        "MetadataGen2Target",
        LLRP_ThingMagicCustomMetadataFlag_MetadataGen2Target,
    },
    {
        "MetadataBrandID",
        LLRP_ThingMagicCustomMetadataFlag_MetadataBrandID,
    },
    {
        "MetadataMax",
        LLRP_ThingMagicCustomMetadataFlag_MetadataMax,
    },
    {
        "MetadataAll",
        LLRP_ThingMagicCustomMetadataFlag_MetadataAll,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomStatsEnableFlag[] =
{
  
    {
        "StatsEnableNone",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableNone,
    },
    {
        "StatsEnableRFOnTime",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableRFOnTime,
    },
    {
        "StatsEnableNoiseFloorSearchRxTxWithTxOn",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableNoiseFloorSearchRxTxWithTxOn,
    },
    {
        "StatsEnableFrequency",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableFrequency,
    },
    {
        "StatsEnableTemperature",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableTemperature,
    },
    {
        "StatsEnableAntennaPorts",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableAntennaPorts,
    },
    {
        "StatsEnableProtocol",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableProtocol,
    },
    {
        "StatsEnableConnectedAntennas",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableConnectedAntennas,
    },
    {
        "StatsEnableAll",
        LLRP_ThingMagicCustomStatsEnableFlag_StatsEnableAll,
    },
    { 0, 0 }
};


const LLRP_tSEnumTableEntry
LLRP_estThingMagicCustomAntennaSwitchingType[] =
{
  
    {
        "Equal",
        LLRP_ThingMagicCustomAntennaSwitchingType_Equal,
    },
    {
        "Dynamic",
        LLRP_ThingMagicCustomAntennaSwitchingType_Dynamic,
    },
    { 0, 0 }
};



/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    1,	// .TypeNum
    
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber,
    &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "MagicNumber",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "BootToSafeMode",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->MagicNumber =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber);
    }
    
    if(NULL != pThis)
    {
        pThis->BootToSafeMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_getMagicNumber (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
    return pThis->MagicNumber;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_setMagicNumber (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  llrp_u32_t Value)
{
    pThis->MagicNumber = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_getBootToSafeMode (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
    return pThis->BootToSafeMode;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_setBootToSafeMode (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  llrp_u1_t Value)
{
    pThis->BootToSafeMode = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->MagicNumber,
        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_MagicNumber);

    pOps->pfPut_u1(pEncoderStream,
        pThis->BootToSafeMode,
        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER_BootToSafeMode);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    2,	// .TypeNum
    
          NULL
        ,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    3,	// .TypeNum
    
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    4,	// .TypeNum
    
          NULL
        ,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    5,	// .TypeNum
    
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    6,	// .TypeNum
    
          NULL
        ,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds =
{
    LLRP_FT_U64,	// .eFieldType
    LLRP_FMT_DATETIME,	// .eFieldFormat
    "Microseconds",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Microseconds =
                pOps->pfGet_u64(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds);
    }
    else
    {
        pOps->pfGet_u64(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds);
    }
    
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u64_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_getMicroseconds (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
    return pThis->Microseconds;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_setMicroseconds (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  llrp_u64_t Value)
{
    pThis->Microseconds = Value;
    return LLRP_RC_OK;
}


LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u64(pEncoderStream,
        pThis->Microseconds,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME_Microseconds);

    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    7,	// .TypeNum
    
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AntennaID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID);
    }
    
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_getAntennaID (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis)
{
    return pThis->AntennaID;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_setAntennaID (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  llrp_u16_t Value)
{
    pThis->AntennaID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->AntennaID,
        &LLRP_fdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS_AntennaID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    8,	// .TypeNum
    
          NULL
        ,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised,
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TagsIdentified",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TagsNotIdentified",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "MemoryReadFailures",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "WriteOperations",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "WriteFailures",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "KillOperations",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "KillFailures",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "EraseOperations",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "EraseFailures",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LockOperations",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LockFailures",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NoiseLevel",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TimeEnergised",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PowerLevel",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->TagsIdentified =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified);
    }
    
    if(NULL != pThis)
    {
        pThis->TagsNotIdentified =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified);
    }
    
    if(NULL != pThis)
    {
        pThis->MemoryReadFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->KillOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->KillFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->EraseOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->EraseFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->LockOperations =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations);
    }
    
    if(NULL != pThis)
    {
        pThis->LockFailures =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures);
    }
    
    if(NULL != pThis)
    {
        pThis->NoiseLevel =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeEnergised =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised);
    }
    
    if(NULL != pThis)
    {
        pThis->PowerLevel =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel);
    }
    
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getTagsIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->TagsIdentified;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setTagsIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->TagsIdentified = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getTagsNotIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->TagsNotIdentified;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setTagsNotIdentified (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->TagsNotIdentified = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getMemoryReadFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->MemoryReadFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setMemoryReadFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->MemoryReadFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getWriteOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->WriteOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setWriteOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->WriteOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getWriteFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->WriteFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setWriteFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->WriteFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getKillOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->KillOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setKillOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->KillOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getKillFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->KillFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setKillFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->KillFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getEraseOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->EraseOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setEraseOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->EraseOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getEraseFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->EraseFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setEraseFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->EraseFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getLockOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->LockOperations;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setLockOperations (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->LockOperations = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getLockFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->LockFailures;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setLockFailures (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->LockFailures = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getNoiseLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->NoiseLevel;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setNoiseLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->NoiseLevel = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getTimeEnergised (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->TimeEnergised;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setTimeEnergised (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->TimeEnergised = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getPowerLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->PowerLevel;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setPowerLevel (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  llrp_u32_t Value)
{
    pThis->PowerLevel = Value;
    return LLRP_RC_OK;
}


LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->TagsIdentified,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsIdentified);

    pOps->pfPut_u32(pEncoderStream,
        pThis->TagsNotIdentified,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TagsNotIdentified);

    pOps->pfPut_u32(pEncoderStream,
        pThis->MemoryReadFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_MemoryReadFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->WriteOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->WriteFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_WriteFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_KillFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->EraseOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->EraseFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_EraseFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->LockOperations,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockOperations);

    pOps->pfPut_u32(pEncoderStream,
        pThis->LockFailures,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_LockFailures);

    pOps->pfPut_u32(pEncoderStream,
        pThis->NoiseLevel,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_NoiseLevel);

    pOps->pfPut_u32(pEncoderStream,
        pThis->TimeEnergised,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_TimeEnergised);

    pOps->pfPut_u32(pEncoderStream,
        pThis->PowerLevel,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS_PowerLevel);

    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    11,	// .TypeNum
    
          &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS[] =
{
  
    NULL
};


LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


/*
*****************************************************************
**
** Custom message THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS =
{
    TRUE,	// .bIsMessage
    "THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    12,	// .TypeNum
    
          NULL
        ,	// .pResponseType
    LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_encode,

  
    NULL,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS[] =
{
  
    &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderDeviceOperatingStatus",	// .pName
    LLRP_estThingMagicReaderOperatingStatus,	// .pEnumTable
};

LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_construct (void)
{
    LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pNew;

    pNew = (LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *)
        LLRP_Element_construct(&LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS);

    return pNew;
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_destruct (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_decodeFields (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eReaderDeviceOperatingStatus =
                (LLRP_tEThingMagicReaderOperatingStatus) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus);
    }

}

void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_assimilateSubParameters (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of LLRPStatus
    pType = &LLRP_tdLLRPStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pLLRPStatus = (LLRP_tSLLRPStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicReaderOperatingStatus
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_getReaderDeviceOperatingStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
    return pThis->eReaderDeviceOperatingStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_setReaderDeviceOperatingStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tEThingMagicReaderOperatingStatus eValue)
{
    pThis->eReaderDeviceOperatingStatus = eValue;
    return LLRP_RC_OK;
}


LLRP_tSLLRPStatus *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_getLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
    return pThis->pLLRPStatus;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_setLLRPStatus (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSLLRPStatus * pValue)
{
    SUBPARAM_SET(pLLRPStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_beginCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_addCustom (
  LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_THINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_encode (
  const LLRP_tSTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eReaderDeviceOperatingStatus,
        &LLRP_fdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS_ReaderDeviceOperatingStatus);

    pType = &LLRP_tdLLRPStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pLLRPStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDeviceControlCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDeviceControlCapabilities =
{
    FALSE,	// .bIsMessage
    "ThingMagicDeviceControlCapabilities",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    1,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDeviceControlCapabilities,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDeviceControlCapabilities),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDeviceControlCapabilities_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDeviceControlCapabilities_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDeviceControlCapabilities_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDeviceControlCapabilities_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDeviceControlCapabilities_encode,

  
    LLRP_ThingMagicDeviceControlCapabilities_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDeviceControlCapabilities[] =
{
  
    &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeviceControlCapabilities_RequestedData =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "RequestedData",	// .pName
    LLRP_estThingMagicControlCapabilities,	// .pEnumTable
};

LLRP_tSThingMagicDeviceControlCapabilities *
LLRP_ThingMagicDeviceControlCapabilities_construct (void)
{
    LLRP_tSThingMagicDeviceControlCapabilities *pNew;

    pNew = (LLRP_tSThingMagicDeviceControlCapabilities *)
        LLRP_Element_construct(&LLRP_tdThingMagicDeviceControlCapabilities);

    return pNew;
}

void
LLRP_ThingMagicDeviceControlCapabilities_destruct (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDeviceControlCapabilities_decodeFields (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eRequestedData =
                (LLRP_tEThingMagicControlCapabilities) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData);
    }

}

void
LLRP_ThingMagicDeviceControlCapabilities_assimilateSubParameters (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDeviceControlCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicControlCapabilities
LLRP_ThingMagicDeviceControlCapabilities_getRequestedData (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis)
{
    return pThis->eRequestedData;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlCapabilities_setRequestedData (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tEThingMagicControlCapabilities eValue)
{
    pThis->eRequestedData = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDeviceControlCapabilities_beginCustom (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlCapabilities_addCustom (
  LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDeviceControlCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDeviceControlCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDeviceControlCapabilities_encode (
  const LLRP_tSThingMagicDeviceControlCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eRequestedData,
        &LLRP_fdThingMagicDeviceControlCapabilities_RequestedData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDeviceControlCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CAPABILITIES)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter DeviceInformationCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdDeviceInformationCapabilities =
{
    FALSE,	// .bIsMessage
    "DeviceInformationCapabilities",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    2,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdDeviceInformationCapabilities,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSDeviceInformationCapabilities),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_DeviceInformationCapabilities_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_DeviceInformationCapabilities_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_DeviceInformationCapabilities_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_DeviceInformationCapabilities_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_DeviceInformationCapabilities_encode,

  
    LLRP_DeviceInformationCapabilities_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdDeviceInformationCapabilities[] =
{
  
    &LLRP_fdDeviceInformationCapabilities_ReaderEPC,
    &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber,
    &LLRP_fdDeviceInformationCapabilities_HardwareVersion,
    &LLRP_fdDeviceInformationCapabilities_AFEVersion,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_ReaderEPC =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderEPC",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderSerialNumber",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_HardwareVersion =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "HardwareVersion",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdDeviceInformationCapabilities_AFEVersion =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AFEVersion",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSDeviceInformationCapabilities *
LLRP_DeviceInformationCapabilities_construct (void)
{
    LLRP_tSDeviceInformationCapabilities *pNew;

    pNew = (LLRP_tSDeviceInformationCapabilities *)
        LLRP_Element_construct(&LLRP_tdDeviceInformationCapabilities);

    return pNew;
}

void
LLRP_DeviceInformationCapabilities_destruct (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReaderEPC);
      
    LLRP_utf8v_clear(&pThis->ReaderSerialNumber);
      
    LLRP_utf8v_clear(&pThis->HardwareVersion);
      
    LLRP_utf8v_clear(&pThis->AFEVersion);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_DeviceInformationCapabilities_decodeFields (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderEPC =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_ReaderEPC);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_ReaderEPC);
    }
    
    if(NULL != pThis)
    {
        pThis->ReaderSerialNumber =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber);
    }
    
    if(NULL != pThis)
    {
        pThis->HardwareVersion =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_HardwareVersion);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_HardwareVersion);
    }
    
    if(NULL != pThis)
    {
        pThis->AFEVersion =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdDeviceInformationCapabilities_AFEVersion);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdDeviceInformationCapabilities_AFEVersion);
    }
    
}

void
LLRP_DeviceInformationCapabilities_assimilateSubParameters (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of ReaderProductID
    pType = &LLRP_tdReaderProductID;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pReaderProductID = (LLRP_tSReaderProductID *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ReaderProductGroupID
    pType = &LLRP_tdReaderProductGroupID;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pReaderProductGroupID = (LLRP_tSReaderProductGroupID *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ReaderProductGroup
    pType = &LLRP_tdReaderProductGroup;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pReaderProductGroup = (LLRP_tSReaderProductGroup *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdDeviceInformationCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getReaderEPC (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->ReaderEPC;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setReaderEPC (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderEPC);

    pThis->ReaderEPC = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getReaderSerialNumber (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->ReaderSerialNumber;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setReaderSerialNumber (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderSerialNumber);

    pThis->ReaderSerialNumber = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getHardwareVersion (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->HardwareVersion;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setHardwareVersion (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->HardwareVersion);

    pThis->HardwareVersion = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_DeviceInformationCapabilities_getAFEVersion (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->AFEVersion;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setAFEVersion (
  LLRP_tSDeviceInformationCapabilities *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->AFEVersion);

    pThis->AFEVersion = Value;
    return LLRP_RC_OK;
}


LLRP_tSReaderProductID *
LLRP_DeviceInformationCapabilities_getReaderProductID (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->pReaderProductID;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setReaderProductID (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSReaderProductID * pValue)
{
    SUBPARAM_SET(pReaderProductID, pValue);

    return LLRP_RC_OK;
}


LLRP_tSReaderProductGroupID *
LLRP_DeviceInformationCapabilities_getReaderProductGroupID (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->pReaderProductGroupID;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setReaderProductGroupID (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSReaderProductGroupID * pValue)
{
    SUBPARAM_SET(pReaderProductGroupID, pValue);

    return LLRP_RC_OK;
}


LLRP_tSReaderProductGroup *
LLRP_DeviceInformationCapabilities_getReaderProductGroup (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->pReaderProductGroup;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_setReaderProductGroup (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSReaderProductGroup * pValue)
{
    SUBPARAM_SET(pReaderProductGroup, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_DeviceInformationCapabilities_beginCustom (
  LLRP_tSDeviceInformationCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_DeviceInformationCapabilities_addCustom (
  LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdDeviceInformationCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_DeviceInformationCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_DeviceInformationCapabilities_encode (
  const LLRP_tSDeviceInformationCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderEPC,
        &LLRP_fdDeviceInformationCapabilities_ReaderEPC);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderSerialNumber,
        &LLRP_fdDeviceInformationCapabilities_ReaderSerialNumber);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->HardwareVersion,
        &LLRP_fdDeviceInformationCapabilities_HardwareVersion);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->AFEVersion,
        &LLRP_fdDeviceInformationCapabilities_AFEVersion);

    pType = &LLRP_tdReaderProductID;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pReaderProductID,
        pType);
      
    pType = &LLRP_tdReaderProductGroupID;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pReaderProductGroupID,
        pType);
      
    pType = &LLRP_tdReaderProductGroup;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pReaderProductGroup,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_DeviceInformationCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CAPABILITIES_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ReaderProductID
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdReaderProductID =
{
    FALSE,	// .bIsMessage
    "ReaderProductID",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    172,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdReaderProductID,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSReaderProductID),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ReaderProductID_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ReaderProductID_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ReaderProductID_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ReaderProductID_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ReaderProductID_encode,

  
    LLRP_ReaderProductID_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdReaderProductID[] =
{
  
    &LLRP_fdReaderProductID_ProductID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdReaderProductID_ProductID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ProductID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSReaderProductID *
LLRP_ReaderProductID_construct (void)
{
    LLRP_tSReaderProductID *pNew;

    pNew = (LLRP_tSReaderProductID *)
        LLRP_Element_construct(&LLRP_tdReaderProductID);

    return pNew;
}

void
LLRP_ReaderProductID_destruct (
  LLRP_tSReaderProductID *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ReaderProductID_decodeFields (
  LLRP_tSReaderProductID *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ProductID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdReaderProductID_ProductID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdReaderProductID_ProductID);
    }
    
}

void
LLRP_ReaderProductID_assimilateSubParameters (
  LLRP_tSReaderProductID *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdReaderProductID))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ReaderProductID_getProductID (
  LLRP_tSReaderProductID *pThis)
{
    return pThis->ProductID;
}

LLRP_tResultCode
LLRP_ReaderProductID_setProductID (
  LLRP_tSReaderProductID *pThis,
  llrp_u16_t Value)
{
    pThis->ProductID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ReaderProductID_beginCustom (
  LLRP_tSReaderProductID *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ReaderProductID_addCustom (
  LLRP_tSReaderProductID *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdReaderProductID))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ReaderProductID_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ReaderProductID_encode (
  const LLRP_tSReaderProductID *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->ProductID,
        &LLRP_fdReaderProductID_ProductID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ReaderProductID_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ReaderProductGroupID
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdReaderProductGroupID =
{
    FALSE,	// .bIsMessage
    "ReaderProductGroupID",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    173,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdReaderProductGroupID,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSReaderProductGroupID),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ReaderProductGroupID_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ReaderProductGroupID_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ReaderProductGroupID_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ReaderProductGroupID_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ReaderProductGroupID_encode,

  
    LLRP_ReaderProductGroupID_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdReaderProductGroupID[] =
{
  
    &LLRP_fdReaderProductGroupID_ProductGroupID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdReaderProductGroupID_ProductGroupID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ProductGroupID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSReaderProductGroupID *
LLRP_ReaderProductGroupID_construct (void)
{
    LLRP_tSReaderProductGroupID *pNew;

    pNew = (LLRP_tSReaderProductGroupID *)
        LLRP_Element_construct(&LLRP_tdReaderProductGroupID);

    return pNew;
}

void
LLRP_ReaderProductGroupID_destruct (
  LLRP_tSReaderProductGroupID *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ReaderProductGroupID_decodeFields (
  LLRP_tSReaderProductGroupID *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ProductGroupID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdReaderProductGroupID_ProductGroupID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdReaderProductGroupID_ProductGroupID);
    }
    
}

void
LLRP_ReaderProductGroupID_assimilateSubParameters (
  LLRP_tSReaderProductGroupID *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdReaderProductGroupID))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ReaderProductGroupID_getProductGroupID (
  LLRP_tSReaderProductGroupID *pThis)
{
    return pThis->ProductGroupID;
}

LLRP_tResultCode
LLRP_ReaderProductGroupID_setProductGroupID (
  LLRP_tSReaderProductGroupID *pThis,
  llrp_u16_t Value)
{
    pThis->ProductGroupID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ReaderProductGroupID_beginCustom (
  LLRP_tSReaderProductGroupID *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ReaderProductGroupID_addCustom (
  LLRP_tSReaderProductGroupID *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdReaderProductGroupID))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ReaderProductGroupID_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ReaderProductGroupID_encode (
  const LLRP_tSReaderProductGroupID *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->ProductGroupID,
        &LLRP_fdReaderProductGroupID_ProductGroupID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ReaderProductGroupID_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ReaderProductGroup
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdReaderProductGroup =
{
    FALSE,	// .bIsMessage
    "ReaderProductGroup",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    174,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdReaderProductGroup,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSReaderProductGroup),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ReaderProductGroup_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ReaderProductGroup_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ReaderProductGroup_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ReaderProductGroup_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ReaderProductGroup_encode,

  
    LLRP_ReaderProductGroup_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdReaderProductGroup[] =
{
  
    &LLRP_fdReaderProductGroup_ProductGroup,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdReaderProductGroup_ProductGroup =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ProductGroup",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSReaderProductGroup *
LLRP_ReaderProductGroup_construct (void)
{
    LLRP_tSReaderProductGroup *pNew;

    pNew = (LLRP_tSReaderProductGroup *)
        LLRP_Element_construct(&LLRP_tdReaderProductGroup);

    return pNew;
}

void
LLRP_ReaderProductGroup_destruct (
  LLRP_tSReaderProductGroup *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ProductGroup);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ReaderProductGroup_decodeFields (
  LLRP_tSReaderProductGroup *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ProductGroup =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdReaderProductGroup_ProductGroup);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdReaderProductGroup_ProductGroup);
    }
    
}

void
LLRP_ReaderProductGroup_assimilateSubParameters (
  LLRP_tSReaderProductGroup *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdReaderProductGroup))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_ReaderProductGroup_getProductGroup (
  LLRP_tSReaderProductGroup *pThis)
{
    return pThis->ProductGroup;
}

LLRP_tResultCode
LLRP_ReaderProductGroup_setProductGroup (
  LLRP_tSReaderProductGroup *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ProductGroup);

    pThis->ProductGroup = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ReaderProductGroup_beginCustom (
  LLRP_tSReaderProductGroup *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ReaderProductGroup_addCustom (
  LLRP_tSReaderProductGroup *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdReaderProductGroup))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ReaderProductGroup_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ReaderProductGroup_encode (
  const LLRP_tSReaderProductGroup *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ProductGroup,
        &LLRP_fdReaderProductGroup_ProductGroup);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ReaderProductGroup_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDeviceControlConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDeviceControlConfiguration =
{
    FALSE,	// .bIsMessage
    "ThingMagicDeviceControlConfiguration",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    3,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDeviceControlConfiguration,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDeviceControlConfiguration),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDeviceControlConfiguration_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDeviceControlConfiguration_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDeviceControlConfiguration_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDeviceControlConfiguration_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDeviceControlConfiguration_encode,

  
    LLRP_ThingMagicDeviceControlConfiguration_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDeviceControlConfiguration[] =
{
  
    &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID,
    &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeviceControlConfiguration_AntennaID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AntennaID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeviceControlConfiguration_RequestedData =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "RequestedData",	// .pName
    LLRP_estThingMagicControlConfiguration,	// .pEnumTable
};

LLRP_tSThingMagicDeviceControlConfiguration *
LLRP_ThingMagicDeviceControlConfiguration_construct (void)
{
    LLRP_tSThingMagicDeviceControlConfiguration *pNew;

    pNew = (LLRP_tSThingMagicDeviceControlConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicDeviceControlConfiguration);

    return pNew;
}

void
LLRP_ThingMagicDeviceControlConfiguration_destruct (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDeviceControlConfiguration_decodeFields (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID);
    }
    
    if(NULL != pThis)
    {
        pThis->eRequestedData =
                (LLRP_tEThingMagicControlConfiguration) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData);
    }

}

void
LLRP_ThingMagicDeviceControlConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDeviceControlConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDeviceControlConfiguration_getAntennaID (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
    return pThis->AntennaID;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlConfiguration_setAntennaID (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  llrp_u16_t Value)
{
    pThis->AntennaID = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicControlConfiguration
LLRP_ThingMagicDeviceControlConfiguration_getRequestedData (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
    return pThis->eRequestedData;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlConfiguration_setRequestedData (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tEThingMagicControlConfiguration eValue)
{
    pThis->eRequestedData = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDeviceControlConfiguration_beginCustom (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDeviceControlConfiguration_addCustom (
  LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDeviceControlConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDeviceControlConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDeviceControlConfiguration_encode (
  const LLRP_tSThingMagicDeviceControlConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->AntennaID,
        &LLRP_fdThingMagicDeviceControlConfiguration_AntennaID);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eRequestedData,
        &LLRP_fdThingMagicDeviceControlConfiguration_RequestedData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDeviceControlConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicReaderConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicReaderConfiguration =
{
    FALSE,	// .bIsMessage
    "ThingMagicReaderConfiguration",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    4,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicReaderConfiguration,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicReaderConfiguration),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicReaderConfiguration_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicReaderConfiguration_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicReaderConfiguration_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicReaderConfiguration_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicReaderConfiguration_encode,

  
    LLRP_ThingMagicReaderConfiguration_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicReaderConfiguration[] =
{
  
    &LLRP_fdThingMagicReaderConfiguration_ReaderDescription,
    &LLRP_fdThingMagicReaderConfiguration_ReaderRole,
    &LLRP_fdThingMagicReaderConfiguration_ReaderHostName,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderConfiguration_ReaderDescription =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderDescription",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderConfiguration_ReaderRole =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderRole",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderConfiguration_ReaderHostName =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderHostName",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicReaderConfiguration *
LLRP_ThingMagicReaderConfiguration_construct (void)
{
    LLRP_tSThingMagicReaderConfiguration *pNew;

    pNew = (LLRP_tSThingMagicReaderConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicReaderConfiguration);

    return pNew;
}

void
LLRP_ThingMagicReaderConfiguration_destruct (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReaderDescription);
      
    LLRP_utf8v_clear(&pThis->ReaderRole);
      
    LLRP_utf8v_clear(&pThis->ReaderHostName);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicReaderConfiguration_decodeFields (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderDescription =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicReaderConfiguration_ReaderDescription);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicReaderConfiguration_ReaderDescription);
    }
    
    if(NULL != pThis)
    {
        pThis->ReaderRole =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicReaderConfiguration_ReaderRole);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicReaderConfiguration_ReaderRole);
    }
    
    if(NULL != pThis)
    {
        pThis->ReaderHostName =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicReaderConfiguration_ReaderHostName);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicReaderConfiguration_ReaderHostName);
    }
    
}

void
LLRP_ThingMagicReaderConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicReaderConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_ThingMagicReaderConfiguration_getReaderDescription (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->ReaderDescription;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_setReaderDescription (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderDescription);

    pThis->ReaderDescription = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_ThingMagicReaderConfiguration_getReaderRole (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->ReaderRole;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_setReaderRole (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderRole);

    pThis->ReaderRole = Value;
    return LLRP_RC_OK;
}


llrp_utf8v_t
LLRP_ThingMagicReaderConfiguration_getReaderHostName (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->ReaderHostName;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_setReaderHostName (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderHostName);

    pThis->ReaderHostName = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicReaderConfiguration_beginCustom (
  LLRP_tSThingMagicReaderConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicReaderConfiguration_addCustom (
  LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicReaderConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicReaderConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicReaderConfiguration_encode (
  const LLRP_tSThingMagicReaderConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderDescription,
        &LLRP_fdThingMagicReaderConfiguration_ReaderDescription);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderRole,
        &LLRP_fdThingMagicReaderConfiguration_ReaderRole);

    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderHostName,
        &LLRP_fdThingMagicReaderConfiguration_ReaderHostName);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicReaderConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicRegionConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicRegionConfiguration =
{
    FALSE,	// .bIsMessage
    "ThingMagicRegionConfiguration",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    5,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicRegionConfiguration,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicRegionConfiguration),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicRegionConfiguration_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicRegionConfiguration_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicRegionConfiguration_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicRegionConfiguration_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicRegionConfiguration_encode,

  
    LLRP_ThingMagicRegionConfiguration_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicRegionConfiguration[] =
{
  
    &LLRP_fdThingMagicRegionConfiguration_RegionID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicRegionConfiguration_RegionID =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "RegionID",	// .pName
    LLRP_estThingMagicRegionID,	// .pEnumTable
};

LLRP_tSThingMagicRegionConfiguration *
LLRP_ThingMagicRegionConfiguration_construct (void)
{
    LLRP_tSThingMagicRegionConfiguration *pNew;

    pNew = (LLRP_tSThingMagicRegionConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicRegionConfiguration);

    return pNew;
}

void
LLRP_ThingMagicRegionConfiguration_destruct (
  LLRP_tSThingMagicRegionConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicRegionConfiguration_decodeFields (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eRegionID =
                (LLRP_tEThingMagicRegionID) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicRegionConfiguration_RegionID);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicRegionConfiguration_RegionID);
    }

}

void
LLRP_ThingMagicRegionConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicRegionConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicRegionID
LLRP_ThingMagicRegionConfiguration_getRegionID (
  LLRP_tSThingMagicRegionConfiguration *pThis)
{
    return pThis->eRegionID;
}

LLRP_tResultCode
LLRP_ThingMagicRegionConfiguration_setRegionID (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tEThingMagicRegionID eValue)
{
    pThis->eRegionID = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicRegionConfiguration_beginCustom (
  LLRP_tSThingMagicRegionConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicRegionConfiguration_addCustom (
  LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicRegionConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicRegionConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicRegionConfiguration_encode (
  const LLRP_tSThingMagicRegionConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eRegionID,
        &LLRP_fdThingMagicRegionConfiguration_RegionID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicRegionConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicProtocolConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicProtocolConfiguration =
{
    FALSE,	// .bIsMessage
    "ThingMagicProtocolConfiguration",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    6,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicProtocolConfiguration,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicProtocolConfiguration),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicProtocolConfiguration_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicProtocolConfiguration_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicProtocolConfiguration_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicProtocolConfiguration_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicProtocolConfiguration_encode,

  
    LLRP_ThingMagicProtocolConfiguration_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicProtocolConfiguration[] =
{
  
    NULL
};


LLRP_tSThingMagicProtocolConfiguration *
LLRP_ThingMagicProtocolConfiguration_construct (void)
{
    LLRP_tSThingMagicProtocolConfiguration *pNew;

    pNew = (LLRP_tSThingMagicProtocolConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicProtocolConfiguration);

    return pNew;
}

void
LLRP_ThingMagicProtocolConfiguration_destruct (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicProtocolConfiguration_decodeFields (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicProtocolConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of Gen2CustomParameters
    pType = &LLRP_tdGen2CustomParameters;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2CustomParameters = (LLRP_tSGen2CustomParameters *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ISO18K6BCustomParameters
    pType = &LLRP_tdISO18K6BCustomParameters;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pISO18K6BCustomParameters = (LLRP_tSISO18K6BCustomParameters *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicProtocolConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSGen2CustomParameters *
LLRP_ThingMagicProtocolConfiguration_getGen2CustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
    return pThis->pGen2CustomParameters;
}

LLRP_tResultCode
LLRP_ThingMagicProtocolConfiguration_setGen2CustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSGen2CustomParameters * pValue)
{
    SUBPARAM_SET(pGen2CustomParameters, pValue);

    return LLRP_RC_OK;
}


LLRP_tSISO18K6BCustomParameters *
LLRP_ThingMagicProtocolConfiguration_getISO18K6BCustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
    return pThis->pISO18K6BCustomParameters;
}

LLRP_tResultCode
LLRP_ThingMagicProtocolConfiguration_setISO18K6BCustomParameters (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSISO18K6BCustomParameters * pValue)
{
    SUBPARAM_SET(pISO18K6BCustomParameters, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicProtocolConfiguration_beginCustom (
  LLRP_tSThingMagicProtocolConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicProtocolConfiguration_addCustom (
  LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicProtocolConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicProtocolConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicProtocolConfiguration_encode (
  const LLRP_tSThingMagicProtocolConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdGen2CustomParameters;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2CustomParameters,
        pType);
      
    pType = &LLRP_tdISO18K6BCustomParameters;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pISO18K6BCustomParameters,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicProtocolConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2CustomParameters
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2CustomParameters =
{
    FALSE,	// .bIsMessage
    "Gen2CustomParameters",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    7,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdGen2CustomParameters,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSGen2CustomParameters),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_Gen2CustomParameters_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_Gen2CustomParameters_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2CustomParameters_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2CustomParameters_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2CustomParameters_encode,

  
    LLRP_Gen2CustomParameters_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2CustomParameters[] =
{
  
    NULL
};


LLRP_tSGen2CustomParameters *
LLRP_Gen2CustomParameters_construct (void)
{
    LLRP_tSGen2CustomParameters *pNew;

    pNew = (LLRP_tSGen2CustomParameters *)
        LLRP_Element_construct(&LLRP_tdGen2CustomParameters);

    return pNew;
}

void
LLRP_Gen2CustomParameters_destruct (
  LLRP_tSGen2CustomParameters *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2CustomParameters_decodeFields (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_Gen2CustomParameters_assimilateSubParameters (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of Gen2Q
    pType = &LLRP_tdGen2Q;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2Q = (LLRP_tSGen2Q *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicTargetStrategy
    pType = &LLRP_tdThingMagicTargetStrategy;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicTargetStrategy = (LLRP_tSThingMagicTargetStrategy *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of Gen2T4Param
    pType = &LLRP_tdGen2T4Param;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2T4Param = (LLRP_tSGen2T4Param *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of InitQ
    pType = &LLRP_tdInitQ;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pInitQ = (LLRP_tSInitQ *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of sendSelect
    pType = &LLRP_tdsendSelect;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->psendSelect = (LLRP_tSsendSelect *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2CustomParameters))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSGen2Q *
LLRP_Gen2CustomParameters_getGen2Q (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->pGen2Q;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_setGen2Q (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSGen2Q * pValue)
{
    SUBPARAM_SET(pGen2Q, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicTargetStrategy *
LLRP_Gen2CustomParameters_getThingMagicTargetStrategy (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->pThingMagicTargetStrategy;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_setThingMagicTargetStrategy (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSThingMagicTargetStrategy * pValue)
{
    SUBPARAM_SET(pThingMagicTargetStrategy, pValue);

    return LLRP_RC_OK;
}


LLRP_tSGen2T4Param *
LLRP_Gen2CustomParameters_getGen2T4Param (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->pGen2T4Param;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_setGen2T4Param (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSGen2T4Param * pValue)
{
    SUBPARAM_SET(pGen2T4Param, pValue);

    return LLRP_RC_OK;
}


LLRP_tSInitQ *
LLRP_Gen2CustomParameters_getInitQ (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->pInitQ;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_setInitQ (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSInitQ * pValue)
{
    SUBPARAM_SET(pInitQ, pValue);

    return LLRP_RC_OK;
}


LLRP_tSsendSelect *
LLRP_Gen2CustomParameters_getsendSelect (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->psendSelect;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_setsendSelect (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSsendSelect * pValue)
{
    SUBPARAM_SET(psendSelect, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2CustomParameters_beginCustom (
  LLRP_tSGen2CustomParameters *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2CustomParameters_addCustom (
  LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2CustomParameters))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2CustomParameters_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2CustomParameters_encode (
  const LLRP_tSGen2CustomParameters *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdGen2Q;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2Q,
        pType);
      
    pType = &LLRP_tdThingMagicTargetStrategy;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicTargetStrategy,
        pType);
      
    pType = &LLRP_tdGen2T4Param;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2T4Param,
        pType);
      
    pType = &LLRP_tdInitQ;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pInitQ,
        pType);
      
    pType = &LLRP_tdsendSelect;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->psendSelect,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2CustomParameters_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAntennaConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAntennaConfiguration =
{
    FALSE,	// .bIsMessage
    "ThingMagicAntennaConfiguration",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    8,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicAntennaConfiguration,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicAntennaConfiguration),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAntennaConfiguration_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAntennaConfiguration_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAntennaConfiguration_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAntennaConfiguration_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAntennaConfiguration_encode,

  
    LLRP_ThingMagicAntennaConfiguration_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAntennaConfiguration[] =
{
  
    &LLRP_fdThingMagicAntennaConfiguration_AntennaID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicAntennaConfiguration_AntennaID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AntennaID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicAntennaConfiguration *
LLRP_ThingMagicAntennaConfiguration_construct (void)
{
    LLRP_tSThingMagicAntennaConfiguration *pNew;

    pNew = (LLRP_tSThingMagicAntennaConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicAntennaConfiguration);

    return pNew;
}

void
LLRP_ThingMagicAntennaConfiguration_destruct (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAntennaConfiguration_decodeFields (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicAntennaConfiguration_AntennaID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicAntennaConfiguration_AntennaID);
    }
    
}

void
LLRP_ThingMagicAntennaConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of AntennaMode
    pType = &LLRP_tdAntennaMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pAntennaMode = (LLRP_tSAntennaMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of WriteTransmitPower
    pType = &LLRP_tdWriteTransmitPower;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pWriteTransmitPower = (LLRP_tSWriteTransmitPower *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ReadPointDescription
    pType = &LLRP_tdReadPointDescription;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pReadPointDescription = (LLRP_tSReadPointDescription *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAntennaConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicAntennaConfiguration_getAntennaID (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->AntennaID;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setAntennaID (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  llrp_u16_t Value)
{
    pThis->AntennaID = Value;
    return LLRP_RC_OK;
}


LLRP_tSAntennaMode *
LLRP_ThingMagicAntennaConfiguration_getAntennaMode (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->pAntennaMode;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setAntennaMode (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSAntennaMode * pValue)
{
    SUBPARAM_SET(pAntennaMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSWriteTransmitPower *
LLRP_ThingMagicAntennaConfiguration_getWriteTransmitPower (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->pWriteTransmitPower;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setWriteTransmitPower (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSWriteTransmitPower * pValue)
{
    SUBPARAM_SET(pWriteTransmitPower, pValue);

    return LLRP_RC_OK;
}


LLRP_tSReadPointDescription *
LLRP_ThingMagicAntennaConfiguration_getReadPointDescription (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->pReadPointDescription;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_setReadPointDescription (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSReadPointDescription * pValue)
{
    SUBPARAM_SET(pReadPointDescription, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicAntennaConfiguration_beginCustom (
  LLRP_tSThingMagicAntennaConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaConfiguration_addCustom (
  LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAntennaConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAntennaConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAntennaConfiguration_encode (
  const LLRP_tSThingMagicAntennaConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->AntennaID,
        &LLRP_fdThingMagicAntennaConfiguration_AntennaID);

    pType = &LLRP_tdAntennaMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pAntennaMode,
        pType);
      
    pType = &LLRP_tdWriteTransmitPower;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pWriteTransmitPower,
        pType);
      
    pType = &LLRP_tdReadPointDescription;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pReadPointDescription,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAntennaConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCurrentTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCurrentTime =
{
    FALSE,	// .bIsMessage
    "ThingMagicCurrentTime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    9,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicCurrentTime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicCurrentTime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCurrentTime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCurrentTime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCurrentTime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCurrentTime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCurrentTime_encode,

  
    LLRP_ThingMagicCurrentTime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCurrentTime[] =
{
  
    &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCurrentTime_ReaderCurrentTime =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderCurrentTime",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicCurrentTime *
LLRP_ThingMagicCurrentTime_construct (void)
{
    LLRP_tSThingMagicCurrentTime *pNew;

    pNew = (LLRP_tSThingMagicCurrentTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicCurrentTime);

    return pNew;
}

void
LLRP_ThingMagicCurrentTime_destruct (
  LLRP_tSThingMagicCurrentTime *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReaderCurrentTime);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCurrentTime_decodeFields (
  LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderCurrentTime =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime);
    }
    
}

void
LLRP_ThingMagicCurrentTime_assimilateSubParameters (
  LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicCurrentTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_ThingMagicCurrentTime_getReaderCurrentTime (
  LLRP_tSThingMagicCurrentTime *pThis)
{
    return pThis->ReaderCurrentTime;
}

LLRP_tResultCode
LLRP_ThingMagicCurrentTime_setReaderCurrentTime (
  LLRP_tSThingMagicCurrentTime *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReaderCurrentTime);

    pThis->ReaderCurrentTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicCurrentTime_beginCustom (
  LLRP_tSThingMagicCurrentTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicCurrentTime_addCustom (
  LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicCurrentTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicCurrentTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicCurrentTime_encode (
  const LLRP_tSThingMagicCurrentTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReaderCurrentTime,
        &LLRP_fdThingMagicCurrentTime_ReaderCurrentTime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicCurrentTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDeDuplication
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDeDuplication =
{
    FALSE,	// .bIsMessage
    "ThingMagicDeDuplication",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    10,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDeDuplication,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDeDuplication),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDeDuplication_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDeDuplication_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDeDuplication_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDeDuplication_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDeDuplication_encode,

  
    LLRP_ThingMagicDeDuplication_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDeDuplication[] =
{
  
    &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI,
    &LLRP_fdThingMagicDeDuplication_UniqueByAntenna,
    &LLRP_fdThingMagicDeDuplication_UniqueByData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeDuplication_RecordHighestRSSI =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "RecordHighestRSSI",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeDuplication_UniqueByAntenna =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "UniqueByAntenna",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDeDuplication_UniqueByData =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "UniqueByData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDeDuplication *
LLRP_ThingMagicDeDuplication_construct (void)
{
    LLRP_tSThingMagicDeDuplication *pNew;

    pNew = (LLRP_tSThingMagicDeDuplication *)
        LLRP_Element_construct(&LLRP_tdThingMagicDeDuplication);

    return pNew;
}

void
LLRP_ThingMagicDeDuplication_destruct (
  LLRP_tSThingMagicDeDuplication *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDeDuplication_decodeFields (
  LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->RecordHighestRSSI =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->UniqueByAntenna =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicDeDuplication_UniqueByAntenna);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicDeDuplication_UniqueByAntenna);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->UniqueByData =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicDeDuplication_UniqueByData);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicDeDuplication_UniqueByData);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicDeDuplication_assimilateSubParameters (
  LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDeDuplication))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicDeDuplication_getRecordHighestRSSI (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->RecordHighestRSSI;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_setRecordHighestRSSI (
  LLRP_tSThingMagicDeDuplication *pThis,
  llrp_u1_t Value)
{
    pThis->RecordHighestRSSI = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicDeDuplication_getUniqueByAntenna (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->UniqueByAntenna;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_setUniqueByAntenna (
  LLRP_tSThingMagicDeDuplication *pThis,
  llrp_u1_t Value)
{
    pThis->UniqueByAntenna = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicDeDuplication_getUniqueByData (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->UniqueByData;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_setUniqueByData (
  LLRP_tSThingMagicDeDuplication *pThis,
  llrp_u1_t Value)
{
    pThis->UniqueByData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDeDuplication_beginCustom (
  LLRP_tSThingMagicDeDuplication *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDeDuplication_addCustom (
  LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDeDuplication))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDeDuplication_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDeDuplication_encode (
  const LLRP_tSThingMagicDeDuplication *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->RecordHighestRSSI,
        &LLRP_fdThingMagicDeDuplication_RecordHighestRSSI);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u1(pEncoderStream,
        pThis->UniqueByAntenna,
        &LLRP_fdThingMagicDeDuplication_UniqueByAntenna);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u1(pEncoderStream,
        pThis->UniqueByData,
        &LLRP_fdThingMagicDeDuplication_UniqueByData);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDeDuplication_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter DeviceProtocolCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdDeviceProtocolCapabilities =
{
    FALSE,	// .bIsMessage
    "DeviceProtocolCapabilities",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    11,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdDeviceProtocolCapabilities,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSDeviceProtocolCapabilities),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_DeviceProtocolCapabilities_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_DeviceProtocolCapabilities_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_DeviceProtocolCapabilities_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_DeviceProtocolCapabilities_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_DeviceProtocolCapabilities_encode,

  
    LLRP_DeviceProtocolCapabilities_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdDeviceProtocolCapabilities[] =
{
  
    NULL
};


LLRP_tSDeviceProtocolCapabilities *
LLRP_DeviceProtocolCapabilities_construct (void)
{
    LLRP_tSDeviceProtocolCapabilities *pNew;

    pNew = (LLRP_tSDeviceProtocolCapabilities *)
        LLRP_Element_construct(&LLRP_tdDeviceProtocolCapabilities);

    return pNew;
}

void
LLRP_DeviceProtocolCapabilities_destruct (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_DeviceProtocolCapabilities_decodeFields (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_DeviceProtocolCapabilities_assimilateSubParameters (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1-N of SupportedProtocols
    pType = &LLRP_tdSupportedProtocols;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    while(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        SUBPARAM_ATTACH(listSupportedProtocols, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdDeviceProtocolCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSSupportedProtocols *
LLRP_DeviceProtocolCapabilities_beginSupportedProtocols (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
    return pThis->listSupportedProtocols;
}

LLRP_tResultCode
LLRP_DeviceProtocolCapabilities_addSupportedProtocols (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSSupportedProtocols *pValue)
{
    SUBPARAM_ADD(listSupportedProtocols, pValue);

    return LLRP_RC_OK;
}

LLRP_tSSupportedProtocols *
LLRP_DeviceProtocolCapabilities_nextSupportedProtocols (
  LLRP_tSSupportedProtocols *pCurrent)
{
    return (LLRP_tSSupportedProtocols *)
                pCurrent->hdr.pNextSubParameter;
}

void
LLRP_DeviceProtocolCapabilities_clearSupportedProtocols (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
    SUBPARAM_CLEAR(listSupportedProtocols);
}


LLRP_tSParameter *
LLRP_DeviceProtocolCapabilities_beginCustom (
  LLRP_tSDeviceProtocolCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_DeviceProtocolCapabilities_addCustom (
  LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdDeviceProtocolCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_DeviceProtocolCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_DeviceProtocolCapabilities_encode (
  const LLRP_tSDeviceProtocolCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdSupportedProtocols;
      
    pOps->pfPutRequiredSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listSupportedProtocols,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_DeviceProtocolCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CAPABILITIES_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter SupportedProtocols
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdSupportedProtocols =
{
    FALSE,	// .bIsMessage
    "SupportedProtocols",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    12,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdSupportedProtocols,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSSupportedProtocols),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_SupportedProtocols_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_SupportedProtocols_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_SupportedProtocols_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_SupportedProtocols_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_SupportedProtocols_encode,

  
    LLRP_SupportedProtocols_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdSupportedProtocols[] =
{
  
    &LLRP_fdSupportedProtocols_Protocol,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdSupportedProtocols_Protocol =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Protocol",	// .pName
    LLRP_estProtocolID,	// .pEnumTable
};

LLRP_tSSupportedProtocols *
LLRP_SupportedProtocols_construct (void)
{
    LLRP_tSSupportedProtocols *pNew;

    pNew = (LLRP_tSSupportedProtocols *)
        LLRP_Element_construct(&LLRP_tdSupportedProtocols);

    return pNew;
}

void
LLRP_SupportedProtocols_destruct (
  LLRP_tSSupportedProtocols *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_SupportedProtocols_decodeFields (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eProtocol =
                (LLRP_tEProtocolID) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdSupportedProtocols_Protocol);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdSupportedProtocols_Protocol);
    }

}

void
LLRP_SupportedProtocols_assimilateSubParameters (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdSupportedProtocols))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEProtocolID
LLRP_SupportedProtocols_getProtocol (
  LLRP_tSSupportedProtocols *pThis)
{
    return pThis->eProtocol;
}

LLRP_tResultCode
LLRP_SupportedProtocols_setProtocol (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tEProtocolID eValue)
{
    pThis->eProtocol = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_SupportedProtocols_beginCustom (
  LLRP_tSSupportedProtocols *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_SupportedProtocols_addCustom (
  LLRP_tSSupportedProtocols *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdSupportedProtocols))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_SupportedProtocols_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_SupportedProtocols_encode (
  const LLRP_tSSupportedProtocols *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eProtocol,
        &LLRP_fdSupportedProtocols_Protocol);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_SupportedProtocols_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicReaderModuleTemperature
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicReaderModuleTemperature =
{
    FALSE,	// .bIsMessage
    "ThingMagicReaderModuleTemperature",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    13,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicReaderModuleTemperature,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicReaderModuleTemperature),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicReaderModuleTemperature_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicReaderModuleTemperature_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicReaderModuleTemperature_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicReaderModuleTemperature_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicReaderModuleTemperature_encode,

  
    LLRP_ThingMagicReaderModuleTemperature_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicReaderModuleTemperature[] =
{
  
    &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature =
{
    LLRP_FT_S8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReaderModuleTemperature",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicReaderModuleTemperature *
LLRP_ThingMagicReaderModuleTemperature_construct (void)
{
    LLRP_tSThingMagicReaderModuleTemperature *pNew;

    pNew = (LLRP_tSThingMagicReaderModuleTemperature *)
        LLRP_Element_construct(&LLRP_tdThingMagicReaderModuleTemperature);

    return pNew;
}

void
LLRP_ThingMagicReaderModuleTemperature_destruct (
  LLRP_tSThingMagicReaderModuleTemperature *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicReaderModuleTemperature_decodeFields (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReaderModuleTemperature =
                pOps->pfGet_s8(pDecoderStream,
                        &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature);
    }
    else
    {
        pOps->pfGet_s8(pDecoderStream,
                &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature);
    }
    
}

void
LLRP_ThingMagicReaderModuleTemperature_assimilateSubParameters (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicReaderModuleTemperature))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_s8_t
LLRP_ThingMagicReaderModuleTemperature_getReaderModuleTemperature (
  LLRP_tSThingMagicReaderModuleTemperature *pThis)
{
    return pThis->ReaderModuleTemperature;
}

LLRP_tResultCode
LLRP_ThingMagicReaderModuleTemperature_setReaderModuleTemperature (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  llrp_s8_t Value)
{
    pThis->ReaderModuleTemperature = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicReaderModuleTemperature_beginCustom (
  LLRP_tSThingMagicReaderModuleTemperature *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicReaderModuleTemperature_addCustom (
  LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicReaderModuleTemperature))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicReaderModuleTemperature_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicReaderModuleTemperature_encode (
  const LLRP_tSThingMagicReaderModuleTemperature *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_s8(pEncoderStream,
        pThis->ReaderModuleTemperature,
        &LLRP_fdThingMagicReaderModuleTemperature_ReaderModuleTemperature);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicReaderModuleTemperature_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2Q
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2Q =
{
    FALSE,	// .bIsMessage
    "Gen2Q",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    14,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdGen2Q,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSGen2Q),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_Gen2Q_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_Gen2Q_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2Q_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2Q_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2Q_encode,

  
    LLRP_Gen2Q_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2Q[] =
{
  
    &LLRP_fdGen2Q_Gen2QType,
    &LLRP_fdGen2Q_InitQValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdGen2Q_Gen2QType =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Gen2QType",	// .pName
    LLRP_estQType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdGen2Q_InitQValue =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "InitQValue",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSGen2Q *
LLRP_Gen2Q_construct (void)
{
    LLRP_tSGen2Q *pNew;

    pNew = (LLRP_tSGen2Q *)
        LLRP_Element_construct(&LLRP_tdGen2Q);

    return pNew;
}

void
LLRP_Gen2Q_destruct (
  LLRP_tSGen2Q *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2Q_decodeFields (
  LLRP_tSGen2Q *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eGen2QType =
                (LLRP_tEQType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdGen2Q_Gen2QType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdGen2Q_Gen2QType);
    }

    if(NULL != pThis)
    {
        pThis->InitQValue =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdGen2Q_InitQValue);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdGen2Q_InitQValue);
    }
    
}

void
LLRP_Gen2Q_assimilateSubParameters (
  LLRP_tSGen2Q *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2Q))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEQType
LLRP_Gen2Q_getGen2QType (
  LLRP_tSGen2Q *pThis)
{
    return pThis->eGen2QType;
}

LLRP_tResultCode
LLRP_Gen2Q_setGen2QType (
  LLRP_tSGen2Q *pThis,
  LLRP_tEQType eValue)
{
    pThis->eGen2QType = eValue;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_Gen2Q_getInitQValue (
  LLRP_tSGen2Q *pThis)
{
    return pThis->InitQValue;
}

LLRP_tResultCode
LLRP_Gen2Q_setInitQValue (
  LLRP_tSGen2Q *pThis,
  llrp_u8_t Value)
{
    pThis->InitQValue = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2Q_beginCustom (
  LLRP_tSGen2Q *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2Q_addCustom (
  LLRP_tSGen2Q *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2Q))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2Q_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2Q_encode (
  const LLRP_tSGen2Q *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eGen2QType,
        &LLRP_fdGen2Q_Gen2QType);

    pOps->pfPut_u8(pEncoderStream,
        pThis->InitQValue,
        &LLRP_fdGen2Q_InitQValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2Q_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter InitQ
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdInitQ =
{
    FALSE,	// .bIsMessage
    "InitQ",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    177,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdInitQ,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSInitQ),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_InitQ_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_InitQ_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_InitQ_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_InitQ_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_InitQ_encode,

  
    LLRP_InitQ_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdInitQ[] =
{
  
    &LLRP_fdInitQ_qEnable,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdInitQ_qEnable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "qEnable",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSInitQ *
LLRP_InitQ_construct (void)
{
    LLRP_tSInitQ *pNew;

    pNew = (LLRP_tSInitQ *)
        LLRP_Element_construct(&LLRP_tdInitQ);

    return pNew;
}

void
LLRP_InitQ_destruct (
  LLRP_tSInitQ *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_InitQ_decodeFields (
  LLRP_tSInitQ *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->qEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdInitQ_qEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdInitQ_qEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_InitQ_assimilateSubParameters (
  LLRP_tSInitQ *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of qValue
    pType = &LLRP_tdqValue;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pqValue = (LLRP_tSqValue *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdInitQ))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_InitQ_getqEnable (
  LLRP_tSInitQ *pThis)
{
    return pThis->qEnable;
}

LLRP_tResultCode
LLRP_InitQ_setqEnable (
  LLRP_tSInitQ *pThis,
  llrp_u1_t Value)
{
    pThis->qEnable = Value;
    return LLRP_RC_OK;
}


LLRP_tSqValue *
LLRP_InitQ_getqValue (
  LLRP_tSInitQ *pThis)
{
    return pThis->pqValue;
}

LLRP_tResultCode
LLRP_InitQ_setqValue (
  LLRP_tSInitQ *pThis,
  LLRP_tSqValue * pValue)
{
    SUBPARAM_SET(pqValue, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_InitQ_beginCustom (
  LLRP_tSInitQ *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_InitQ_addCustom (
  LLRP_tSInitQ *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdInitQ))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_InitQ_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_InitQ_encode (
  const LLRP_tSInitQ *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->qEnable,
        &LLRP_fdInitQ_qEnable);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdqValue;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pqValue,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_InitQ_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter qValue
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdqValue =
{
    FALSE,	// .bIsMessage
    "qValue",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    180,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdqValue,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSqValue),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_qValue_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_qValue_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_qValue_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_qValue_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_qValue_encode,

  
    LLRP_qValue_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdqValue[] =
{
  
    &LLRP_fdqValue_value,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdqValue_value =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "value",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSqValue *
LLRP_qValue_construct (void)
{
    LLRP_tSqValue *pNew;

    pNew = (LLRP_tSqValue *)
        LLRP_Element_construct(&LLRP_tdqValue);

    return pNew;
}

void
LLRP_qValue_destruct (
  LLRP_tSqValue *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_qValue_decodeFields (
  LLRP_tSqValue *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->value =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdqValue_value);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdqValue_value);
    }
    
}

void
LLRP_qValue_assimilateSubParameters (
  LLRP_tSqValue *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdqValue))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_qValue_getvalue (
  LLRP_tSqValue *pThis)
{
    return pThis->value;
}

LLRP_tResultCode
LLRP_qValue_setvalue (
  LLRP_tSqValue *pThis,
  llrp_u8_t Value)
{
    pThis->value = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_qValue_beginCustom (
  LLRP_tSqValue *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_qValue_addCustom (
  LLRP_tSqValue *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdqValue))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_qValue_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_qValue_encode (
  const LLRP_tSqValue *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->value,
        &LLRP_fdqValue_value);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_qValue_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdInitQ)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter sendSelect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdsendSelect =
{
    FALSE,	// .bIsMessage
    "sendSelect",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    178,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdsendSelect,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSsendSelect),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_sendSelect_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_sendSelect_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_sendSelect_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_sendSelect_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_sendSelect_encode,

  
    LLRP_sendSelect_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdsendSelect[] =
{
  
    &LLRP_fdsendSelect_selectValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdsendSelect_selectValue =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "selectValue",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSsendSelect *
LLRP_sendSelect_construct (void)
{
    LLRP_tSsendSelect *pNew;

    pNew = (LLRP_tSsendSelect *)
        LLRP_Element_construct(&LLRP_tdsendSelect);

    return pNew;
}

void
LLRP_sendSelect_destruct (
  LLRP_tSsendSelect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_sendSelect_decodeFields (
  LLRP_tSsendSelect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->selectValue =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdsendSelect_selectValue);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdsendSelect_selectValue);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_sendSelect_assimilateSubParameters (
  LLRP_tSsendSelect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdsendSelect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_sendSelect_getselectValue (
  LLRP_tSsendSelect *pThis)
{
    return pThis->selectValue;
}

LLRP_tResultCode
LLRP_sendSelect_setselectValue (
  LLRP_tSsendSelect *pThis,
  llrp_u1_t Value)
{
    pThis->selectValue = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_sendSelect_beginCustom (
  LLRP_tSsendSelect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_sendSelect_addCustom (
  LLRP_tSsendSelect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdsendSelect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_sendSelect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_sendSelect_encode (
  const LLRP_tSsendSelect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->selectValue,
        &LLRP_fdsendSelect_selectValue);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_sendSelect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAntennaDetection
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAntennaDetection =
{
    FALSE,	// .bIsMessage
    "ThingMagicAntennaDetection",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    15,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicAntennaDetection,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicAntennaDetection),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAntennaDetection_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAntennaDetection_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAntennaDetection_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAntennaDetection_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAntennaDetection_encode,

  
    LLRP_ThingMagicAntennaDetection_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAntennaDetection[] =
{
  
    &LLRP_fdThingMagicAntennaDetection_AntennaDetection,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicAntennaDetection_AntennaDetection =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AntennaDetection",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicAntennaDetection *
LLRP_ThingMagicAntennaDetection_construct (void)
{
    LLRP_tSThingMagicAntennaDetection *pNew;

    pNew = (LLRP_tSThingMagicAntennaDetection *)
        LLRP_Element_construct(&LLRP_tdThingMagicAntennaDetection);

    return pNew;
}

void
LLRP_ThingMagicAntennaDetection_destruct (
  LLRP_tSThingMagicAntennaDetection *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAntennaDetection_decodeFields (
  LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AntennaDetection =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicAntennaDetection_AntennaDetection);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicAntennaDetection_AntennaDetection);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicAntennaDetection_assimilateSubParameters (
  LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAntennaDetection))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicAntennaDetection_getAntennaDetection (
  LLRP_tSThingMagicAntennaDetection *pThis)
{
    return pThis->AntennaDetection;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaDetection_setAntennaDetection (
  LLRP_tSThingMagicAntennaDetection *pThis,
  llrp_u1_t Value)
{
    pThis->AntennaDetection = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicAntennaDetection_beginCustom (
  LLRP_tSThingMagicAntennaDetection *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaDetection_addCustom (
  LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAntennaDetection))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAntennaDetection_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAntennaDetection_encode (
  const LLRP_tSThingMagicAntennaDetection *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->AntennaDetection,
        &LLRP_fdThingMagicAntennaDetection_AntennaDetection);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAntennaDetection_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter WriteTransmitPower
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdWriteTransmitPower =
{
    FALSE,	// .bIsMessage
    "WriteTransmitPower",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    16,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdWriteTransmitPower,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSWriteTransmitPower),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_WriteTransmitPower_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_WriteTransmitPower_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_WriteTransmitPower_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_WriteTransmitPower_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_WriteTransmitPower_encode,

  
    LLRP_WriteTransmitPower_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdWriteTransmitPower[] =
{
  
    &LLRP_fdWriteTransmitPower_WriteTransmitPower,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdWriteTransmitPower_WriteTransmitPower =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "WriteTransmitPower",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSWriteTransmitPower *
LLRP_WriteTransmitPower_construct (void)
{
    LLRP_tSWriteTransmitPower *pNew;

    pNew = (LLRP_tSWriteTransmitPower *)
        LLRP_Element_construct(&LLRP_tdWriteTransmitPower);

    return pNew;
}

void
LLRP_WriteTransmitPower_destruct (
  LLRP_tSWriteTransmitPower *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_WriteTransmitPower_decodeFields (
  LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->WriteTransmitPower =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdWriteTransmitPower_WriteTransmitPower);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdWriteTransmitPower_WriteTransmitPower);
    }
    
}

void
LLRP_WriteTransmitPower_assimilateSubParameters (
  LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdWriteTransmitPower))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_WriteTransmitPower_getWriteTransmitPower (
  LLRP_tSWriteTransmitPower *pThis)
{
    return pThis->WriteTransmitPower;
}

LLRP_tResultCode
LLRP_WriteTransmitPower_setWriteTransmitPower (
  LLRP_tSWriteTransmitPower *pThis,
  llrp_u16_t Value)
{
    pThis->WriteTransmitPower = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_WriteTransmitPower_beginCustom (
  LLRP_tSWriteTransmitPower *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_WriteTransmitPower_addCustom (
  LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdWriteTransmitPower))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_WriteTransmitPower_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_WriteTransmitPower_encode (
  const LLRP_tSWriteTransmitPower *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->WriteTransmitPower,
        &LLRP_fdWriteTransmitPower_WriteTransmitPower);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_WriteTransmitPower_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ReadPointDescription
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdReadPointDescription =
{
    FALSE,	// .bIsMessage
    "ReadPointDescription",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    17,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdReadPointDescription,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSReadPointDescription),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ReadPointDescription_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ReadPointDescription_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ReadPointDescription_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ReadPointDescription_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ReadPointDescription_encode,

  
    LLRP_ReadPointDescription_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdReadPointDescription[] =
{
  
    &LLRP_fdReadPointDescription_ReadPointDescription,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdReadPointDescription_ReadPointDescription =
{
    LLRP_FT_UTF8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadPointDescription",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSReadPointDescription *
LLRP_ReadPointDescription_construct (void)
{
    LLRP_tSReadPointDescription *pNew;

    pNew = (LLRP_tSReadPointDescription *)
        LLRP_Element_construct(&LLRP_tdReadPointDescription);

    return pNew;
}

void
LLRP_ReadPointDescription_destruct (
  LLRP_tSReadPointDescription *pThis)
{
  
    LLRP_utf8v_clear(&pThis->ReadPointDescription);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ReadPointDescription_decodeFields (
  LLRP_tSReadPointDescription *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReadPointDescription =
                pOps->pfGet_utf8v(pDecoderStream,
                        &LLRP_fdReadPointDescription_ReadPointDescription);
    }
    else
    {
        pOps->pfGet_utf8v(pDecoderStream,
                &LLRP_fdReadPointDescription_ReadPointDescription);
    }
    
}

void
LLRP_ReadPointDescription_assimilateSubParameters (
  LLRP_tSReadPointDescription *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdReadPointDescription))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_utf8v_t
LLRP_ReadPointDescription_getReadPointDescription (
  LLRP_tSReadPointDescription *pThis)
{
    return pThis->ReadPointDescription;
}

LLRP_tResultCode
LLRP_ReadPointDescription_setReadPointDescription (
  LLRP_tSReadPointDescription *pThis,
  llrp_utf8v_t Value)
{
    LLRP_utf8v_clear(&pThis->ReadPointDescription);

    pThis->ReadPointDescription = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ReadPointDescription_beginCustom (
  LLRP_tSReadPointDescription *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ReadPointDescription_addCustom (
  LLRP_tSReadPointDescription *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdReadPointDescription))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ReadPointDescription_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ReadPointDescription_encode (
  const LLRP_tSReadPointDescription *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_utf8v(pEncoderStream,
        pThis->ReadPointDescription,
        &LLRP_fdReadPointDescription_ReadPointDescription);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ReadPointDescription_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter AntennaMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdAntennaMode =
{
    FALSE,	// .bIsMessage
    "AntennaMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    18,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdAntennaMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSAntennaMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_AntennaMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_AntennaMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_AntennaMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_AntennaMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_AntennaMode_encode,

  
    LLRP_AntennaMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdAntennaMode[] =
{
  
    &LLRP_fdAntennaMode_AntennaMode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdAntennaMode_AntennaMode =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AntennaMode",	// .pName
    LLRP_estThingMagicAntennaMode,	// .pEnumTable
};

LLRP_tSAntennaMode *
LLRP_AntennaMode_construct (void)
{
    LLRP_tSAntennaMode *pNew;

    pNew = (LLRP_tSAntennaMode *)
        LLRP_Element_construct(&LLRP_tdAntennaMode);

    return pNew;
}

void
LLRP_AntennaMode_destruct (
  LLRP_tSAntennaMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_AntennaMode_decodeFields (
  LLRP_tSAntennaMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eAntennaMode =
                (LLRP_tEThingMagicAntennaMode) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdAntennaMode_AntennaMode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdAntennaMode_AntennaMode);
    }

}

void
LLRP_AntennaMode_assimilateSubParameters (
  LLRP_tSAntennaMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdAntennaMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicAntennaMode
LLRP_AntennaMode_getAntennaMode (
  LLRP_tSAntennaMode *pThis)
{
    return pThis->eAntennaMode;
}

LLRP_tResultCode
LLRP_AntennaMode_setAntennaMode (
  LLRP_tSAntennaMode *pThis,
  LLRP_tEThingMagicAntennaMode eValue)
{
    pThis->eAntennaMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_AntennaMode_beginCustom (
  LLRP_tSAntennaMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_AntennaMode_addCustom (
  LLRP_tSAntennaMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdAntennaMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_AntennaMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_AntennaMode_encode (
  const LLRP_tSAntennaMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eAntennaMode,
        &LLRP_fdAntennaMode_AntennaMode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_AntennaMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicTargetStrategy
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicTargetStrategy =
{
    FALSE,	// .bIsMessage
    "ThingMagicTargetStrategy",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    19,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicTargetStrategy,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicTargetStrategy),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicTargetStrategy_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicTargetStrategy_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicTargetStrategy_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicTargetStrategy_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicTargetStrategy_encode,

  
    LLRP_ThingMagicTargetStrategy_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicTargetStrategy[] =
{
  
    &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ThingMagicTargetStrategyValue",	// .pName
    LLRP_estThingMagicC1G2TargetStrategy,	// .pEnumTable
};

LLRP_tSThingMagicTargetStrategy *
LLRP_ThingMagicTargetStrategy_construct (void)
{
    LLRP_tSThingMagicTargetStrategy *pNew;

    pNew = (LLRP_tSThingMagicTargetStrategy *)
        LLRP_Element_construct(&LLRP_tdThingMagicTargetStrategy);

    return pNew;
}

void
LLRP_ThingMagicTargetStrategy_destruct (
  LLRP_tSThingMagicTargetStrategy *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicTargetStrategy_decodeFields (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eThingMagicTargetStrategyValue =
                (LLRP_tEThingMagicC1G2TargetStrategy) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue);
    }

}

void
LLRP_ThingMagicTargetStrategy_assimilateSubParameters (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicTargetStrategy))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicC1G2TargetStrategy
LLRP_ThingMagicTargetStrategy_getThingMagicTargetStrategyValue (
  LLRP_tSThingMagicTargetStrategy *pThis)
{
    return pThis->eThingMagicTargetStrategyValue;
}

LLRP_tResultCode
LLRP_ThingMagicTargetStrategy_setThingMagicTargetStrategyValue (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tEThingMagicC1G2TargetStrategy eValue)
{
    pThis->eThingMagicTargetStrategyValue = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicTargetStrategy_beginCustom (
  LLRP_tSThingMagicTargetStrategy *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicTargetStrategy_addCustom (
  LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicTargetStrategy))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicTargetStrategy_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicTargetStrategy_encode (
  const LLRP_tSThingMagicTargetStrategy *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eThingMagicTargetStrategyValue,
        &LLRP_fdThingMagicTargetStrategy_ThingMagicTargetStrategyValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicTargetStrategy_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGen2CustomParameters)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdC1G2InventoryCommand)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2T4Param
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2T4Param =
{
    FALSE,	// .bIsMessage
    "Gen2T4Param",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    162,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdGen2T4Param,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSGen2T4Param),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_Gen2T4Param_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_Gen2T4Param_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2T4Param_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2T4Param_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2T4Param_encode,

  
    LLRP_Gen2T4Param_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2T4Param[] =
{
  
    &LLRP_fdGen2T4Param_T4ParamValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdGen2T4Param_T4ParamValue =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "T4ParamValue",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSGen2T4Param *
LLRP_Gen2T4Param_construct (void)
{
    LLRP_tSGen2T4Param *pNew;

    pNew = (LLRP_tSGen2T4Param *)
        LLRP_Element_construct(&LLRP_tdGen2T4Param);

    return pNew;
}

void
LLRP_Gen2T4Param_destruct (
  LLRP_tSGen2T4Param *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2T4Param_decodeFields (
  LLRP_tSGen2T4Param *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->T4ParamValue =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdGen2T4Param_T4ParamValue);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdGen2T4Param_T4ParamValue);
    }
    
}

void
LLRP_Gen2T4Param_assimilateSubParameters (
  LLRP_tSGen2T4Param *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2T4Param))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_Gen2T4Param_getT4ParamValue (
  LLRP_tSGen2T4Param *pThis)
{
    return pThis->T4ParamValue;
}

LLRP_tResultCode
LLRP_Gen2T4Param_setT4ParamValue (
  LLRP_tSGen2T4Param *pThis,
  llrp_u32_t Value)
{
    pThis->T4ParamValue = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2T4Param_beginCustom (
  LLRP_tSGen2T4Param *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2T4Param_addCustom (
  LLRP_tSGen2T4Param *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2T4Param))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2T4Param_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2T4Param_encode (
  const LLRP_tSGen2T4Param *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->T4ParamValue,
        &LLRP_fdGen2T4Param_T4ParamValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2T4Param_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicLicenseKey
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicLicenseKey =
{
    FALSE,	// .bIsMessage
    "ThingMagicLicenseKey",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    20,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicLicenseKey,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicLicenseKey),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicLicenseKey_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicLicenseKey_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicLicenseKey_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicLicenseKey_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicLicenseKey_encode,

  
    LLRP_ThingMagicLicenseKey_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicLicenseKey[] =
{
  
    &LLRP_fdThingMagicLicenseKey_LicenseKey,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicLicenseKey_LicenseKey =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LicenseKey",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicLicenseKey *
LLRP_ThingMagicLicenseKey_construct (void)
{
    LLRP_tSThingMagicLicenseKey *pNew;

    pNew = (LLRP_tSThingMagicLicenseKey *)
        LLRP_Element_construct(&LLRP_tdThingMagicLicenseKey);

    return pNew;
}

void
LLRP_ThingMagicLicenseKey_destruct (
  LLRP_tSThingMagicLicenseKey *pThis)
{
  
    LLRP_u8v_clear(&pThis->LicenseKey);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicLicenseKey_decodeFields (
  LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->LicenseKey =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicLicenseKey_LicenseKey);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicLicenseKey_LicenseKey);
    }
    
}

void
LLRP_ThingMagicLicenseKey_assimilateSubParameters (
  LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicLicenseKey))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicLicenseKey_getLicenseKey (
  LLRP_tSThingMagicLicenseKey *pThis)
{
    return pThis->LicenseKey;
}

LLRP_tResultCode
LLRP_ThingMagicLicenseKey_setLicenseKey (
  LLRP_tSThingMagicLicenseKey *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->LicenseKey);

    pThis->LicenseKey = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicLicenseKey_beginCustom (
  LLRP_tSThingMagicLicenseKey *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicLicenseKey_addCustom (
  LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicLicenseKey))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicLicenseKey_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicLicenseKey_encode (
  const LLRP_tSThingMagicLicenseKey *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->LicenseKey,
        &LLRP_fdThingMagicLicenseKey_LicenseKey);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicLicenseKey_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicBlockPermalock
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicBlockPermalock =
{
    FALSE,	// .bIsMessage
    "ThingMagicBlockPermalock",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    21,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicBlockPermalock,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicBlockPermalock),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicBlockPermalock_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicBlockPermalock_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicBlockPermalock_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicBlockPermalock_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicBlockPermalock_encode,

  
    LLRP_ThingMagicBlockPermalock_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicBlockPermalock[] =
{
  
    &LLRP_fdThingMagicBlockPermalock_OpSpecID,
    &LLRP_fdThingMagicBlockPermalock_AccessPassword,
    &LLRP_fdThingMagicBlockPermalock_ReadLock,
    &LLRP_fdThingMagicBlockPermalock_MB,
    &LLRP_fdThingMagicBlockPermalock_BlockPointer,
    &LLRP_fdThingMagicBlockPermalock_BlockMask,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_ReadLock =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadLock",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_MB =
{
    LLRP_FT_U2,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "MB",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_BlockPointer =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "BlockPointer",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalock_BlockMask =
{
    LLRP_FT_U16V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "BlockMask",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicBlockPermalock *
LLRP_ThingMagicBlockPermalock_construct (void)
{
    LLRP_tSThingMagicBlockPermalock *pNew;

    pNew = (LLRP_tSThingMagicBlockPermalock *)
        LLRP_Element_construct(&LLRP_tdThingMagicBlockPermalock);

    return pNew;
}

void
LLRP_ThingMagicBlockPermalock_destruct (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
  
    LLRP_u16v_clear(&pThis->BlockMask);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicBlockPermalock_decodeFields (
  LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadLock =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_ReadLock);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_ReadLock);
    }
    
    if(NULL != pThis)
    {
        pThis->MB =
                pOps->pfGet_u2(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_MB);
    }
    else
    {
        pOps->pfGet_u2(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_MB);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

    if(NULL != pThis)
    {
        pThis->BlockPointer =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_BlockPointer);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_BlockPointer);
    }
    
    if(NULL != pThis)
    {
        pThis->BlockMask =
                pOps->pfGet_u16v(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalock_BlockMask);
    }
    else
    {
        pOps->pfGet_u16v(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalock_BlockMask);
    }
    
}

void
LLRP_ThingMagicBlockPermalock_assimilateSubParameters (
  LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicBlockPermalock))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicBlockPermalock_getOpSpecID (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setOpSpecID (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicBlockPermalock_getAccessPassword (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setAccessPassword (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicBlockPermalock_getReadLock (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->ReadLock;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setReadLock (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u8_t Value)
{
    pThis->ReadLock = Value;
    return LLRP_RC_OK;
}


llrp_u2_t
LLRP_ThingMagicBlockPermalock_getMB (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->MB;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setMB (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u2_t Value)
{
    pThis->MB = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicBlockPermalock_getBlockPointer (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->BlockPointer;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setBlockPointer (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u32_t Value)
{
    pThis->BlockPointer = Value;
    return LLRP_RC_OK;
}


llrp_u16v_t
LLRP_ThingMagicBlockPermalock_getBlockMask (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->BlockMask;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_setBlockMask (
  LLRP_tSThingMagicBlockPermalock *pThis,
  llrp_u16v_t Value)
{
    LLRP_u16v_clear(&pThis->BlockMask);

    pThis->BlockMask = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicBlockPermalock_beginCustom (
  LLRP_tSThingMagicBlockPermalock *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalock_addCustom (
  LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicBlockPermalock))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicBlockPermalock_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicBlockPermalock_encode (
  const LLRP_tSThingMagicBlockPermalock *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicBlockPermalock_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicBlockPermalock_AccessPassword);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ReadLock,
        &LLRP_fdThingMagicBlockPermalock_ReadLock);

    pOps->pfPut_u2(pEncoderStream,
        pThis->MB,
        &LLRP_fdThingMagicBlockPermalock_MB);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pOps->pfPut_u32(pEncoderStream,
        pThis->BlockPointer,
        &LLRP_fdThingMagicBlockPermalock_BlockPointer);

    pOps->pfPut_u16v(pEncoderStream,
        pThis->BlockMask,
        &LLRP_fdThingMagicBlockPermalock_BlockMask);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicBlockPermalock_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicBlockPermalockOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicBlockPermalockOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicBlockPermalockOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    22,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicBlockPermalockOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicBlockPermalockOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicBlockPermalockOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicBlockPermalockOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicBlockPermalockOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicBlockPermalockOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicBlockPermalockOpSpecResult_encode,

  
    LLRP_ThingMagicBlockPermalockOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicBlockPermalockOpSpecResult[] =
{
  
    &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result,
    &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalockOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus =
{
    LLRP_FT_U16V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "PermalockStatus",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicBlockPermalockOpSpecResult *
LLRP_ThingMagicBlockPermalockOpSpecResult_construct (void)
{
    LLRP_tSThingMagicBlockPermalockOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicBlockPermalockOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicBlockPermalockOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicBlockPermalockOpSpecResult_destruct (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
  
    LLRP_u16v_clear(&pThis->PermalockStatus);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicBlockPermalockOpSpecResult_decodeFields (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->PermalockStatus =
                pOps->pfGet_u16v(pDecoderStream,
                        &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus);
    }
    else
    {
        pOps->pfGet_u16v(pDecoderStream,
                &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus);
    }
    
}

void
LLRP_ThingMagicBlockPermalockOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicBlockPermalockOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicBlockPermalockOpSpecResult_getResult (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_setResult (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicBlockPermalockOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16v_t
LLRP_ThingMagicBlockPermalockOpSpecResult_getPermalockStatus (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->PermalockStatus;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_setPermalockStatus (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  llrp_u16v_t Value)
{
    LLRP_u16v_clear(&pThis->PermalockStatus);

    pThis->PermalockStatus = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicBlockPermalockOpSpecResult_beginCustom (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicBlockPermalockOpSpecResult_addCustom (
  LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicBlockPermalockOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicBlockPermalockOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicBlockPermalockOpSpecResult_encode (
  const LLRP_tSThingMagicBlockPermalockOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicBlockPermalockOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicBlockPermalockOpSpecResult_OpSpecID);

    pOps->pfPut_u16v(pEncoderStream,
        pThis->PermalockStatus,
        &LLRP_fdThingMagicBlockPermalockOpSpecResult_PermalockStatus);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicBlockPermalockOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2PartialLoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2PartialLoadImage =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs2PartialLoadImage",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    23,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs2PartialLoadImage,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs2PartialLoadImage),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2PartialLoadImage_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2PartialLoadImage_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImage_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2PartialLoadImage_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImage_encode,

  
    LLRP_ThingMagicHiggs2PartialLoadImage_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2PartialLoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CurrentAccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "KillPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "EPCData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs2PartialLoadImage *
LLRP_ThingMagicHiggs2PartialLoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs2PartialLoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs2PartialLoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2PartialLoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs2PartialLoadImage_destruct (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2PartialLoadImage_decodeFields (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData);
    }
    
}

void
LLRP_ThingMagicHiggs2PartialLoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2PartialLoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs2PartialLoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2PartialLoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2PartialLoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2PartialLoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs2PartialLoadImage_getEPCData (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->EPCData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_setEPCData (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCData);

    pThis->EPCData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImage_beginCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImage_addCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2PartialLoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2PartialLoadImage_encode (
  const LLRP_tSThingMagicHiggs2PartialLoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_AccessPassword);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCData,
        &LLRP_fdThingMagicHiggs2PartialLoadImage_EPCData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2PartialLoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2PartialLoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs2PartialLoadImageOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    24,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs2PartialLoadImageOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_encode,

  
    LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2PartialLoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs2PartialLoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2PartialLoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2PartialLoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2FullLoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2FullLoadImage =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs2FullLoadImage",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    25,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs2FullLoadImage,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs2FullLoadImage),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2FullLoadImage_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2FullLoadImage_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImage_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2FullLoadImage_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImage_encode,

  
    LLRP_ThingMagicHiggs2FullLoadImage_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2FullLoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits,
    &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord,
    &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CurrentAccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "KillPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_LockBits =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LockBits",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_PCWord =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PCWord",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImage_EPCData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "EPCData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs2FullLoadImage *
LLRP_ThingMagicHiggs2FullLoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs2FullLoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs2FullLoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2FullLoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs2FullLoadImage_destruct (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2FullLoadImage_decodeFields (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->LockBits =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits);
    }
    
    if(NULL != pThis)
    {
        pThis->PCWord =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData);
    }
    
}

void
LLRP_ThingMagicHiggs2FullLoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2FullLoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2FullLoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2FullLoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs2FullLoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImage_getLockBits (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->LockBits;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setLockBits (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->LockBits = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImage_getPCWord (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->PCWord;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setPCWord (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->PCWord = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs2FullLoadImage_getEPCData (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->EPCData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_setEPCData (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCData);

    pThis->EPCData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImage_beginCustom (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImage_addCustom (
  LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2FullLoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2FullLoadImage_encode (
  const LLRP_tSThingMagicHiggs2FullLoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2FullLoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs2FullLoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs2FullLoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs2FullLoadImage_AccessPassword);

    pOps->pfPut_u16(pEncoderStream,
        pThis->LockBits,
        &LLRP_fdThingMagicHiggs2FullLoadImage_LockBits);

    pOps->pfPut_u16(pEncoderStream,
        pThis->PCWord,
        &LLRP_fdThingMagicHiggs2FullLoadImage_PCWord);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCData,
        &LLRP_fdThingMagicHiggs2FullLoadImage_EPCData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2FullLoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs2FullLoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs2FullLoadImageOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    26,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs2FullLoadImageOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_encode,

  
    LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs2FullLoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs2FullLoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs2FullLoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs2FullLoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3FastLoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3FastLoadImage =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs3FastLoadImage",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    27,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs3FastLoadImage,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs3FastLoadImage),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3FastLoadImage_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3FastLoadImage_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImage_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3FastLoadImage_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImage_encode,

  
    LLRP_ThingMagicHiggs3FastLoadImage_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3FastLoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord,
    &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CurrentAccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "KillPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_PCWord =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PCWord",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImage_EPCData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "EPCData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs3FastLoadImage *
LLRP_ThingMagicHiggs3FastLoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs3FastLoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs3FastLoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3FastLoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs3FastLoadImage_destruct (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3FastLoadImage_decodeFields (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->PCWord =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData);
    }
    
}

void
LLRP_ThingMagicHiggs3FastLoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3FastLoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs3FastLoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3FastLoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3FastLoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3FastLoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3FastLoadImage_getPCWord (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->PCWord;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setPCWord (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->PCWord = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs3FastLoadImage_getEPCData (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->EPCData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_setEPCData (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCData);

    pThis->EPCData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImage_beginCustom (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImage_addCustom (
  LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3FastLoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3FastLoadImage_encode (
  const LLRP_tSThingMagicHiggs3FastLoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3FastLoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs3FastLoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs3FastLoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs3FastLoadImage_AccessPassword);

    pOps->pfPut_u16(pEncoderStream,
        pThis->PCWord,
        &LLRP_fdThingMagicHiggs3FastLoadImage_PCWord);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCData,
        &LLRP_fdThingMagicHiggs3FastLoadImage_EPCData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3FastLoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3FastLoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs3FastLoadImageOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    28,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs3FastLoadImageOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_encode,

  
    LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3FastLoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs3FastLoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3FastLoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3FastLoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3LoadImage
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3LoadImage =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs3LoadImage",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    29,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs3LoadImage,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs3LoadImage),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3LoadImage_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3LoadImage_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3LoadImage_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3LoadImage_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3LoadImage_encode,

  
    LLRP_ThingMagicHiggs3LoadImage_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3LoadImage[] =
{
  
    &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID,
    &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword,
    &LLRP_fdThingMagicHiggs3LoadImage_KillPassword,
    &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword,
    &LLRP_fdThingMagicHiggs3LoadImage_PCWord,
    &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CurrentAccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_KillPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "KillPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_PCWord =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PCWord",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "EPCAndUserData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs3LoadImage *
LLRP_ThingMagicHiggs3LoadImage_construct (void)
{
    LLRP_tSThingMagicHiggs3LoadImage *pNew;

    pNew = (LLRP_tSThingMagicHiggs3LoadImage *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3LoadImage);

    return pNew;
}

void
LLRP_ThingMagicHiggs3LoadImage_destruct (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
  
    LLRP_u8v_clear(&pThis->EPCAndUserData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3LoadImage_decodeFields (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CurrentAccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->KillPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_KillPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_KillPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->PCWord =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_PCWord);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_PCWord);
    }
    
    if(NULL != pThis)
    {
        pThis->EPCAndUserData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData);
    }
    
}

void
LLRP_ThingMagicHiggs3LoadImage_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3LoadImage))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs3LoadImage_getOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3LoadImage_getCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->CurrentAccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setCurrentAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->CurrentAccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3LoadImage_getKillPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->KillPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setKillPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->KillPassword = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3LoadImage_getAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setAccessPassword (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3LoadImage_getPCWord (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->PCWord;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setPCWord (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u16_t Value)
{
    pThis->PCWord = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicHiggs3LoadImage_getEPCAndUserData (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->EPCAndUserData;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_setEPCAndUserData (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EPCAndUserData);

    pThis->EPCAndUserData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImage_beginCustom (
  LLRP_tSThingMagicHiggs3LoadImage *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImage_addCustom (
  LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3LoadImage))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImage_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3LoadImage_encode (
  const LLRP_tSThingMagicHiggs3LoadImage *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3LoadImage_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->CurrentAccessPassword,
        &LLRP_fdThingMagicHiggs3LoadImage_CurrentAccessPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->KillPassword,
        &LLRP_fdThingMagicHiggs3LoadImage_KillPassword);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs3LoadImage_AccessPassword);

    pOps->pfPut_u16(pEncoderStream,
        pThis->PCWord,
        &LLRP_fdThingMagicHiggs3LoadImage_PCWord);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EPCAndUserData,
        &LLRP_fdThingMagicHiggs3LoadImage_EPCAndUserData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3LoadImage_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3LoadImageOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3LoadImageOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs3LoadImageOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    30,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs3LoadImageOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs3LoadImageOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3LoadImageOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3LoadImageOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3LoadImageOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3LoadImageOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3LoadImageOpSpecResult_encode,

  
    LLRP_ThingMagicHiggs3LoadImageOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3LoadImageOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3LoadImageOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3LoadImageOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3LoadImageOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs3LoadImageOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3LoadImageOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3LoadImageOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3BlockReadLock
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3BlockReadLock =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs3BlockReadLock",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    31,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs3BlockReadLock,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs3BlockReadLock),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3BlockReadLock_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3BlockReadLock_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLock_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3BlockReadLock_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLock_encode,

  
    LLRP_ThingMagicHiggs3BlockReadLock_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3BlockReadLock[] =
{
  
    &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID,
    &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword,
    &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLock_LockBits =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LockBits",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs3BlockReadLock *
LLRP_ThingMagicHiggs3BlockReadLock_construct (void)
{
    LLRP_tSThingMagicHiggs3BlockReadLock *pNew;

    pNew = (LLRP_tSThingMagicHiggs3BlockReadLock *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3BlockReadLock);

    return pNew;
}

void
LLRP_ThingMagicHiggs3BlockReadLock_destruct (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3BlockReadLock_decodeFields (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->LockBits =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits);
    }
    
}

void
LLRP_ThingMagicHiggs3BlockReadLock_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3BlockReadLock))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicHiggs3BlockReadLock_getOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_setOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicHiggs3BlockReadLock_getAccessPassword (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_setAccessPassword (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicHiggs3BlockReadLock_getLockBits (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->LockBits;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_setLockBits (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  llrp_u8_t Value)
{
    pThis->LockBits = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLock_beginCustom (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLock_addCustom (
  LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3BlockReadLock))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLock_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3BlockReadLock_encode (
  const LLRP_tSThingMagicHiggs3BlockReadLock *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3BlockReadLock_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicHiggs3BlockReadLock_AccessPassword);

    pOps->pfPut_u8(pEncoderStream,
        pThis->LockBits,
        &LLRP_fdThingMagicHiggs3BlockReadLock_LockBits);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3BlockReadLock_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHiggs3BlockReadLockOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicHiggs3BlockReadLockOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    32,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHiggs3BlockReadLockOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_encode,

  
    LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHiggs3BlockReadLockOpSpecResult[] =
{
  
    &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result,
    &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_construct (void)
{
    LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_destruct (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_decodeFields (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_getResult (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_setResult (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_beginCustom (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_addCustom (
  LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_encode (
  const LLRP_tSThingMagicHiggs3BlockReadLockOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicHiggs3BlockReadLockOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHiggs3BlockReadLockOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ISetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ISetReadProtect =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2ISetReadProtect",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    33,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2ISetReadProtect,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2ISetReadProtect),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ISetReadProtect_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ISetReadProtect_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtect_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ISetReadProtect_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtect_encode,

  
    LLRP_ThingMagicNXPG2ISetReadProtect_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ISetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2ISetReadProtect *
LLRP_ThingMagicNXPG2ISetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2ISetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ISetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ISetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ISetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ISetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2ISetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ISetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2ISetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2ISetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ISetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ISetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2ISetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ISetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2ISetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ISetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ISetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2ISetReadProtectOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    34,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2ISetReadProtectOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ISetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2ISetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ISetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ISetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XSetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XSetReadProtect =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XSetReadProtect",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    35,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XSetReadProtect,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XSetReadProtect),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XSetReadProtect_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XSetReadProtect_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtect_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XSetReadProtect_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtect_encode,

  
    LLRP_ThingMagicNXPG2XSetReadProtect_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XSetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XSetReadProtect *
LLRP_ThingMagicNXPG2XSetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2XSetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XSetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XSetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XSetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XSetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2XSetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XSetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XSetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XSetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XSetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XSetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2XSetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XSetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XSetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XSetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XSetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XSetReadProtectOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    36,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XSetReadProtectOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XSetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XSetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XSetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XSetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IResetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IResetReadProtect =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IResetReadProtect",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    37,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IResetReadProtect,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IResetReadProtect),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IResetReadProtect_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IResetReadProtect_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtect_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IResetReadProtect_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtect_encode,

  
    LLRP_ThingMagicNXPG2IResetReadProtect_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IResetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IResetReadProtect *
LLRP_ThingMagicNXPG2IResetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2IResetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IResetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IResetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IResetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IResetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2IResetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IResetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IResetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IResetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IResetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IResetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2IResetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IResetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IResetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IResetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IResetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IResetReadProtectOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    38,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IResetReadProtectOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IResetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IResetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IResetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IResetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XResetReadProtect
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XResetReadProtect =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XResetReadProtect",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    39,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XResetReadProtect,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XResetReadProtect),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XResetReadProtect_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XResetReadProtect_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtect_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XResetReadProtect_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtect_encode,

  
    LLRP_ThingMagicNXPG2XResetReadProtect_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XResetReadProtect[] =
{
  
    &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID,
    &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XResetReadProtect *
LLRP_ThingMagicNXPG2XResetReadProtect_construct (void)
{
    LLRP_tSThingMagicNXPG2XResetReadProtect *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XResetReadProtect *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XResetReadProtect);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XResetReadProtect_destruct (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XResetReadProtect_decodeFields (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2XResetReadProtect_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XResetReadProtect))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XResetReadProtect_getOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtect_setOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XResetReadProtect_getAccessPassword (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtect_setAccessPassword (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtect_beginCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtect_addCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XResetReadProtect))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtect_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XResetReadProtect_encode (
  const LLRP_tSThingMagicNXPG2XResetReadProtect *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XResetReadProtect_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XResetReadProtect_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XResetReadProtect_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XResetReadProtectOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XResetReadProtectOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    40,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XResetReadProtectOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XResetReadProtectOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XResetReadProtectOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XResetReadProtectOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XResetReadProtectOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeEAS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeEAS =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IChangeEAS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    41,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IChangeEAS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IChangeEAS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeEAS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeEAS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeEAS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeEAS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeEAS_encode,

  
    LLRP_ThingMagicNXPG2IChangeEAS_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeEAS[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID,
    &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword,
    &LLRP_fdThingMagicNXPG2IChangeEAS_Reset,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEAS_Reset =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Reset",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IChangeEAS *
LLRP_ThingMagicNXPG2IChangeEAS_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeEAS *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeEAS *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeEAS);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeEAS_destruct (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeEAS_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->Reset =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEAS_Reset);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEAS_Reset);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2IChangeEAS_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeEAS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IChangeEAS_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IChangeEAS_getAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_setAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2IChangeEAS_getReset (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->Reset;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_setReset (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  llrp_u1_t Value)
{
    pThis->Reset = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEAS_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEAS_addCustom (
  LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeEAS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEAS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeEAS_encode (
  const LLRP_tSThingMagicNXPG2IChangeEAS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeEAS_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IChangeEAS_AccessPassword);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Reset,
        &LLRP_fdThingMagicNXPG2IChangeEAS_Reset);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeEAS_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeEASOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IChangeEASOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    42,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IChangeEASOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeEASOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IChangeEASOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeEASOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeEASOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XChangeEAS
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XChangeEAS =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XChangeEAS",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    43,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XChangeEAS,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XChangeEAS),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XChangeEAS_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XChangeEAS_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XChangeEAS_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XChangeEAS_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XChangeEAS_encode,

  
    LLRP_ThingMagicNXPG2XChangeEAS_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XChangeEAS[] =
{
  
    &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID,
    &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword,
    &LLRP_fdThingMagicNXPG2XChangeEAS_Reset,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEAS_Reset =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Reset",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XChangeEAS *
LLRP_ThingMagicNXPG2XChangeEAS_construct (void)
{
    LLRP_tSThingMagicNXPG2XChangeEAS *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XChangeEAS *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XChangeEAS);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XChangeEAS_destruct (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XChangeEAS_decodeFields (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->Reset =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEAS_Reset);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEAS_Reset);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2XChangeEAS_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XChangeEAS))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XChangeEAS_getOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_setOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XChangeEAS_getAccessPassword (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_setAccessPassword (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2XChangeEAS_getReset (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->Reset;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_setReset (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  llrp_u1_t Value)
{
    pThis->Reset = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEAS_beginCustom (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEAS_addCustom (
  LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XChangeEAS))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEAS_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XChangeEAS_encode (
  const LLRP_tSThingMagicNXPG2XChangeEAS *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XChangeEAS_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XChangeEAS_AccessPassword);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Reset,
        &LLRP_fdThingMagicNXPG2XChangeEAS_Reset);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XChangeEAS_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XChangeEASOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XChangeEASOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    44,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XChangeEASOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XChangeEASOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XChangeEASOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XChangeEASOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XChangeEASOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IEASAlarm
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IEASAlarm =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IEASAlarm",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    45,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IEASAlarm,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IEASAlarm),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IEASAlarm_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IEASAlarm_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarm_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IEASAlarm_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarm_encode,

  
    LLRP_ThingMagicNXPG2IEASAlarm_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IEASAlarm[] =
{
  
    &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID,
    &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword,
    &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio,
    &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding,
    &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "DivideRatio",	// .pName
    LLRP_estThingMagicGen2DivideRatio,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TagEncoding",	// .pName
    LLRP_estThingMagicGen2TagEncoding,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PilotTone",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IEASAlarm *
LLRP_ThingMagicNXPG2IEASAlarm_construct (void)
{
    LLRP_tSThingMagicNXPG2IEASAlarm *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IEASAlarm *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IEASAlarm);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IEASAlarm_destruct (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IEASAlarm_decodeFields (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->eDivideRatio =
                (LLRP_tEThingMagicGen2DivideRatio) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio);
    }

    if(NULL != pThis)
    {
        pThis->eTagEncoding =
                (LLRP_tEThingMagicGen2TagEncoding) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding);
    }

    if(NULL != pThis)
    {
        pThis->PilotTone =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2IEASAlarm_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IEASAlarm))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IEASAlarm_getOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IEASAlarm_getAccessPassword (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setAccessPassword (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2DivideRatio
LLRP_ThingMagicNXPG2IEASAlarm_getDivideRatio (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->eDivideRatio;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setDivideRatio (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tEThingMagicGen2DivideRatio eValue)
{
    pThis->eDivideRatio = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2TagEncoding
LLRP_ThingMagicNXPG2IEASAlarm_getTagEncoding (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->eTagEncoding;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setTagEncoding (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tEThingMagicGen2TagEncoding eValue)
{
    pThis->eTagEncoding = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2IEASAlarm_getPilotTone (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->PilotTone;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_setPilotTone (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  llrp_u1_t Value)
{
    pThis->PilotTone = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarm_beginCustom (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarm_addCustom (
  LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IEASAlarm))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarm_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IEASAlarm_encode (
  const LLRP_tSThingMagicNXPG2IEASAlarm *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IEASAlarm_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IEASAlarm_AccessPassword);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eDivideRatio,
        &LLRP_fdThingMagicNXPG2IEASAlarm_DivideRatio);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eTagEncoding,
        &LLRP_fdThingMagicNXPG2IEASAlarm_TagEncoding);

    pOps->pfPut_u1(pEncoderStream,
        pThis->PilotTone,
        &LLRP_fdThingMagicNXPG2IEASAlarm_PilotTone);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IEASAlarm_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IEASAlarmOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IEASAlarmOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    46,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IEASAlarmOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IEASAlarmOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "EASAlarmCode",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->EASAlarmCode);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->EASAlarmCode =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode);
    }
    
}

void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_getEASAlarmCode (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->EASAlarmCode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_setEASAlarmCode (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EASAlarmCode);

    pThis->EASAlarmCode = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IEASAlarmOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EASAlarmCode,
        &LLRP_fdThingMagicNXPG2IEASAlarmOpSpecResult_EASAlarmCode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IEASAlarmOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XEASAlarm
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XEASAlarm =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XEASAlarm",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    47,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XEASAlarm,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XEASAlarm),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XEASAlarm_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XEASAlarm_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarm_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XEASAlarm_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarm_encode,

  
    LLRP_ThingMagicNXPG2XEASAlarm_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XEASAlarm[] =
{
  
    &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID,
    &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword,
    &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio,
    &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding,
    &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "DivideRatio",	// .pName
    LLRP_estThingMagicGen2DivideRatio,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TagEncoding",	// .pName
    LLRP_estThingMagicGen2TagEncoding,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PilotTone",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XEASAlarm *
LLRP_ThingMagicNXPG2XEASAlarm_construct (void)
{
    LLRP_tSThingMagicNXPG2XEASAlarm *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XEASAlarm *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XEASAlarm);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XEASAlarm_destruct (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XEASAlarm_decodeFields (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->eDivideRatio =
                (LLRP_tEThingMagicGen2DivideRatio) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio);
    }

    if(NULL != pThis)
    {
        pThis->eTagEncoding =
                (LLRP_tEThingMagicGen2TagEncoding) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding);
    }

    if(NULL != pThis)
    {
        pThis->PilotTone =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicNXPG2XEASAlarm_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XEASAlarm))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XEASAlarm_getOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XEASAlarm_getAccessPassword (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setAccessPassword (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2DivideRatio
LLRP_ThingMagicNXPG2XEASAlarm_getDivideRatio (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->eDivideRatio;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setDivideRatio (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tEThingMagicGen2DivideRatio eValue)
{
    pThis->eDivideRatio = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicGen2TagEncoding
LLRP_ThingMagicNXPG2XEASAlarm_getTagEncoding (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->eTagEncoding;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setTagEncoding (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tEThingMagicGen2TagEncoding eValue)
{
    pThis->eTagEncoding = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPG2XEASAlarm_getPilotTone (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->PilotTone;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_setPilotTone (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  llrp_u1_t Value)
{
    pThis->PilotTone = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarm_beginCustom (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarm_addCustom (
  LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XEASAlarm))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarm_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XEASAlarm_encode (
  const LLRP_tSThingMagicNXPG2XEASAlarm *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XEASAlarm_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XEASAlarm_AccessPassword);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eDivideRatio,
        &LLRP_fdThingMagicNXPG2XEASAlarm_DivideRatio);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eTagEncoding,
        &LLRP_fdThingMagicNXPG2XEASAlarm_TagEncoding);

    pOps->pfPut_u1(pEncoderStream,
        pThis->PilotTone,
        &LLRP_fdThingMagicNXPG2XEASAlarm_PilotTone);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XEASAlarm_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XEASAlarmOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XEASAlarmOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    48,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XEASAlarmOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XEASAlarmOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "EASAlarmCode",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->EASAlarmCode);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->EASAlarmCode =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode);
    }
    
}

void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_getEASAlarmCode (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->EASAlarmCode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_setEASAlarmCode (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->EASAlarmCode);

    pThis->EASAlarmCode = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XEASAlarmOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->EASAlarmCode,
        &LLRP_fdThingMagicNXPG2XEASAlarmOpSpecResult_EASAlarmCode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XEASAlarmOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ICalibrate
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ICalibrate =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2ICalibrate",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    49,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2ICalibrate,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2ICalibrate),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ICalibrate_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ICalibrate_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ICalibrate_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ICalibrate_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ICalibrate_encode,

  
    LLRP_ThingMagicNXPG2ICalibrate_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ICalibrate[] =
{
  
    &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID,
    &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2ICalibrate *
LLRP_ThingMagicNXPG2ICalibrate_construct (void)
{
    LLRP_tSThingMagicNXPG2ICalibrate *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ICalibrate *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ICalibrate);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ICalibrate_destruct (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ICalibrate_decodeFields (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2ICalibrate_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ICalibrate))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2ICalibrate_getOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrate_setOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2ICalibrate_getAccessPassword (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrate_setAccessPassword (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrate_beginCustom (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrate_addCustom (
  LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ICalibrate))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrate_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ICalibrate_encode (
  const LLRP_tSThingMagicNXPG2ICalibrate *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ICalibrate_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2ICalibrate_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ICalibrate_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2ICalibrateOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2ICalibrateOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    50,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2ICalibrateOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2ICalibrateOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CalibrateData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->CalibrateData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CalibrateData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData);
    }
    
}

void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_getCalibrateData (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->CalibrateData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_setCalibrateData (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->CalibrateData);

    pThis->CalibrateData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2ICalibrateOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->CalibrateData,
        &LLRP_fdThingMagicNXPG2ICalibrateOpSpecResult_CalibrateData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2ICalibrateOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XCalibrate
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XCalibrate =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XCalibrate",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    51,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XCalibrate,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XCalibrate),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XCalibrate_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XCalibrate_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XCalibrate_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XCalibrate_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XCalibrate_encode,

  
    LLRP_ThingMagicNXPG2XCalibrate_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XCalibrate[] =
{
  
    &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID,
    &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XCalibrate *
LLRP_ThingMagicNXPG2XCalibrate_construct (void)
{
    LLRP_tSThingMagicNXPG2XCalibrate *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XCalibrate *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XCalibrate);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XCalibrate_destruct (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XCalibrate_decodeFields (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2XCalibrate_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XCalibrate))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2XCalibrate_getOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrate_setOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2XCalibrate_getAccessPassword (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrate_setAccessPassword (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrate_beginCustom (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrate_addCustom (
  LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XCalibrate))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrate_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XCalibrate_encode (
  const LLRP_tSThingMagicNXPG2XCalibrate *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XCalibrate_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2XCalibrate_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XCalibrate_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2XCalibrateOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2XCalibrateOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    52,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2XCalibrateOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2XCalibrateOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CalibrateData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->CalibrateData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->CalibrateData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData);
    }
    
}

void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_getCalibrateData (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->CalibrateData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_setCalibrateData (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->CalibrateData);

    pThis->CalibrateData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2XCalibrateOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->CalibrateData,
        &LLRP_fdThingMagicNXPG2XCalibrateOpSpecResult_CalibrateData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2XCalibrateOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeConfig
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeConfig =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IChangeConfig",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    53,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IChangeConfig,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IChangeConfig),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeConfig_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeConfig_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfig_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeConfig_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfig_encode,

  
    LLRP_ThingMagicNXPG2IChangeConfig_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeConfig[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID,
    &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IChangeConfig *
LLRP_ThingMagicNXPG2IChangeConfig_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeConfig *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeConfig *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeConfig);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeConfig_destruct (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeConfig_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPG2IChangeConfig_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicNXPConfigWord
    pType = &LLRP_tdThingMagicNXPConfigWord;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicNXPConfigWord = (LLRP_tSThingMagicNXPConfigWord *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeConfig))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPG2IChangeConfig_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPG2IChangeConfig_getAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_setAccessPassword (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPConfigWord *
LLRP_ThingMagicNXPG2IChangeConfig_getThingMagicNXPConfigWord (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->pThingMagicNXPConfigWord;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_setThingMagicNXPConfigWord (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSThingMagicNXPConfigWord * pValue)
{
    SUBPARAM_SET(pThingMagicNXPConfigWord, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfig_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfig_addCustom (
  LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeConfig))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfig_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeConfig_encode (
  const LLRP_tSThingMagicNXPG2IChangeConfig *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeConfig_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPG2IChangeConfig_AccessPassword);

    pType = &LLRP_tdThingMagicNXPConfigWord;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPConfigWord,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeConfig_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPG2IChangeConfigOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPG2IChangeConfigOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    54,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPG2IChangeConfigOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_encode,

  
    LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPG2IChangeConfigOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result,
    &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ConfigData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_destruct (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ConfigData =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData);
    }
    
}

void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_getResult (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_setResult (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_getConfigData (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->ConfigData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_setConfigData (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->ConfigData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_encode (
  const LLRP_tSThingMagicNXPG2IChangeConfigOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ConfigData,
        &LLRP_fdThingMagicNXPG2IChangeConfigOpSpecResult_ConfigData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPG2IChangeConfigOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPConfigWord
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPConfigWord =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPConfigWord",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    55,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPConfigWord,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPConfigWord),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPConfigWord_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPConfigWord_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPConfigWord_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPConfigWord_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPConfigWord_encode,

  
    LLRP_ThingMagicNXPConfigWord_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPConfigWord[] =
{
  
    &LLRP_fdThingMagicNXPConfigWord_PSFAlarm,
    &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID,
    &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC,
    &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser,
    &LLRP_fdThingMagicNXPConfigWord_PrivacyMode,
    &LLRP_fdThingMagicNXPConfigWord_DigitalOutput,
    &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength,
    &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort,
    &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff,
    &LLRP_fdThingMagicNXPConfigWord_DataMode,
    &LLRP_fdThingMagicNXPConfigWord_TransparentMode,
    &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput,
    &LLRP_fdThingMagicNXPConfigWord_ExternalSupply,
    &LLRP_fdThingMagicNXPConfigWord_TamperAlarm,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_PSFAlarm =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PSFAlarm",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ReadProtectTID =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadProtectTID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadProtectEPC",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ReadProtectUser =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadProtectUser",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_PrivacyMode =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PrivacyMode",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_DigitalOutput =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "DigitalOutput",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "MaxBackscatterStrength",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ConditionalReadRangeReduction_OpenShort",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ConditionalReadRangeReduction_OnOff",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_DataMode =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "DataMode",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_TransparentMode =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TransparentMode",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "InvertDigitalOutput",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_ExternalSupply =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ExternalSupply",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPConfigWord_TamperAlarm =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TamperAlarm",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPConfigWord *
LLRP_ThingMagicNXPConfigWord_construct (void)
{
    LLRP_tSThingMagicNXPConfigWord *pNew;

    pNew = (LLRP_tSThingMagicNXPConfigWord *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPConfigWord);

    return pNew;
}

void
LLRP_ThingMagicNXPConfigWord_destruct (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPConfigWord_decodeFields (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->PSFAlarm =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_PSFAlarm);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_PSFAlarm);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadProtectTID =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadProtectEPC =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadProtectUser =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser);
    }
    
    if(NULL != pThis)
    {
        pThis->PrivacyMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_PrivacyMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_PrivacyMode);
    }
    
    if(NULL != pThis)
    {
        pThis->DigitalOutput =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_DigitalOutput);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_DigitalOutput);
    }
    
    if(NULL != pThis)
    {
        pThis->MaxBackscatterStrength =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength);
    }
    
    if(NULL != pThis)
    {
        pThis->ConditionalReadRangeReduction_OpenShort =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort);
    }
    
    if(NULL != pThis)
    {
        pThis->ConditionalReadRangeReduction_OnOff =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff);
    }
    
    if(NULL != pThis)
    {
        pThis->DataMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_DataMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_DataMode);
    }
    
    if(NULL != pThis)
    {
        pThis->TransparentMode =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_TransparentMode);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_TransparentMode);
    }
    
    if(NULL != pThis)
    {
        pThis->InvertDigitalOutput =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput);
    }
    
    if(NULL != pThis)
    {
        pThis->ExternalSupply =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_ExternalSupply);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_ExternalSupply);
    }
    
    if(NULL != pThis)
    {
        pThis->TamperAlarm =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicNXPConfigWord_TamperAlarm);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicNXPConfigWord_TamperAlarm);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 2);

}

void
LLRP_ThingMagicNXPConfigWord_assimilateSubParameters (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPConfigWord))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getPSFAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->PSFAlarm;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setPSFAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->PSFAlarm = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getReadProtectTID (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ReadProtectTID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setReadProtectTID (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ReadProtectTID = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getReadProtectEPC (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ReadProtectEPC;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setReadProtectEPC (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ReadProtectEPC = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getReadProtectUser (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ReadProtectUser;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setReadProtectUser (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ReadProtectUser = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getPrivacyMode (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->PrivacyMode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setPrivacyMode (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->PrivacyMode = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->DigitalOutput;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->DigitalOutput = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getMaxBackscatterStrength (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->MaxBackscatterStrength;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setMaxBackscatterStrength (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->MaxBackscatterStrength = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getConditionalReadRangeReduction_OpenShort (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ConditionalReadRangeReduction_OpenShort;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setConditionalReadRangeReduction_OpenShort (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ConditionalReadRangeReduction_OpenShort = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getConditionalReadRangeReduction_OnOff (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ConditionalReadRangeReduction_OnOff;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setConditionalReadRangeReduction_OnOff (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ConditionalReadRangeReduction_OnOff = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getDataMode (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->DataMode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setDataMode (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->DataMode = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getTransparentMode (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->TransparentMode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setTransparentMode (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->TransparentMode = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getInvertDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->InvertDigitalOutput;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setInvertDigitalOutput (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->InvertDigitalOutput = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getExternalSupply (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->ExternalSupply;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setExternalSupply (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->ExternalSupply = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicNXPConfigWord_getTamperAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->TamperAlarm;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_setTamperAlarm (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  llrp_u1_t Value)
{
    pThis->TamperAlarm = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPConfigWord_beginCustom (
  LLRP_tSThingMagicNXPConfigWord *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPConfigWord_addCustom (
  LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPConfigWord))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPConfigWord_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPConfigWord_encode (
  const LLRP_tSThingMagicNXPConfigWord *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->PSFAlarm,
        &LLRP_fdThingMagicNXPConfigWord_PSFAlarm);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadProtectTID,
        &LLRP_fdThingMagicNXPConfigWord_ReadProtectTID);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadProtectEPC,
        &LLRP_fdThingMagicNXPConfigWord_ReadProtectEPC);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadProtectUser,
        &LLRP_fdThingMagicNXPConfigWord_ReadProtectUser);

    pOps->pfPut_u1(pEncoderStream,
        pThis->PrivacyMode,
        &LLRP_fdThingMagicNXPConfigWord_PrivacyMode);

    pOps->pfPut_u1(pEncoderStream,
        pThis->DigitalOutput,
        &LLRP_fdThingMagicNXPConfigWord_DigitalOutput);

    pOps->pfPut_u1(pEncoderStream,
        pThis->MaxBackscatterStrength,
        &LLRP_fdThingMagicNXPConfigWord_MaxBackscatterStrength);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ConditionalReadRangeReduction_OpenShort,
        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OpenShort);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ConditionalReadRangeReduction_OnOff,
        &LLRP_fdThingMagicNXPConfigWord_ConditionalReadRangeReduction_OnOff);

    pOps->pfPut_u1(pEncoderStream,
        pThis->DataMode,
        &LLRP_fdThingMagicNXPConfigWord_DataMode);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TransparentMode,
        &LLRP_fdThingMagicNXPConfigWord_TransparentMode);

    pOps->pfPut_u1(pEncoderStream,
        pThis->InvertDigitalOutput,
        &LLRP_fdThingMagicNXPConfigWord_InvertDigitalOutput);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ExternalSupply,
        &LLRP_fdThingMagicNXPConfigWord_ExternalSupply);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TamperAlarm,
        &LLRP_fdThingMagicNXPConfigWord_TamperAlarm);

    pOps->pfPut_reserved(pEncoderStream, 2);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPConfigWord_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicImpinjMonza4QTReadWrite
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicImpinjMonza4QTReadWrite =
{
    FALSE,	// .bIsMessage
    "ThingMagicImpinjMonza4QTReadWrite",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    56,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicImpinjMonza4QTReadWrite,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicImpinjMonza4QTReadWrite),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicImpinjMonza4QTReadWrite_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicImpinjMonza4QTReadWrite_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWrite_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicImpinjMonza4QTReadWrite_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWrite_encode,

  
    LLRP_ThingMagicImpinjMonza4QTReadWrite_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicImpinjMonza4QTReadWrite[] =
{
  
    &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID,
    &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicImpinjMonza4QTReadWrite *
LLRP_ThingMagicImpinjMonza4QTReadWrite_construct (void)
{
    LLRP_tSThingMagicImpinjMonza4QTReadWrite *pNew;

    pNew = (LLRP_tSThingMagicImpinjMonza4QTReadWrite *)
        LLRP_Element_construct(&LLRP_tdThingMagicImpinjMonza4QTReadWrite);

    return pNew;
}

void
LLRP_ThingMagicImpinjMonza4QTReadWrite_destruct (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicImpinjMonza4QTReadWrite_decodeFields (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword);
    }
    
}

void
LLRP_ThingMagicImpinjMonza4QTReadWrite_assimilateSubParameters (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicMonza4ControlByte
    pType = &LLRP_tdThingMagicMonza4ControlByte;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicMonza4ControlByte = (LLRP_tSThingMagicMonza4ControlByte *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicMonza4Payload
    pType = &LLRP_tdThingMagicMonza4Payload;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicMonza4Payload = (LLRP_tSThingMagicMonza4Payload *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicImpinjMonza4QTReadWrite))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicImpinjMonza4QTReadWrite_getOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicImpinjMonza4QTReadWrite_getAccessPassword (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setAccessPassword (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicMonza4ControlByte *
LLRP_ThingMagicImpinjMonza4QTReadWrite_getThingMagicMonza4ControlByte (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->pThingMagicMonza4ControlByte;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setThingMagicMonza4ControlByte (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSThingMagicMonza4ControlByte * pValue)
{
    SUBPARAM_SET(pThingMagicMonza4ControlByte, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicMonza4Payload *
LLRP_ThingMagicImpinjMonza4QTReadWrite_getThingMagicMonza4Payload (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->pThingMagicMonza4Payload;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_setThingMagicMonza4Payload (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSThingMagicMonza4Payload * pValue)
{
    SUBPARAM_SET(pThingMagicMonza4Payload, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWrite_beginCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWrite_addCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicImpinjMonza4QTReadWrite))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWrite_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicImpinjMonza4QTReadWrite_encode (
  const LLRP_tSThingMagicImpinjMonza4QTReadWrite *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicImpinjMonza4QTReadWrite_AccessPassword);

    pType = &LLRP_tdThingMagicMonza4ControlByte;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicMonza4ControlByte,
        pType);
      
    pType = &LLRP_tdThingMagicMonza4Payload;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicMonza4Payload,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicImpinjMonza4QTReadWrite_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicImpinjMonza4QTReadWriteOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicImpinjMonza4QTReadWriteOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    57,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicImpinjMonza4QTReadWriteOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_encode,

  
    LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicImpinjMonza4QTReadWriteOpSpecResult[] =
{
  
    &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result,
    &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Payload",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_construct (void)
{
    LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_destruct (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_decodeFields (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->Payload =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload);
    }
    
}

void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_getResult (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_setResult (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_getPayload (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->Payload;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_setPayload (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->Payload = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_beginCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_addCustom (
  LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_encode (
  const LLRP_tSThingMagicImpinjMonza4QTReadWriteOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->Payload,
        &LLRP_fdThingMagicImpinjMonza4QTReadWriteOpSpecResult_Payload);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicImpinjMonza4QTReadWriteOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicMonza4ControlByte
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicMonza4ControlByte =
{
    FALSE,	// .bIsMessage
    "ThingMagicMonza4ControlByte",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    58,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicMonza4ControlByte,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicMonza4ControlByte),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicMonza4ControlByte_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicMonza4ControlByte_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicMonza4ControlByte_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicMonza4ControlByte_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicMonza4ControlByte_encode,

  
    LLRP_ThingMagicMonza4ControlByte_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicMonza4ControlByte[] =
{
  
    &LLRP_fdThingMagicMonza4ControlByte_Persistance,
    &LLRP_fdThingMagicMonza4ControlByte_ReadWrite,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4ControlByte_Persistance =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Persistance",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4ControlByte_ReadWrite =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadWrite",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicMonza4ControlByte *
LLRP_ThingMagicMonza4ControlByte_construct (void)
{
    LLRP_tSThingMagicMonza4ControlByte *pNew;

    pNew = (LLRP_tSThingMagicMonza4ControlByte *)
        LLRP_Element_construct(&LLRP_tdThingMagicMonza4ControlByte);

    return pNew;
}

void
LLRP_ThingMagicMonza4ControlByte_destruct (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicMonza4ControlByte_decodeFields (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Persistance =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4ControlByte_Persistance);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4ControlByte_Persistance);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadWrite =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4ControlByte_ReadWrite);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4ControlByte_ReadWrite);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

}

void
LLRP_ThingMagicMonza4ControlByte_assimilateSubParameters (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicMonza4ControlByte))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicMonza4ControlByte_getPersistance (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
    return pThis->Persistance;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4ControlByte_setPersistance (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  llrp_u1_t Value)
{
    pThis->Persistance = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicMonza4ControlByte_getReadWrite (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
    return pThis->ReadWrite;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4ControlByte_setReadWrite (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  llrp_u1_t Value)
{
    pThis->ReadWrite = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicMonza4ControlByte_beginCustom (
  LLRP_tSThingMagicMonza4ControlByte *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4ControlByte_addCustom (
  LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicMonza4ControlByte))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicMonza4ControlByte_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicMonza4ControlByte_encode (
  const LLRP_tSThingMagicMonza4ControlByte *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->Persistance,
        &LLRP_fdThingMagicMonza4ControlByte_Persistance);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ReadWrite,
        &LLRP_fdThingMagicMonza4ControlByte_ReadWrite);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicMonza4ControlByte_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicMonza4Payload
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicMonza4Payload =
{
    FALSE,	// .bIsMessage
    "ThingMagicMonza4Payload",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    59,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicMonza4Payload,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicMonza4Payload),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicMonza4Payload_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicMonza4Payload_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicMonza4Payload_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicMonza4Payload_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicMonza4Payload_encode,

  
    LLRP_ThingMagicMonza4Payload_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicMonza4Payload[] =
{
  
    &LLRP_fdThingMagicMonza4Payload_QT_MEM,
    &LLRP_fdThingMagicMonza4Payload_QT_SR,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4Payload_QT_MEM =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "QT_MEM",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMonza4Payload_QT_SR =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "QT_SR",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicMonza4Payload *
LLRP_ThingMagicMonza4Payload_construct (void)
{
    LLRP_tSThingMagicMonza4Payload *pNew;

    pNew = (LLRP_tSThingMagicMonza4Payload *)
        LLRP_Element_construct(&LLRP_tdThingMagicMonza4Payload);

    return pNew;
}

void
LLRP_ThingMagicMonza4Payload_destruct (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicMonza4Payload_decodeFields (
  LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->QT_MEM =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4Payload_QT_MEM);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4Payload_QT_MEM);
    }
    
    if(NULL != pThis)
    {
        pThis->QT_SR =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicMonza4Payload_QT_SR);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicMonza4Payload_QT_SR);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 14);

}

void
LLRP_ThingMagicMonza4Payload_assimilateSubParameters (
  LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicMonza4Payload))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicMonza4Payload_getQT_MEM (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
    return pThis->QT_MEM;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4Payload_setQT_MEM (
  LLRP_tSThingMagicMonza4Payload *pThis,
  llrp_u1_t Value)
{
    pThis->QT_MEM = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicMonza4Payload_getQT_SR (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
    return pThis->QT_SR;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4Payload_setQT_SR (
  LLRP_tSThingMagicMonza4Payload *pThis,
  llrp_u1_t Value)
{
    pThis->QT_SR = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicMonza4Payload_beginCustom (
  LLRP_tSThingMagicMonza4Payload *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicMonza4Payload_addCustom (
  LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicMonza4Payload))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicMonza4Payload_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicMonza4Payload_encode (
  const LLRP_tSThingMagicMonza4Payload *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->QT_MEM,
        &LLRP_fdThingMagicMonza4Payload_QT_MEM);

    pOps->pfPut_u1(pEncoderStream,
        pThis->QT_SR,
        &LLRP_fdThingMagicMonza4Payload_QT_SR);

    pOps->pfPut_reserved(pEncoderStream, 14);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicMonza4Payload_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicWriteTag
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicWriteTag =
{
    FALSE,	// .bIsMessage
    "ThingMagicWriteTag",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    60,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicWriteTag,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicWriteTag),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicWriteTag_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicWriteTag_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicWriteTag_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicWriteTag_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicWriteTag_encode,

  
    LLRP_ThingMagicWriteTag_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicWriteTag[] =
{
  
    &LLRP_fdThingMagicWriteTag_OpSpecID,
    &LLRP_fdThingMagicWriteTag_AccessPassword,
    &LLRP_fdThingMagicWriteTag_WriteData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTag_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTag_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTag_WriteData =
{
    LLRP_FT_U16V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "WriteData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicWriteTag *
LLRP_ThingMagicWriteTag_construct (void)
{
    LLRP_tSThingMagicWriteTag *pNew;

    pNew = (LLRP_tSThingMagicWriteTag *)
        LLRP_Element_construct(&LLRP_tdThingMagicWriteTag);

    return pNew;
}

void
LLRP_ThingMagicWriteTag_destruct (
  LLRP_tSThingMagicWriteTag *pThis)
{
  
    LLRP_u16v_clear(&pThis->WriteData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicWriteTag_decodeFields (
  LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicWriteTag_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicWriteTag_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicWriteTag_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicWriteTag_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteData =
                pOps->pfGet_u16v(pDecoderStream,
                        &LLRP_fdThingMagicWriteTag_WriteData);
    }
    else
    {
        pOps->pfGet_u16v(pDecoderStream,
                &LLRP_fdThingMagicWriteTag_WriteData);
    }
    
}

void
LLRP_ThingMagicWriteTag_assimilateSubParameters (
  LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicWriteTag))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicWriteTag_getOpSpecID (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_setOpSpecID (
  LLRP_tSThingMagicWriteTag *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicWriteTag_getAccessPassword (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_setAccessPassword (
  LLRP_tSThingMagicWriteTag *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


llrp_u16v_t
LLRP_ThingMagicWriteTag_getWriteData (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->WriteData;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_setWriteData (
  LLRP_tSThingMagicWriteTag *pThis,
  llrp_u16v_t Value)
{
    LLRP_u16v_clear(&pThis->WriteData);

    pThis->WriteData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicWriteTag_beginCustom (
  LLRP_tSThingMagicWriteTag *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTag_addCustom (
  LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicWriteTag))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicWriteTag_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicWriteTag_encode (
  const LLRP_tSThingMagicWriteTag *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicWriteTag_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicWriteTag_AccessPassword);

    pOps->pfPut_u16v(pEncoderStream,
        pThis->WriteData,
        &LLRP_fdThingMagicWriteTag_WriteData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicWriteTag_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicWriteTagOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicWriteTagOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicWriteTagOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    61,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicWriteTagOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicWriteTagOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicWriteTagOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicWriteTagOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicWriteTagOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicWriteTagOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicWriteTagOpSpecResult_encode,

  
    LLRP_ThingMagicWriteTagOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicWriteTagOpSpecResult[] =
{
  
    &LLRP_fdThingMagicWriteTagOpSpecResult_Result,
    &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTagOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NumWordsWritten",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicWriteTagOpSpecResult *
LLRP_ThingMagicWriteTagOpSpecResult_construct (void)
{
    LLRP_tSThingMagicWriteTagOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicWriteTagOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicWriteTagOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicWriteTagOpSpecResult_destruct (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicWriteTagOpSpecResult_decodeFields (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicWriteTagOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicWriteTagOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->NumWordsWritten =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten);
    }
    
}

void
LLRP_ThingMagicWriteTagOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicWriteTagOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicWriteTagOpSpecResult_getResult (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_setResult (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicWriteTagOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicWriteTagOpSpecResult_getNumWordsWritten (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->NumWordsWritten;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_setNumWordsWritten (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->NumWordsWritten = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicWriteTagOpSpecResult_beginCustom (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicWriteTagOpSpecResult_addCustom (
  LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicWriteTagOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicWriteTagOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicWriteTagOpSpecResult_encode (
  const LLRP_tSThingMagicWriteTagOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicWriteTagOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicWriteTagOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->NumWordsWritten,
        &LLRP_fdThingMagicWriteTagOpSpecResult_NumWordsWritten);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicWriteTagOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BInventoryCommand
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BInventoryCommand =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BInventoryCommand",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    62,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BInventoryCommand,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BInventoryCommand),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BInventoryCommand_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BInventoryCommand_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BInventoryCommand_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BInventoryCommand_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BInventoryCommand_encode,

  
    LLRP_ThingMagicISO180006BInventoryCommand_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BInventoryCommand[] =
{
  
    NULL
};


LLRP_tSThingMagicISO180006BInventoryCommand *
LLRP_ThingMagicISO180006BInventoryCommand_construct (void)
{
    LLRP_tSThingMagicISO180006BInventoryCommand *pNew;

    pNew = (LLRP_tSThingMagicISO180006BInventoryCommand *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BInventoryCommand);

    return pNew;
}

void
LLRP_ThingMagicISO180006BInventoryCommand_destruct (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BInventoryCommand_decodeFields (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicISO180006BInventoryCommand_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of ThingMagicISO180006BTagPattern
    pType = &LLRP_tdThingMagicISO180006BTagPattern;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO180006BTagPattern = (LLRP_tSThingMagicISO180006BTagPattern *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicISO180006BTagPattern *
LLRP_ThingMagicISO180006BInventoryCommand_getThingMagicISO180006BTagPattern (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis)
{
    return pThis->pThingMagicISO180006BTagPattern;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BInventoryCommand_setThingMagicISO180006BTagPattern (
  LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSThingMagicISO180006BTagPattern * pValue)
{
    SUBPARAM_SET(pThingMagicISO180006BTagPattern, pValue);

    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BInventoryCommand_encode (
  const LLRP_tSThingMagicISO180006BInventoryCommand *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicISO180006BTagPattern;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO180006BTagPattern,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BInventoryCommand_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommand)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAirProtocolInventoryCommandSettings)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BTagPattern
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BTagPattern =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BTagPattern",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    63,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BTagPattern,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BTagPattern),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BTagPattern_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BTagPattern_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BTagPattern_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BTagPattern_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BTagPattern_encode,

  
    LLRP_ThingMagicISO180006BTagPattern_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BTagPattern[] =
{
  
    &LLRP_fdThingMagicISO180006BTagPattern_FilterType,
    &LLRP_fdThingMagicISO180006BTagPattern_Invert,
    &LLRP_fdThingMagicISO180006BTagPattern_SelectOp,
    &LLRP_fdThingMagicISO180006BTagPattern_Address,
    &LLRP_fdThingMagicISO180006BTagPattern_Mask,
    &LLRP_fdThingMagicISO180006BTagPattern_TagData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_FilterType =
{
    LLRP_FT_E1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "FilterType",	// .pName
    LLRP_estThingMagicISO180006BFilterType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_Invert =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Invert",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_SelectOp =
{
    LLRP_FT_U2,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "SelectOp",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_Address =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Address",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_Mask =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Mask",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BTagPattern_TagData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "TagData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BTagPattern *
LLRP_ThingMagicISO180006BTagPattern_construct (void)
{
    LLRP_tSThingMagicISO180006BTagPattern *pNew;

    pNew = (LLRP_tSThingMagicISO180006BTagPattern *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BTagPattern);

    return pNew;
}

void
LLRP_ThingMagicISO180006BTagPattern_destruct (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
  
    LLRP_u8v_clear(&pThis->TagData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BTagPattern_decodeFields (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eFilterType =
                (LLRP_tEThingMagicISO180006BFilterType) pOps->pfGet_e1(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_FilterType);
    }
    else
    {
        pOps->pfGet_e1(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_FilterType);
    }

    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->Invert =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_Invert);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_Invert);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->SelectOp =
                pOps->pfGet_u2(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_SelectOp);
    }
    else
    {
        pOps->pfGet_u2(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_SelectOp);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

    if(NULL != pThis)
    {
        pThis->Address =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_Address);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_Address);
    }
    
    if(NULL != pThis)
    {
        pThis->Mask =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_Mask);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_Mask);
    }
    
    if(NULL != pThis)
    {
        pThis->TagData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BTagPattern_TagData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicISO180006BTagPattern_TagData);
    }
    
}

void
LLRP_ThingMagicISO180006BTagPattern_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicISO180006BFilterType
LLRP_ThingMagicISO180006BTagPattern_getFilterType (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->eFilterType;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setFilterType (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tEThingMagicISO180006BFilterType eValue)
{
    pThis->eFilterType = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicISO180006BTagPattern_getInvert (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->Invert;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setInvert (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u1_t Value)
{
    pThis->Invert = Value;
    return LLRP_RC_OK;
}


llrp_u2_t
LLRP_ThingMagicISO180006BTagPattern_getSelectOp (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->SelectOp;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setSelectOp (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u2_t Value)
{
    pThis->SelectOp = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicISO180006BTagPattern_getAddress (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->Address;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setAddress (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u8_t Value)
{
    pThis->Address = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicISO180006BTagPattern_getMask (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->Mask;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setMask (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u8_t Value)
{
    pThis->Mask = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicISO180006BTagPattern_getTagData (
  LLRP_tSThingMagicISO180006BTagPattern *pThis)
{
    return pThis->TagData;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BTagPattern_setTagData (
  LLRP_tSThingMagicISO180006BTagPattern *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->TagData);

    pThis->TagData = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BTagPattern_encode (
  const LLRP_tSThingMagicISO180006BTagPattern *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e1(pEncoderStream,
        (int)pThis->eFilterType,
        &LLRP_fdThingMagicISO180006BTagPattern_FilterType);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Invert,
        &LLRP_fdThingMagicISO180006BTagPattern_Invert);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u2(pEncoderStream,
        pThis->SelectOp,
        &LLRP_fdThingMagicISO180006BTagPattern_SelectOp);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Address,
        &LLRP_fdThingMagicISO180006BTagPattern_Address);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Mask,
        &LLRP_fdThingMagicISO180006BTagPattern_Mask);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->TagData,
        &LLRP_fdThingMagicISO180006BTagPattern_TagData);

}


llrp_bool_t
LLRP_ThingMagicISO180006BTagPattern_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BRead
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BRead =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BRead",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    64,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BRead,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BRead),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BRead_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BRead_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BRead_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BRead_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BRead_encode,

  
    LLRP_ThingMagicISO180006BRead_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BRead[] =
{
  
    &LLRP_fdThingMagicISO180006BRead_OpSpecID,
    &LLRP_fdThingMagicISO180006BRead_ByteAddress,
    &LLRP_fdThingMagicISO180006BRead_ByteLen,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BRead_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BRead_ByteAddress =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ByteAddress",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BRead_ByteLen =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ByteLen",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BRead *
LLRP_ThingMagicISO180006BRead_construct (void)
{
    LLRP_tSThingMagicISO180006BRead *pNew;

    pNew = (LLRP_tSThingMagicISO180006BRead *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BRead);

    return pNew;
}

void
LLRP_ThingMagicISO180006BRead_destruct (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BRead_decodeFields (
  LLRP_tSThingMagicISO180006BRead *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BRead_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BRead_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ByteAddress =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BRead_ByteAddress);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BRead_ByteAddress);
    }
    
    if(NULL != pThis)
    {
        pThis->ByteLen =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BRead_ByteLen);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BRead_ByteLen);
    }
    
}

void
LLRP_ThingMagicISO180006BRead_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BRead *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicISO180006BRead_getOpSpecID (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BRead_setOpSpecID (
  LLRP_tSThingMagicISO180006BRead *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BRead_getByteAddress (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
    return pThis->ByteAddress;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BRead_setByteAddress (
  LLRP_tSThingMagicISO180006BRead *pThis,
  llrp_u16_t Value)
{
    pThis->ByteAddress = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BRead_getByteLen (
  LLRP_tSThingMagicISO180006BRead *pThis)
{
    return pThis->ByteLen;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BRead_setByteLen (
  LLRP_tSThingMagicISO180006BRead *pThis,
  llrp_u16_t Value)
{
    pThis->ByteLen = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BRead_encode (
  const LLRP_tSThingMagicISO180006BRead *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BRead_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ByteAddress,
        &LLRP_fdThingMagicISO180006BRead_ByteAddress);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ByteLen,
        &LLRP_fdThingMagicISO180006BRead_ByteLen);

}


llrp_bool_t
LLRP_ThingMagicISO180006BRead_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BReadOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BReadOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BReadOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    65,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BReadOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BReadOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BReadOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BReadOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BReadOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BReadOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BReadOpSpecResult_encode,

  
    LLRP_ThingMagicISO180006BReadOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BReadOpSpecResult[] =
{
  
    &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result,
    &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BReadOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "ReadData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BReadOpSpecResult *
LLRP_ThingMagicISO180006BReadOpSpecResult_construct (void)
{
    LLRP_tSThingMagicISO180006BReadOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicISO180006BReadOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BReadOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicISO180006BReadOpSpecResult_destruct (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->ReadData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BReadOpSpecResult_decodeFields (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData);
    }
    
}

void
LLRP_ThingMagicISO180006BReadOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BReadOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicISO180006BReadOpSpecResult_getResult (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_setResult (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BReadOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicISO180006BReadOpSpecResult_getReadData (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->ReadData;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_setReadData (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ReadData);

    pThis->ReadData = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BReadOpSpecResult_beginCustom (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BReadOpSpecResult_addCustom (
  LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BReadOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BReadOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BReadOpSpecResult_encode (
  const LLRP_tSThingMagicISO180006BReadOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicISO180006BReadOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BReadOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ReadData,
        &LLRP_fdThingMagicISO180006BReadOpSpecResult_ReadData);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BReadOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCustomAirProtocols
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCustomAirProtocols =
{
    FALSE,	// .bIsMessage
    "ThingMagicCustomAirProtocols",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    66,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicCustomAirProtocols,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicCustomAirProtocols),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCustomAirProtocols_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCustomAirProtocols_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCustomAirProtocols_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCustomAirProtocols_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCustomAirProtocols_encode,

  
    LLRP_ThingMagicCustomAirProtocols_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCustomAirProtocols[] =
{
  
    &LLRP_fdThingMagicCustomAirProtocols_customProtocolId,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomAirProtocols_customProtocolId =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "customProtocolId",	// .pName
    LLRP_estThingMagicCustomAirProtocolList,	// .pEnumTable
};

LLRP_tSThingMagicCustomAirProtocols *
LLRP_ThingMagicCustomAirProtocols_construct (void)
{
    LLRP_tSThingMagicCustomAirProtocols *pNew;

    pNew = (LLRP_tSThingMagicCustomAirProtocols *)
        LLRP_Element_construct(&LLRP_tdThingMagicCustomAirProtocols);

    return pNew;
}

void
LLRP_ThingMagicCustomAirProtocols_destruct (
  LLRP_tSThingMagicCustomAirProtocols *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCustomAirProtocols_decodeFields (
  LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ecustomProtocolId =
                (LLRP_tEThingMagicCustomAirProtocolList) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicCustomAirProtocols_customProtocolId);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicCustomAirProtocols_customProtocolId);
    }

}

void
LLRP_ThingMagicCustomAirProtocols_assimilateSubParameters (
  LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomAirProtocolList
LLRP_ThingMagicCustomAirProtocols_getcustomProtocolId (
  LLRP_tSThingMagicCustomAirProtocols *pThis)
{
    return pThis->ecustomProtocolId;
}

LLRP_tResultCode
LLRP_ThingMagicCustomAirProtocols_setcustomProtocolId (
  LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tEThingMagicCustomAirProtocolList eValue)
{
    pThis->ecustomProtocolId = eValue;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicCustomAirProtocols_encode (
  const LLRP_tSThingMagicCustomAirProtocols *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->ecustomProtocolId,
        &LLRP_fdThingMagicCustomAirProtocols_customProtocolId);

}


llrp_bool_t
LLRP_ThingMagicCustomAirProtocols_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommand)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdInventoryParameterSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BWrite
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BWrite =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BWrite",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    67,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BWrite,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BWrite),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BWrite_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BWrite_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BWrite_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BWrite_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BWrite_encode,

  
    LLRP_ThingMagicISO180006BWrite_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BWrite[] =
{
  
    &LLRP_fdThingMagicISO180006BWrite_OpSpecID,
    &LLRP_fdThingMagicISO180006BWrite_ByteAddress,
    &LLRP_fdThingMagicISO180006BWrite_WriteData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWrite_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWrite_ByteAddress =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ByteAddress",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWrite_WriteData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "WriteData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BWrite *
LLRP_ThingMagicISO180006BWrite_construct (void)
{
    LLRP_tSThingMagicISO180006BWrite *pNew;

    pNew = (LLRP_tSThingMagicISO180006BWrite *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BWrite);

    return pNew;
}

void
LLRP_ThingMagicISO180006BWrite_destruct (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
  
    LLRP_u8v_clear(&pThis->WriteData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BWrite_decodeFields (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWrite_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWrite_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ByteAddress =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWrite_ByteAddress);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWrite_ByteAddress);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWrite_WriteData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWrite_WriteData);
    }
    
}

void
LLRP_ThingMagicISO180006BWrite_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicISO180006BWrite_getOpSpecID (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWrite_setOpSpecID (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BWrite_getByteAddress (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
    return pThis->ByteAddress;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWrite_setByteAddress (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  llrp_u16_t Value)
{
    pThis->ByteAddress = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicISO180006BWrite_getWriteData (
  LLRP_tSThingMagicISO180006BWrite *pThis)
{
    return pThis->WriteData;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWrite_setWriteData (
  LLRP_tSThingMagicISO180006BWrite *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->WriteData);

    pThis->WriteData = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BWrite_encode (
  const LLRP_tSThingMagicISO180006BWrite *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BWrite_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->ByteAddress,
        &LLRP_fdThingMagicISO180006BWrite_ByteAddress);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->WriteData,
        &LLRP_fdThingMagicISO180006BWrite_WriteData);

}


llrp_bool_t
LLRP_ThingMagicISO180006BWrite_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BWriteOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BWriteOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BWriteOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    68,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BWriteOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BWriteOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BWriteOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BWriteOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BWriteOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BWriteOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BWriteOpSpecResult_encode,

  
    LLRP_ThingMagicISO180006BWriteOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BWriteOpSpecResult[] =
{
  
    &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result,
    &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NumBytesWritten",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BWriteOpSpecResult *
LLRP_ThingMagicISO180006BWriteOpSpecResult_construct (void)
{
    LLRP_tSThingMagicISO180006BWriteOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicISO180006BWriteOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BWriteOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicISO180006BWriteOpSpecResult_destruct (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BWriteOpSpecResult_decodeFields (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->NumBytesWritten =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten);
    }
    
}

void
LLRP_ThingMagicISO180006BWriteOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BWriteOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicISO180006BWriteOpSpecResult_getResult (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_setResult (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BWriteOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BWriteOpSpecResult_getNumBytesWritten (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->NumBytesWritten;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_setNumBytesWritten (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->NumBytesWritten = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BWriteOpSpecResult_beginCustom (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BWriteOpSpecResult_addCustom (
  LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BWriteOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BWriteOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BWriteOpSpecResult_encode (
  const LLRP_tSThingMagicISO180006BWriteOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->NumBytesWritten,
        &LLRP_fdThingMagicISO180006BWriteOpSpecResult_NumBytesWritten);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BWriteOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BLock
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BLock =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BLock",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    69,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BLock,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BLock),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BLock_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BLock_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BLock_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BLock_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BLock_encode,

  
    LLRP_ThingMagicISO180006BLock_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BLock[] =
{
  
    &LLRP_fdThingMagicISO180006BLock_OpSpecID,
    &LLRP_fdThingMagicISO180006BLock_Address,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLock_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLock_Address =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Address",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BLock *
LLRP_ThingMagicISO180006BLock_construct (void)
{
    LLRP_tSThingMagicISO180006BLock *pNew;

    pNew = (LLRP_tSThingMagicISO180006BLock *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BLock);

    return pNew;
}

void
LLRP_ThingMagicISO180006BLock_destruct (
  LLRP_tSThingMagicISO180006BLock *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BLock_decodeFields (
  LLRP_tSThingMagicISO180006BLock *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLock_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLock_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->Address =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLock_Address);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLock_Address);
    }
    
}

void
LLRP_ThingMagicISO180006BLock_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BLock *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicISO180006BLock_getOpSpecID (
  LLRP_tSThingMagicISO180006BLock *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLock_setOpSpecID (
  LLRP_tSThingMagicISO180006BLock *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicISO180006BLock_getAddress (
  LLRP_tSThingMagicISO180006BLock *pThis)
{
    return pThis->Address;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLock_setAddress (
  LLRP_tSThingMagicISO180006BLock *pThis,
  llrp_u8_t Value)
{
    pThis->Address = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicISO180006BLock_encode (
  const LLRP_tSThingMagicISO180006BLock *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BLock_OpSpecID);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Address,
        &LLRP_fdThingMagicISO180006BLock_Address);

}


llrp_bool_t
LLRP_ThingMagicISO180006BLock_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BLockOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BLockOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BLockOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    70,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BLockOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BLockOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BLockOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BLockOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BLockOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BLockOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BLockOpSpecResult_encode,

  
    LLRP_ThingMagicISO180006BLockOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BLockOpSpecResult[] =
{
  
    &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result,
    &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLockOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BLockOpSpecResult *
LLRP_ThingMagicISO180006BLockOpSpecResult_construct (void)
{
    LLRP_tSThingMagicISO180006BLockOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicISO180006BLockOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BLockOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicISO180006BLockOpSpecResult_destruct (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BLockOpSpecResult_decodeFields (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicISO180006BLockOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BLockOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicISO180006BLockOpSpecResult_getResult (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLockOpSpecResult_setResult (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicISO180006BLockOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLockOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BLockOpSpecResult_beginCustom (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BLockOpSpecResult_addCustom (
  LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BLockOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BLockOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BLockOpSpecResult_encode (
  const LLRP_tSThingMagicISO180006BLockOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicISO180006BLockOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicISO180006BLockOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BLockOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ISO18K6BCustomParameters
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdISO18K6BCustomParameters =
{
    FALSE,	// .bIsMessage
    "ISO18K6BCustomParameters",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    71,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdISO18K6BCustomParameters,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSISO18K6BCustomParameters),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ISO18K6BCustomParameters_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ISO18K6BCustomParameters_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ISO18K6BCustomParameters_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ISO18K6BCustomParameters_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ISO18K6BCustomParameters_encode,

  
    LLRP_ISO18K6BCustomParameters_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdISO18K6BCustomParameters[] =
{
  
    NULL
};


LLRP_tSISO18K6BCustomParameters *
LLRP_ISO18K6BCustomParameters_construct (void)
{
    LLRP_tSISO18K6BCustomParameters *pNew;

    pNew = (LLRP_tSISO18K6BCustomParameters *)
        LLRP_Element_construct(&LLRP_tdISO18K6BCustomParameters);

    return pNew;
}

void
LLRP_ISO18K6BCustomParameters_destruct (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ISO18K6BCustomParameters_decodeFields (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ISO18K6BCustomParameters_assimilateSubParameters (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of ThingMagicISO180006BDelimiter
    pType = &LLRP_tdThingMagicISO180006BDelimiter;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO180006BDelimiter = (LLRP_tSThingMagicISO180006BDelimiter *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicISO18K6BModulationDepth
    pType = &LLRP_tdThingMagicISO18K6BModulationDepth;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO18K6BModulationDepth = (LLRP_tSThingMagicISO18K6BModulationDepth *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicISO18K6BLinkFrequency
    pType = &LLRP_tdThingMagicISO18K6BLinkFrequency;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicISO18K6BLinkFrequency = (LLRP_tSThingMagicISO18K6BLinkFrequency *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdISO18K6BCustomParameters))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicISO180006BDelimiter *
LLRP_ISO18K6BCustomParameters_getThingMagicISO180006BDelimiter (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->pThingMagicISO180006BDelimiter;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_setThingMagicISO180006BDelimiter (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSThingMagicISO180006BDelimiter * pValue)
{
    SUBPARAM_SET(pThingMagicISO180006BDelimiter, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicISO18K6BModulationDepth *
LLRP_ISO18K6BCustomParameters_getThingMagicISO18K6BModulationDepth (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->pThingMagicISO18K6BModulationDepth;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_setThingMagicISO18K6BModulationDepth (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSThingMagicISO18K6BModulationDepth * pValue)
{
    SUBPARAM_SET(pThingMagicISO18K6BModulationDepth, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicISO18K6BLinkFrequency *
LLRP_ISO18K6BCustomParameters_getThingMagicISO18K6BLinkFrequency (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->pThingMagicISO18K6BLinkFrequency;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_setThingMagicISO18K6BLinkFrequency (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSThingMagicISO18K6BLinkFrequency * pValue)
{
    SUBPARAM_SET(pThingMagicISO18K6BLinkFrequency, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ISO18K6BCustomParameters_beginCustom (
  LLRP_tSISO18K6BCustomParameters *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ISO18K6BCustomParameters_addCustom (
  LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdISO18K6BCustomParameters))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ISO18K6BCustomParameters_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ISO18K6BCustomParameters_encode (
  const LLRP_tSISO18K6BCustomParameters *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicISO180006BDelimiter;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO180006BDelimiter,
        pType);
      
    pType = &LLRP_tdThingMagicISO18K6BModulationDepth;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO18K6BModulationDepth,
        pType);
      
    pType = &LLRP_tdThingMagicISO18K6BLinkFrequency;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicISO18K6BLinkFrequency,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ISO18K6BCustomParameters_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO180006BDelimiter
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO180006BDelimiter =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO180006BDelimiter",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    72,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO180006BDelimiter,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO180006BDelimiter),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO180006BDelimiter_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO180006BDelimiter_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO180006BDelimiter_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO180006BDelimiter_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO180006BDelimiter_encode,

  
    LLRP_ThingMagicISO180006BDelimiter_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO180006BDelimiter[] =
{
  
    &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ISO18K6BDelimiter",	// .pName
    LLRP_estThingMagicCustom18K6BDelimiter,	// .pEnumTable
};

LLRP_tSThingMagicISO180006BDelimiter *
LLRP_ThingMagicISO180006BDelimiter_construct (void)
{
    LLRP_tSThingMagicISO180006BDelimiter *pNew;

    pNew = (LLRP_tSThingMagicISO180006BDelimiter *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO180006BDelimiter);

    return pNew;
}

void
LLRP_ThingMagicISO180006BDelimiter_destruct (
  LLRP_tSThingMagicISO180006BDelimiter *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO180006BDelimiter_decodeFields (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eISO18K6BDelimiter =
                (LLRP_tEThingMagicCustom18K6BDelimiter) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter);
    }

}

void
LLRP_ThingMagicISO180006BDelimiter_assimilateSubParameters (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO180006BDelimiter))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustom18K6BDelimiter
LLRP_ThingMagicISO180006BDelimiter_getISO18K6BDelimiter (
  LLRP_tSThingMagicISO180006BDelimiter *pThis)
{
    return pThis->eISO18K6BDelimiter;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BDelimiter_setISO18K6BDelimiter (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tEThingMagicCustom18K6BDelimiter eValue)
{
    pThis->eISO18K6BDelimiter = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO180006BDelimiter_beginCustom (
  LLRP_tSThingMagicISO180006BDelimiter *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO180006BDelimiter_addCustom (
  LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO180006BDelimiter))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO180006BDelimiter_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO180006BDelimiter_encode (
  const LLRP_tSThingMagicISO180006BDelimiter *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eISO18K6BDelimiter,
        &LLRP_fdThingMagicISO180006BDelimiter_ISO18K6BDelimiter);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO180006BDelimiter_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO18K6BModulationDepth
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO18K6BModulationDepth =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO18K6BModulationDepth",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    73,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO18K6BModulationDepth,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO18K6BModulationDepth),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO18K6BModulationDepth_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO18K6BModulationDepth_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO18K6BModulationDepth_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO18K6BModulationDepth_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO18K6BModulationDepth_encode,

  
    LLRP_ThingMagicISO18K6BModulationDepth_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO18K6BModulationDepth[] =
{
  
    &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ISO18K6BModulationDepth",	// .pName
    LLRP_estThingMagicCustom18K6BModulationDepth,	// .pEnumTable
};

LLRP_tSThingMagicISO18K6BModulationDepth *
LLRP_ThingMagicISO18K6BModulationDepth_construct (void)
{
    LLRP_tSThingMagicISO18K6BModulationDepth *pNew;

    pNew = (LLRP_tSThingMagicISO18K6BModulationDepth *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO18K6BModulationDepth);

    return pNew;
}

void
LLRP_ThingMagicISO18K6BModulationDepth_destruct (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO18K6BModulationDepth_decodeFields (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eISO18K6BModulationDepth =
                (LLRP_tEThingMagicCustom18K6BModulationDepth) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth);
    }

}

void
LLRP_ThingMagicISO18K6BModulationDepth_assimilateSubParameters (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO18K6BModulationDepth))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustom18K6BModulationDepth
LLRP_ThingMagicISO18K6BModulationDepth_getISO18K6BModulationDepth (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis)
{
    return pThis->eISO18K6BModulationDepth;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BModulationDepth_setISO18K6BModulationDepth (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tEThingMagicCustom18K6BModulationDepth eValue)
{
    pThis->eISO18K6BModulationDepth = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO18K6BModulationDepth_beginCustom (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BModulationDepth_addCustom (
  LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO18K6BModulationDepth))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO18K6BModulationDepth_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO18K6BModulationDepth_encode (
  const LLRP_tSThingMagicISO18K6BModulationDepth *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eISO18K6BModulationDepth,
        &LLRP_fdThingMagicISO18K6BModulationDepth_ISO18K6BModulationDepth);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO18K6BModulationDepth_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO18K6BLinkFrequency
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO18K6BLinkFrequency =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO18K6BLinkFrequency",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    74,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO18K6BLinkFrequency,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO18K6BLinkFrequency),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO18K6BLinkFrequency_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO18K6BLinkFrequency_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO18K6BLinkFrequency_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO18K6BLinkFrequency_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO18K6BLinkFrequency_encode,

  
    LLRP_ThingMagicISO18K6BLinkFrequency_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO18K6BLinkFrequency[] =
{
  
    &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ISO18K6BLinkFrequency",	// .pName
    LLRP_estThingMagicCustom18K6BLinkFrequency,	// .pEnumTable
};

LLRP_tSThingMagicISO18K6BLinkFrequency *
LLRP_ThingMagicISO18K6BLinkFrequency_construct (void)
{
    LLRP_tSThingMagicISO18K6BLinkFrequency *pNew;

    pNew = (LLRP_tSThingMagicISO18K6BLinkFrequency *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO18K6BLinkFrequency);

    return pNew;
}

void
LLRP_ThingMagicISO18K6BLinkFrequency_destruct (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO18K6BLinkFrequency_decodeFields (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eISO18K6BLinkFrequency =
                (LLRP_tEThingMagicCustom18K6BLinkFrequency) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency);
    }

}

void
LLRP_ThingMagicISO18K6BLinkFrequency_assimilateSubParameters (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO18K6BLinkFrequency))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustom18K6BLinkFrequency
LLRP_ThingMagicISO18K6BLinkFrequency_getISO18K6BLinkFrequency (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis)
{
    return pThis->eISO18K6BLinkFrequency;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLinkFrequency_setISO18K6BLinkFrequency (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tEThingMagicCustom18K6BLinkFrequency eValue)
{
    pThis->eISO18K6BLinkFrequency = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLinkFrequency_beginCustom (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLinkFrequency_addCustom (
  LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO18K6BLinkFrequency))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLinkFrequency_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO18K6BLinkFrequency_encode (
  const LLRP_tSThingMagicISO18K6BLinkFrequency *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eISO18K6BLinkFrequency,
        &LLRP_fdThingMagicISO18K6BLinkFrequency_ISO18K6BLinkFrequency);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO18K6BLinkFrequency_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicISO18K6BLLRPCapabilities
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicISO18K6BLLRPCapabilities =
{
    FALSE,	// .bIsMessage
    "ThingMagicISO18K6BLLRPCapabilities",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    75,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicISO18K6BLLRPCapabilities,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicISO18K6BLLRPCapabilities),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicISO18K6BLLRPCapabilities_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicISO18K6BLLRPCapabilities_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicISO18K6BLLRPCapabilities_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicISO18K6BLLRPCapabilities_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicISO18K6BLLRPCapabilities_encode,

  
    LLRP_ThingMagicISO18K6BLLRPCapabilities_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicISO18K6BLLRPCapabilities[] =
{
  
    &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead,
    &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite,
    &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CanSupportRead",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CanSupportWrite",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CanSupportLock",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicISO18K6BLLRPCapabilities *
LLRP_ThingMagicISO18K6BLLRPCapabilities_construct (void)
{
    LLRP_tSThingMagicISO18K6BLLRPCapabilities *pNew;

    pNew = (LLRP_tSThingMagicISO18K6BLLRPCapabilities *)
        LLRP_Element_construct(&LLRP_tdThingMagicISO18K6BLLRPCapabilities);

    return pNew;
}

void
LLRP_ThingMagicISO18K6BLLRPCapabilities_destruct (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicISO18K6BLLRPCapabilities_decodeFields (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->CanSupportRead =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead);
    }
    
    if(NULL != pThis)
    {
        pThis->CanSupportWrite =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite);
    }
    
    if(NULL != pThis)
    {
        pThis->CanSupportLock =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 5);

}

void
LLRP_ThingMagicISO18K6BLLRPCapabilities_assimilateSubParameters (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicISO18K6BLLRPCapabilities))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_getCanSupportRead (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->CanSupportRead;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_setCanSupportRead (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  llrp_u1_t Value)
{
    pThis->CanSupportRead = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_getCanSupportWrite (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->CanSupportWrite;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_setCanSupportWrite (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  llrp_u1_t Value)
{
    pThis->CanSupportWrite = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_getCanSupportLock (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->CanSupportLock;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_setCanSupportLock (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  llrp_u1_t Value)
{
    pThis->CanSupportLock = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLLRPCapabilities_beginCustom (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicISO18K6BLLRPCapabilities_addCustom (
  LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicISO18K6BLLRPCapabilities))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicISO18K6BLLRPCapabilities_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicISO18K6BLLRPCapabilities_encode (
  const LLRP_tSThingMagicISO18K6BLLRPCapabilities *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->CanSupportRead,
        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportRead);

    pOps->pfPut_u1(pEncoderStream,
        pThis->CanSupportWrite,
        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportWrite);

    pOps->pfPut_u1(pEncoderStream,
        pThis->CanSupportLock,
        &LLRP_fdThingMagicISO18K6BLLRPCapabilities_CanSupportLock);

    pOps->pfPut_reserved(pEncoderStream, 5);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicISO18K6BLLRPCapabilities_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAirProtocolLLRPCapabilities)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASensorValue
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASensorValue =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASensorValue",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    76,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASensorValue,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASensorValue),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASensorValue_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASensorValue_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValue_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASensorValue_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValue_encode,

  
    LLRP_ThingMagicIDSSL900ASensorValue_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASensorValue[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValue_SensorType =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "SensorType",	// .pName
    LLRP_estThingMagicCustomIDSSensorType,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASensorValue *
LLRP_ThingMagicIDSSL900ASensorValue_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASensorValue *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASensorValue *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASensorValue);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASensorValue_destruct (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASensorValue_decodeFields (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eSensorType =
                (LLRP_tEThingMagicCustomIDSSensorType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType);
    }

}

void
LLRP_ThingMagicIDSSL900ASensorValue_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASensorValue))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomIDSSensorType
LLRP_ThingMagicIDSSL900ASensorValue_getSensorType (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
    return pThis->eSensorType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValue_setSensorType (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tEThingMagicCustomIDSSensorType eValue)
{
    pThis->eSensorType = eValue;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASensorValue_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValue_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValue_beginCustom (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValue_addCustom (
  LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASensorValue))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValue_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASensorValue_encode (
  const LLRP_tSThingMagicIDSSL900ASensorValue *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eSensorType,
        &LLRP_fdThingMagicIDSSL900ASensorValue_SensorType);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASensorValue_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ACommandRequest
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ACommandRequest =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ACommandRequest",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    200,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ACommandRequest,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ACommandRequest),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ACommandRequest_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ACommandRequest_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ACommandRequest_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ACommandRequest_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ACommandRequest_encode,

  
    LLRP_ThingMagicIDSSL900ACommandRequest_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ACommandRequest[] =
{
  
    &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode,
    &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PasswordLevel",	// .pName
    LLRP_estThingMagicCustomIDSPasswordLevel,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CommandCode",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "IDSPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ACommandRequest_construct (void)
{
    LLRP_tSThingMagicIDSSL900ACommandRequest *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ACommandRequest *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ACommandRequest);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ACommandRequest_destruct (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ACommandRequest_decodeFields (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword);
    }
    
    if(NULL != pThis)
    {
        pThis->ePasswordLevel =
                (LLRP_tEThingMagicCustomIDSPasswordLevel) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel);
    }

    if(NULL != pThis)
    {
        pThis->CommandCode =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode);
    }
    
    if(NULL != pThis)
    {
        pThis->IDSPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword);
    }
    
}

void
LLRP_ThingMagicIDSSL900ACommandRequest_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ACommandRequest))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSSL900ACommandRequest_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicIDSSL900ACommandRequest_getAccessPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setAccessPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSPasswordLevel
LLRP_ThingMagicIDSSL900ACommandRequest_getPasswordLevel (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->ePasswordLevel;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setPasswordLevel (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tEThingMagicCustomIDSPasswordLevel eValue)
{
    pThis->ePasswordLevel = eValue;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900ACommandRequest_getCommandCode (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->CommandCode;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setCommandCode (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u8_t Value)
{
    pThis->CommandCode = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicIDSSL900ACommandRequest_getIDSPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->IDSPassword;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_setIDSPassword (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  llrp_u32_t Value)
{
    pThis->IDSPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ACommandRequest_beginCustom (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ACommandRequest_addCustom (
  LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ACommandRequest))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ACommandRequest_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ACommandRequest_encode (
  const LLRP_tSThingMagicIDSSL900ACommandRequest *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_AccessPassword);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->ePasswordLevel,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_PasswordLevel);

    pOps->pfPut_u8(pEncoderStream,
        pThis->CommandCode,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_CommandCode);

    pOps->pfPut_u32(pEncoderStream,
        pThis->IDSPassword,
        &LLRP_fdThingMagicIDSSL900ACommandRequest_IDSPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ACommandRequest_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASensorValueOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASensorValueOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    77,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASensorValueOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASensorValueOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue,
    &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "reply",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "raw",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ADError",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "RangeLimit",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "SensorValue",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "SensorValueByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->SensorValueByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->reply =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply);
    }
    
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->ADError =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->RangeLimit =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit);
    }
    
    if(NULL != pThis)
    {
        pThis->SensorValue =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue);
    }
    
    if(NULL != pThis)
    {
        pThis->SensorValueByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getreply (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->reply;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setreply (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->reply = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getraw (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setraw (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getADError (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->ADError;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setADError (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->ADError = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getRangeLimit (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->RangeLimit;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setRangeLimit (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u8_t Value)
{
    pThis->RangeLimit = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getSensorValue (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->SensorValue;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setSensorValue (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->SensorValue = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_getSensorValueByteStream (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->SensorValueByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_setSensorValueByteStream (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->SensorValueByteStream);

    pThis->SensorValueByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASensorValueOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->reply,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_reply);

    pOps->pfPut_u16(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_raw);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ADError,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_ADError);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->RangeLimit,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_RangeLimit);

    pOps->pfPut_u16(pEncoderStream,
        pThis->SensorValue,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValue);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->SensorValueByteStream,
        &LLRP_fdThingMagicIDSSL900ASensorValueOpSpecResult_SensorValueByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASensorValueOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetLogState
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetLogState =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AGetLogState",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    78,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AGetLogState,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AGetLogState),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetLogState_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetLogState_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetLogState_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetLogState_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetLogState_encode,

  
    LLRP_ThingMagicIDSSL900AGetLogState_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetLogState[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AGetLogState *
LLRP_ThingMagicIDSSL900AGetLogState_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetLogState *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetLogState *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetLogState);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetLogState_destruct (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetLogState_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AGetLogState_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetLogState))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetLogState_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetLogState_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetLogState_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetLogState_addCustom (
  LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetLogState))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetLogState_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetLogState_encode (
  const LLRP_tSThingMagicIDSSL900AGetLogState *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetLogState_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ALogStateOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ALogStateOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    79,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ALogStateOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ALogStateOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LogStateByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->LogStateByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->LogStateByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream);
    }
    
}

void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSLogState
    pType = &LLRP_tdThingMagicIDSLogState;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogState = (LLRP_tSThingMagicIDSLogState *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getLogStateByteStream (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->LogStateByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setLogStateByteStream (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->LogStateByteStream);

    pThis->LogStateByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogState *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_getThingMagicIDSLogState (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSLogState;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_setThingMagicIDSLogState (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSThingMagicIDSLogState * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogState, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ALogStateOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->LogStateByteStream,
        &LLRP_fdThingMagicIDSSL900ALogStateOpSpecResult_LogStateByteStream);

    pType = &LLRP_tdThingMagicIDSLogState;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogState,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ALogStateOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogState
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogState =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSLogState",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    80,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSLogState,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSLogState),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogState_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogState_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogState_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogState_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogState_encode,

  
    LLRP_ThingMagicIDSLogState_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogState[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSLogState *
LLRP_ThingMagicIDSLogState_construct (void)
{
    LLRP_tSThingMagicIDSLogState *pNew;

    pNew = (LLRP_tSThingMagicIDSLogState *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogState);

    return pNew;
}

void
LLRP_ThingMagicIDSLogState_destruct (
  LLRP_tSThingMagicIDSLogState *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogState_decodeFields (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSLogState_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSLogStateLimitCounter
    pType = &LLRP_tdThingMagicIDSLogStateLimitCounter;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogStateLimitCounter = (LLRP_tSThingMagicIDSLogStateLimitCounter *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogStateSystemStatus
    pType = &LLRP_tdThingMagicIDSLogStateSystemStatus;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogStateSystemStatus = (LLRP_tSThingMagicIDSLogStateSystemStatus *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogStateStatusFlag
    pType = &LLRP_tdThingMagicIDSLogStateStatusFlag;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogStateStatusFlag = (LLRP_tSThingMagicIDSLogStateStatusFlag *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-1 of ThingMagicIDSSLBlock0
    pType = &LLRP_tdThingMagicIDSSLBlock0;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicIDSSLBlock0 = (LLRP_tSThingMagicIDSSLBlock0 *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicIDSSLBlock1
    pType = &LLRP_tdThingMagicIDSSLBlock1;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicIDSSLBlock1 = (LLRP_tSThingMagicIDSSLBlock1 *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogState))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSLogStateLimitCounter *
LLRP_ThingMagicIDSLogState_getThingMagicIDSLogStateLimitCounter (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSLogStateLimitCounter;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSLogStateLimitCounter (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSLogStateLimitCounter * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogStateLimitCounter, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogStateSystemStatus *
LLRP_ThingMagicIDSLogState_getThingMagicIDSLogStateSystemStatus (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSLogStateSystemStatus;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSLogStateSystemStatus (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSLogStateSystemStatus * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogStateSystemStatus, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogStateStatusFlag *
LLRP_ThingMagicIDSLogState_getThingMagicIDSLogStateStatusFlag (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSLogStateStatusFlag;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSLogStateStatusFlag (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSLogStateStatusFlag * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogStateStatusFlag, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock0 *
LLRP_ThingMagicIDSLogState_getThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSSLBlock0;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSSLBlock0 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock0, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock1 *
LLRP_ThingMagicIDSLogState_getThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->pThingMagicIDSSLBlock1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_setThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSThingMagicIDSSLBlock1 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock1, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogState_beginCustom (
  LLRP_tSThingMagicIDSLogState *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogState_addCustom (
  LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogState))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogState_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogState_encode (
  const LLRP_tSThingMagicIDSLogState *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSLogStateLimitCounter;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogStateLimitCounter,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogStateSystemStatus;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogStateSystemStatus,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogStateStatusFlag;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogStateStatusFlag,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock0;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock0,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock1;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock1,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogState_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogStateLimitCounter
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogStateLimitCounter =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSLogStateLimitCounter",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    81,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSLogStateLimitCounter,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSLogStateLimitCounter),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogStateLimitCounter_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogStateLimitCounter_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogStateLimitCounter_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogStateLimitCounter_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogStateLimitCounter_encode,

  
    LLRP_ThingMagicIDSLogStateLimitCounter_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogStateLimitCounter[] =
{
  
    &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower,
    &LLRP_fdThingMagicIDSLogStateLimitCounter_lower,
    &LLRP_fdThingMagicIDSLogStateLimitCounter_upper,
    &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "extremeLower",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_lower =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "lower",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_upper =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "upper",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "extremeUpper",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSLogStateLimitCounter *
LLRP_ThingMagicIDSLogStateLimitCounter_construct (void)
{
    LLRP_tSThingMagicIDSLogStateLimitCounter *pNew;

    pNew = (LLRP_tSThingMagicIDSLogStateLimitCounter *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogStateLimitCounter);

    return pNew;
}

void
LLRP_ThingMagicIDSLogStateLimitCounter_destruct (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogStateLimitCounter_decodeFields (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->extremeLower =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower);
    }
    
    if(NULL != pThis)
    {
        pThis->lower =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_lower);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_lower);
    }
    
    if(NULL != pThis)
    {
        pThis->upper =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_upper);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_upper);
    }
    
    if(NULL != pThis)
    {
        pThis->extremeUpper =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper);
    }
    
}

void
LLRP_ThingMagicIDSLogStateLimitCounter_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogStateLimitCounter))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getextremeLower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->extremeLower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setextremeLower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->extremeLower = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getlower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->lower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setlower (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->lower = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getupper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->upper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setupper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->upper = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateLimitCounter_getextremeUpper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->extremeUpper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_setextremeUpper (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  llrp_u8_t Value)
{
    pThis->extremeUpper = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateLimitCounter_beginCustom (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateLimitCounter_addCustom (
  LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogStateLimitCounter))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateLimitCounter_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogStateLimitCounter_encode (
  const LLRP_tSThingMagicIDSLogStateLimitCounter *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->extremeLower,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeLower);

    pOps->pfPut_u8(pEncoderStream,
        pThis->lower,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_lower);

    pOps->pfPut_u8(pEncoderStream,
        pThis->upper,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_upper);

    pOps->pfPut_u8(pEncoderStream,
        pThis->extremeUpper,
        &LLRP_fdThingMagicIDSLogStateLimitCounter_extremeUpper);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogStateLimitCounter_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogStateSystemStatus
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogStateSystemStatus =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSLogStateSystemStatus",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    82,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSLogStateSystemStatus,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSLogStateSystemStatus),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogStateSystemStatus_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogStateSystemStatus_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogStateSystemStatus_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogStateSystemStatus_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogStateSystemStatus_encode,

  
    LLRP_ThingMagicIDSLogStateSystemStatus_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogStateSystemStatus[] =
{
  
    &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer,
    &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements,
    &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements,
    &LLRP_fdThingMagicIDSLogStateSystemStatus_Active,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "MeasurementAddressPointer",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NumMemReplacements",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NumMeasurements",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateSystemStatus_Active =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Active",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSLogStateSystemStatus *
LLRP_ThingMagicIDSLogStateSystemStatus_construct (void)
{
    LLRP_tSThingMagicIDSLogStateSystemStatus *pNew;

    pNew = (LLRP_tSThingMagicIDSLogStateSystemStatus *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogStateSystemStatus);

    return pNew;
}

void
LLRP_ThingMagicIDSLogStateSystemStatus_destruct (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogStateSystemStatus_decodeFields (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->MeasurementAddressPointer =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer);
    }
    
    if(NULL != pThis)
    {
        pThis->NumMemReplacements =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements);
    }
    
    if(NULL != pThis)
    {
        pThis->NumMeasurements =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements);
    }
    
    if(NULL != pThis)
    {
        pThis->Active =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateSystemStatus_Active);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateSystemStatus_Active);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicIDSLogStateSystemStatus_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogStateSystemStatus))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSLogStateSystemStatus_getMeasurementAddressPointer (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->MeasurementAddressPointer;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setMeasurementAddressPointer (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u16_t Value)
{
    pThis->MeasurementAddressPointer = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSLogStateSystemStatus_getNumMemReplacements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->NumMemReplacements;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setNumMemReplacements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u8_t Value)
{
    pThis->NumMemReplacements = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogStateSystemStatus_getNumMeasurements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->NumMeasurements;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setNumMeasurements (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u16_t Value)
{
    pThis->NumMeasurements = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateSystemStatus_getActive (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->Active;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_setActive (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  llrp_u1_t Value)
{
    pThis->Active = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateSystemStatus_beginCustom (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateSystemStatus_addCustom (
  LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogStateSystemStatus))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateSystemStatus_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogStateSystemStatus_encode (
  const LLRP_tSThingMagicIDSLogStateSystemStatus *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->MeasurementAddressPointer,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_MeasurementAddressPointer);

    pOps->pfPut_u8(pEncoderStream,
        pThis->NumMemReplacements,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMemReplacements);

    pOps->pfPut_u16(pEncoderStream,
        pThis->NumMeasurements,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_NumMeasurements);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Active,
        &LLRP_fdThingMagicIDSLogStateSystemStatus_Active);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogStateSystemStatus_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogStateStatusFlag
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogStateStatusFlag =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSLogStateStatusFlag",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    83,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSLogStateStatusFlag,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSLogStateStatusFlag),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogStateStatusFlag_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogStateStatusFlag_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogStateStatusFlag_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogStateStatusFlag_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogStateStatusFlag_encode,

  
    LLRP_ThingMagicIDSLogStateStatusFlag_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogStateStatusFlag[] =
{
  
    &LLRP_fdThingMagicIDSLogStateStatusFlag_Active,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_Full,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh,
    &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_Active =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Active",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_Full =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Full",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Overwritten",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ADError =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ADError",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LowBattery",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ShelfLifeLow",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ShelfLifeHigh",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ShelfLifeExpired",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSLogStateStatusFlag *
LLRP_ThingMagicIDSLogStateStatusFlag_construct (void)
{
    LLRP_tSThingMagicIDSLogStateStatusFlag *pNew;

    pNew = (LLRP_tSThingMagicIDSLogStateStatusFlag *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogStateStatusFlag);

    return pNew;
}

void
LLRP_ThingMagicIDSLogStateStatusFlag_destruct (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogStateStatusFlag_decodeFields (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Active =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_Active);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_Active);
    }
    
    if(NULL != pThis)
    {
        pThis->Full =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_Full);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_Full);
    }
    
    if(NULL != pThis)
    {
        pThis->Overwritten =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten);
    }
    
    if(NULL != pThis)
    {
        pThis->ADError =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError);
    }
    
    if(NULL != pThis)
    {
        pThis->LowBattery =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery);
    }
    
    if(NULL != pThis)
    {
        pThis->ShelfLifeLow =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow);
    }
    
    if(NULL != pThis)
    {
        pThis->ShelfLifeHigh =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh);
    }
    
    if(NULL != pThis)
    {
        pThis->ShelfLifeExpired =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired);
    }
    
}

void
LLRP_ThingMagicIDSLogStateStatusFlag_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogStateStatusFlag))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getActive (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->Active;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setActive (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->Active = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getFull (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->Full;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setFull (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->Full = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getOverwritten (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->Overwritten;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setOverwritten (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->Overwritten = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getADError (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ADError;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setADError (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ADError = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getLowBattery (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->LowBattery;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setLowBattery (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->LowBattery = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getShelfLifeLow (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ShelfLifeLow;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setShelfLifeLow (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ShelfLifeLow = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getShelfLifeHigh (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ShelfLifeHigh;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setShelfLifeHigh (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ShelfLifeHigh = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogStateStatusFlag_getShelfLifeExpired (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->ShelfLifeExpired;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_setShelfLifeExpired (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  llrp_u1_t Value)
{
    pThis->ShelfLifeExpired = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateStatusFlag_beginCustom (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogStateStatusFlag_addCustom (
  LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogStateStatusFlag))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogStateStatusFlag_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogStateStatusFlag_encode (
  const LLRP_tSThingMagicIDSLogStateStatusFlag *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->Active,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_Active);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Full,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_Full);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Overwritten,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_Overwritten);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ADError,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ADError);

    pOps->pfPut_u1(pEncoderStream,
        pThis->LowBattery,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_LowBattery);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ShelfLifeLow,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeLow);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ShelfLifeHigh,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeHigh);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ShelfLifeExpired,
        &LLRP_fdThingMagicIDSLogStateStatusFlag_ShelfLifeExpired);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogStateStatusFlag_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogMode =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetLogMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    84,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetLogMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetLogMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogMode_encode,

  
    LLRP_ThingMagicIDSSL900ASetLogMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogMode[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable,
    &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LoggingForm",	// .pName
    LLRP_estThingMagicCustomIDSLoggingForm,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "StorageRule",	// .pName
    LLRP_estThingMagicCustomIDSStorageRule,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Ext1Enable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Ext2Enable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TempEnable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "BattEnable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LogInterval",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASetLogMode *
LLRP_ThingMagicIDSSL900ASetLogMode_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogMode *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogMode);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogMode_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogMode_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eLoggingForm =
                (LLRP_tEThingMagicCustomIDSLoggingForm) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm);
    }

    if(NULL != pThis)
    {
        pThis->eStorageRule =
                (LLRP_tEThingMagicCustomIDSStorageRule) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule);
    }

    if(NULL != pThis)
    {
        pThis->Ext1Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext2Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->TempEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable);
    }
    
    if(NULL != pThis)
    {
        pThis->BattEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 4);

    if(NULL != pThis)
    {
        pThis->LogInterval =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetLogMode_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomIDSLoggingForm
LLRP_ThingMagicIDSSL900ASetLogMode_getLoggingForm (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->eLoggingForm;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setLoggingForm (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tEThingMagicCustomIDSLoggingForm eValue)
{
    pThis->eLoggingForm = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSStorageRule
LLRP_ThingMagicIDSSL900ASetLogMode_getStorageRule (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->eStorageRule;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setStorageRule (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tEThingMagicCustomIDSStorageRule eValue)
{
    pThis->eStorageRule = eValue;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getExt1Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->Ext1Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setExt1Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext1Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getExt2Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->Ext2Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setExt2Enable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext2Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getTempEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->TempEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setTempEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->TempEnable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900ASetLogMode_getBattEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->BattEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setBattEnable (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->BattEnable = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetLogMode_getLogInterval (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->LogInterval;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setLogInterval (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  llrp_u16_t Value)
{
    pThis->LogInterval = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetLogMode_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogMode_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogMode_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogMode_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eLoggingForm,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_LoggingForm);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eStorageRule,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_StorageRule);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext1Enable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext1Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext2Enable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_Ext2Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TempEnable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_TempEnable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->BattEnable,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_BattEnable);

    pOps->pfPut_reserved(pEncoderStream, 4);

    pOps->pfPut_u16(pEncoderStream,
        pThis->LogInterval,
        &LLRP_fdThingMagicIDSSL900ASetLogMode_LogInterval);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogModeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetLogModeOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    85,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetLogModeOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogModeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogModeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetLogModeOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogModeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AStartLog
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AStartLog =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AStartLog",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    86,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AStartLog,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AStartLog),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AStartLog_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AStartLog_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AStartLog_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AStartLog_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AStartLog_encode,

  
    LLRP_ThingMagicIDSSL900AStartLog_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AStartLog[] =
{
  
    &LLRP_fdThingMagicIDSSL900AStartLog_StartTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AStartLog_StartTime =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "StartTime",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AStartLog *
LLRP_ThingMagicIDSSL900AStartLog_construct (void)
{
    LLRP_tSThingMagicIDSSL900AStartLog *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AStartLog *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AStartLog);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AStartLog_destruct (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AStartLog_decodeFields (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->StartTime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AStartLog_StartTime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AStartLog_StartTime);
    }
    
}

void
LLRP_ThingMagicIDSSL900AStartLog_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AStartLog))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicIDSSL900AStartLog_getStartTime (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
    return pThis->StartTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLog_setStartTime (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  llrp_u32_t Value)
{
    pThis->StartTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AStartLog_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLog_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLog_beginCustom (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLog_addCustom (
  LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AStartLog))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLog_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AStartLog_encode (
  const LLRP_tSThingMagicIDSSL900AStartLog *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->StartTime,
        &LLRP_fdThingMagicIDSSL900AStartLog_StartTime);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AStartLog_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AStartLogOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AStartLogOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    87,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AStartLogOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AStartLogOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AStartLogOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AStartLogOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AStartLogOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AEndLog
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AEndLog =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AEndLog",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    88,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AEndLog,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AEndLog),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AEndLog_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AEndLog_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AEndLog_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AEndLog_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AEndLog_encode,

  
    LLRP_ThingMagicIDSSL900AEndLog_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AEndLog[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AEndLog *
LLRP_ThingMagicIDSSL900AEndLog_construct (void)
{
    LLRP_tSThingMagicIDSSL900AEndLog *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AEndLog *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AEndLog);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AEndLog_destruct (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AEndLog_decodeFields (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AEndLog_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AEndLog))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AEndLog_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLog_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLog_beginCustom (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLog_addCustom (
  LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AEndLog))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLog_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AEndLog_encode (
  const LLRP_tSThingMagicIDSSL900AEndLog *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AEndLog_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AEndLogOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AEndLogOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    89,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AEndLogOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AEndLogOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AEndLogOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AEndLogOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AEndLogOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AInitialize
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AInitialize =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AInitialize",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    90,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AInitialize,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AInitialize),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AInitialize_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AInitialize_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AInitialize_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AInitialize_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AInitialize_encode,

  
    LLRP_ThingMagicIDSSL900AInitialize_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AInitialize[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AInitialize *
LLRP_ThingMagicIDSSL900AInitialize_construct (void)
{
    LLRP_tSThingMagicIDSSL900AInitialize *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AInitialize *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AInitialize);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AInitialize_destruct (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AInitialize_decodeFields (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AInitialize_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSDelayTime
    pType = &LLRP_tdThingMagicIDSDelayTime;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSDelayTime = (LLRP_tSThingMagicIDSDelayTime *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSApplicationData
    pType = &LLRP_tdThingMagicIDSApplicationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSApplicationData = (LLRP_tSThingMagicIDSApplicationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AInitialize))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AInitialize_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSDelayTime *
LLRP_ThingMagicIDSSL900AInitialize_getThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->pThingMagicIDSDelayTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_setThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSThingMagicIDSDelayTime * pValue)
{
    SUBPARAM_SET(pThingMagicIDSDelayTime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSApplicationData *
LLRP_ThingMagicIDSSL900AInitialize_getThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->pThingMagicIDSApplicationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_setThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSThingMagicIDSApplicationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSApplicationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitialize_beginCustom (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitialize_addCustom (
  LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AInitialize))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitialize_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AInitialize_encode (
  const LLRP_tSThingMagicIDSSL900AInitialize *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSDelayTime;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSDelayTime,
        pType);
      
    pType = &LLRP_tdThingMagicIDSApplicationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSApplicationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AInitialize_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AInitializeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AInitializeOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    91,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AInitializeOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AInitializeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AInitializeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AInitializeOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AInitializeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetMeasurementSetup
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetMeasurementSetup =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AGetMeasurementSetup",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    92,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AGetMeasurementSetup,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AGetMeasurementSetup),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetMeasurementSetup_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetMeasurementSetup_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetup_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetup_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetup_encode,

  
    LLRP_ThingMagicIDSSL900AGetMeasurementSetup_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetMeasurementSetup[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetMeasurementSetup);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_destruct (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetup))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_addCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetup))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_encode (
  const LLRP_tSThingMagicIDSSL900AGetMeasurementSetup *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetup_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    93,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval,
    &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "logInterval",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "measurementByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->measurementByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->logInterval =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval);
    }
    
    if(NULL != pThis)
    {
        pThis->measurementByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSStartTime
    pType = &LLRP_tdThingMagicIDSStartTime;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSStartTime = (LLRP_tSThingMagicIDSStartTime *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogLimits
    pType = &LLRP_tdThingMagicIDSLogLimits;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogLimits = (LLRP_tSThingMagicIDSLogLimits *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogMode
    pType = &LLRP_tdThingMagicIDSLogMode;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogMode = (LLRP_tSThingMagicIDSLogMode *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSDelayTime
    pType = &LLRP_tdThingMagicIDSDelayTime;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSDelayTime = (LLRP_tSThingMagicIDSDelayTime *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSApplicationData
    pType = &LLRP_tdThingMagicIDSApplicationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSApplicationData = (LLRP_tSThingMagicIDSApplicationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getlogInterval (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->logInterval;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setlogInterval (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->logInterval = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getmeasurementByteStream (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->measurementByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setmeasurementByteStream (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->measurementByteStream);

    pThis->measurementByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSStartTime *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSStartTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSStartTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSStartTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSStartTime * pValue)
{
    SUBPARAM_SET(pThingMagicIDSStartTime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogLimits *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSLogLimits;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSLogLimits * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogLimits, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogMode *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSLogMode (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSLogMode;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSLogMode (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSLogMode * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSDelayTime *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSDelayTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSDelayTime (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSDelayTime * pValue)
{
    SUBPARAM_SET(pThingMagicIDSDelayTime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSApplicationData *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_getThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSApplicationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_setThingMagicIDSApplicationData (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSThingMagicIDSApplicationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSApplicationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AGetMeasurementSetupOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_OpSpecID);

    pOps->pfPut_u16(pEncoderStream,
        pThis->logInterval,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_logInterval);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->measurementByteStream,
        &LLRP_fdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_measurementByteStream);

    pType = &LLRP_tdThingMagicIDSStartTime;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSStartTime,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogLimits;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogLimits,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogMode;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogMode,
        pType);
      
    pType = &LLRP_tdThingMagicIDSDelayTime;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSDelayTime,
        pType);
      
    pType = &LLRP_tdThingMagicIDSApplicationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSApplicationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetMeasurementSetupOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetCalibrationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetCalibrationData =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AGetCalibrationData",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    94,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AGetCalibrationData,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AGetCalibrationData),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetCalibrationData_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetCalibrationData_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationData_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetCalibrationData_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationData_encode,

  
    LLRP_ThingMagicIDSSL900AGetCalibrationData_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetCalibrationData[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AGetCalibrationData *
LLRP_ThingMagicIDSSL900AGetCalibrationData_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetCalibrationData *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetCalibrationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetCalibrationData);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationData_destruct (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationData_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetCalibrationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetCalibrationData_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationData_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationData_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationData_addCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetCalibrationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetCalibrationData_encode (
  const LLRP_tSThingMagicIDSSL900AGetCalibrationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetCalibrationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetCalibrationDataOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AGetCalibrationDataOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    95,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AGetCalibrationDataOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetCalibrationDataOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSCalibrationData
    pType = &LLRP_tdThingMagicIDSCalibrationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSCalibrationData = (LLRP_tSThingMagicIDSCalibrationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSCalibrationData *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_getThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSCalibrationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_setThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSThingMagicIDSCalibrationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSCalibrationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AGetCalibrationDataOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AGetCalibrationDataOpSpecResult_OpSpecID);

    pType = &LLRP_tdThingMagicIDSCalibrationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSCalibrationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetCalibrationDataOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetCalibrationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetCalibrationData =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetCalibrationData",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    96,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetCalibrationData,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetCalibrationData),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetCalibrationData_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetCalibrationData_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationData_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetCalibrationData_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationData_encode,

  
    LLRP_ThingMagicIDSSL900ASetCalibrationData_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetCalibrationData[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900ASetCalibrationData *
LLRP_ThingMagicIDSSL900ASetCalibrationData_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetCalibrationData *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetCalibrationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetCalibrationData);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationData_destruct (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationData_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSCalibrationData
    pType = &LLRP_tdThingMagicIDSCalibrationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSCalibrationData = (LLRP_tSThingMagicIDSCalibrationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetCalibrationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetCalibrationData_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationData_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSCalibrationData *
LLRP_ThingMagicIDSSL900ASetCalibrationData_getThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
    return pThis->pThingMagicIDSCalibrationData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationData_setThingMagicIDSCalibrationData (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSThingMagicIDSCalibrationData * pValue)
{
    SUBPARAM_SET(pThingMagicIDSCalibrationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationData_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationData_addCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetCalibrationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetCalibrationData_encode (
  const LLRP_tSThingMagicIDSSL900ASetCalibrationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSCalibrationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSCalibrationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetCalibrationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetCalibrationDataOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetCalibrationDataOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    97,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetCalibrationDataOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetCalibrationDataOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetCalibrationDataOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetCalibrationDataOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetCalibrationDataOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetSFEParams
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetSFEParams =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetSFEParams",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    98,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetSFEParams,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetSFEParams),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetSFEParams_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetSFEParams_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParams_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetSFEParams_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParams_encode,

  
    LLRP_ThingMagicIDSSL900ASetSFEParams_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetSFEParams[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900ASetSFEParams *
LLRP_ThingMagicIDSSL900ASetSFEParams_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetSFEParams *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetSFEParams *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetSFEParams);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetSFEParams_destruct (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetSFEParams_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900ASetSFEParams_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSSFEParam
    pType = &LLRP_tdThingMagicIDSSFEParam;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSFEParam = (LLRP_tSThingMagicIDSSFEParam *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetSFEParams))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetSFEParams_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParams_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSFEParam *
LLRP_ThingMagicIDSSL900ASetSFEParams_getThingMagicIDSSFEParam (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
    return pThis->pThingMagicIDSSFEParam;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParams_setThingMagicIDSSFEParam (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSThingMagicIDSSFEParam * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSFEParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParams_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParams_addCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetSFEParams))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParams_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetSFEParams_encode (
  const LLRP_tSThingMagicIDSSL900ASetSFEParams *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSFEParam;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSFEParam,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetSFEParams_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetSFEParamsOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetSFEParamsOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    99,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetSFEParamsOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetSFEParamsOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetSFEParamsOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetSFEParamsOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetSFEParamsOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOStatus
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOStatus =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AAccessFIFOStatus",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    100,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AAccessFIFOStatus,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOStatus),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOStatus_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOStatus_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatus_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatus_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatus_encode,

  
    LLRP_ThingMagicIDSSL900AAccessFIFOStatus_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOStatus[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOStatus);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatus))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatus))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOStatus *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatus_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    101,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "FIFOStatusBusy",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "FIFOStatusDataReady",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "FIFOStatusNoData",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "numValidBytes",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "FIFOSource",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "FIFOStatusRawByte",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOStatusBusy =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOStatusDataReady =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOStatusNoData =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 5);

    if(NULL != pThis)
    {
        pThis->numValidBytes =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes);
    }
    
    if(NULL != pThis)
    {
        pThis->FIFOSource =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->FIFOStatusRawByte =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusBusy (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusBusy;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusBusy (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOStatusBusy = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusDataReady (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusDataReady;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusDataReady (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOStatusDataReady = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusNoData (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusNoData;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusNoData (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOStatusNoData = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getnumValidBytes (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->numValidBytes;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setnumValidBytes (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u8_t Value)
{
    pThis->numValidBytes = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOSource (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOSource;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOSource (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u1_t Value)
{
    pThis->FIFOSource = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_getFIFOStatusRawByte (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->FIFOStatusRawByte;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_setFIFOStatusRawByte (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  llrp_u8_t Value)
{
    pThis->FIFOStatusRawByte = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOStatusOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_OpSpecID);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOStatusBusy,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusBusy);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOStatusDataReady,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusDataReady);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOStatusNoData,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusNoData);

    pOps->pfPut_reserved(pEncoderStream, 5);

    pOps->pfPut_u8(pEncoderStream,
        pThis->numValidBytes,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_numValidBytes);

    pOps->pfPut_u1(pEncoderStream,
        pThis->FIFOSource,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOSource);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->FIFOStatusRawByte,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_FIFOStatusRawByte);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOStatusOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetBatteryLevel
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetBatteryLevel =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AGetBatteryLevel",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    102,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AGetBatteryLevel,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AGetBatteryLevel),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetBatteryLevel_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetBatteryLevel_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevel_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevel_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevel_encode,

  
    LLRP_ThingMagicIDSSL900AGetBatteryLevel_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetBatteryLevel[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "BatteryTrigger",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AGetBatteryLevel *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetBatteryLevel *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetBatteryLevel);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_destruct (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->BatteryTrigger =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetBatteryLevel))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSSL900AGetBatteryLevel_getBatteryTrigger (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
    return pThis->BatteryTrigger;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevel_setBatteryTrigger (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  llrp_u8_t Value)
{
    pThis->BatteryTrigger = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevel_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevel_addCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetBatteryLevel))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevel_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetBatteryLevel_encode (
  const LLRP_tSThingMagicIDSSL900AGetBatteryLevel *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->BatteryTrigger,
        &LLRP_fdThingMagicIDSSL900AGetBatteryLevel_BatteryTrigger);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetBatteryLevel_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AGetBatteryLevelOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AGetBatteryLevelOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    103,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AGetBatteryLevelOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AGetBatteryLevelOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSBatteryLevel
    pType = &LLRP_tdThingMagicIDSBatteryLevel;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSBatteryLevel = (LLRP_tSThingMagicIDSBatteryLevel *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSBatteryLevel *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_getThingMagicIDSBatteryLevel (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->pThingMagicIDSBatteryLevel;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_setThingMagicIDSBatteryLevel (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSThingMagicIDSBatteryLevel * pValue)
{
    SUBPARAM_SET(pThingMagicIDSBatteryLevel, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AGetBatteryLevelOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AGetBatteryLevelOpSpecResult_OpSpecID);

    pType = &LLRP_tdThingMagicIDSBatteryLevel;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSBatteryLevel,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AGetBatteryLevelOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSDelayTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSDelayTime =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSDelayTime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    104,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSDelayTime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSDelayTime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSDelayTime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSDelayTime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSDelayTime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSDelayTime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSDelayTime_encode,

  
    LLRP_ThingMagicIDSDelayTime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSDelayTime[] =
{
  
    &LLRP_fdThingMagicIDSDelayTime_delayMode,
    &LLRP_fdThingMagicIDSDelayTime_delayTime,
    &LLRP_fdThingMagicIDSDelayTime_timerEnable,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSDelayTime_delayMode =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "delayMode",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSDelayTime_delayTime =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "delayTime",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSDelayTime_timerEnable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "timerEnable",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSDelayTime *
LLRP_ThingMagicIDSDelayTime_construct (void)
{
    LLRP_tSThingMagicIDSDelayTime *pNew;

    pNew = (LLRP_tSThingMagicIDSDelayTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSDelayTime);

    return pNew;
}

void
LLRP_ThingMagicIDSDelayTime_destruct (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSDelayTime_decodeFields (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->delayMode =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSDelayTime_delayMode);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSDelayTime_delayMode);
    }
    
    if(NULL != pThis)
    {
        pThis->delayTime =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSDelayTime_delayTime);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSDelayTime_delayTime);
    }
    
    if(NULL != pThis)
    {
        pThis->timerEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSDelayTime_timerEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSDelayTime_timerEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicIDSDelayTime_assimilateSubParameters (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSDelayTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSDelayTime_getdelayMode (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->delayMode;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_setdelayMode (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  llrp_u8_t Value)
{
    pThis->delayMode = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSDelayTime_getdelayTime (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->delayTime;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_setdelayTime (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  llrp_u16_t Value)
{
    pThis->delayTime = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSDelayTime_gettimerEnable (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->timerEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_settimerEnable (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  llrp_u1_t Value)
{
    pThis->timerEnable = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSDelayTime_beginCustom (
  LLRP_tSThingMagicIDSDelayTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSDelayTime_addCustom (
  LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSDelayTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSDelayTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSDelayTime_encode (
  const LLRP_tSThingMagicIDSDelayTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->delayMode,
        &LLRP_fdThingMagicIDSDelayTime_delayMode);

    pOps->pfPut_u16(pEncoderStream,
        pThis->delayTime,
        &LLRP_fdThingMagicIDSDelayTime_delayTime);

    pOps->pfPut_u1(pEncoderStream,
        pThis->timerEnable,
        &LLRP_fdThingMagicIDSDelayTime_timerEnable);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSDelayTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSApplicationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSApplicationData =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSApplicationData",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    105,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSApplicationData,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSApplicationData),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSApplicationData_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSApplicationData_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSApplicationData_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSApplicationData_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSApplicationData_encode,

  
    LLRP_ThingMagicIDSApplicationData_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSApplicationData[] =
{
  
    &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer,
    &LLRP_fdThingMagicIDSApplicationData_numberOfWords,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSApplicationData_brokenWordPointer =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "brokenWordPointer",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSApplicationData_numberOfWords =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "numberOfWords",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSApplicationData *
LLRP_ThingMagicIDSApplicationData_construct (void)
{
    LLRP_tSThingMagicIDSApplicationData *pNew;

    pNew = (LLRP_tSThingMagicIDSApplicationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSApplicationData);

    return pNew;
}

void
LLRP_ThingMagicIDSApplicationData_destruct (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSApplicationData_decodeFields (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->brokenWordPointer =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer);
    }
    
    if(NULL != pThis)
    {
        pThis->numberOfWords =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSApplicationData_numberOfWords);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSApplicationData_numberOfWords);
    }
    
}

void
LLRP_ThingMagicIDSApplicationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSApplicationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSApplicationData_getbrokenWordPointer (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
    return pThis->brokenWordPointer;
}

LLRP_tResultCode
LLRP_ThingMagicIDSApplicationData_setbrokenWordPointer (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  llrp_u8_t Value)
{
    pThis->brokenWordPointer = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSApplicationData_getnumberOfWords (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
    return pThis->numberOfWords;
}

LLRP_tResultCode
LLRP_ThingMagicIDSApplicationData_setnumberOfWords (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  llrp_u16_t Value)
{
    pThis->numberOfWords = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSApplicationData_beginCustom (
  LLRP_tSThingMagicIDSApplicationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSApplicationData_addCustom (
  LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSApplicationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSApplicationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSApplicationData_encode (
  const LLRP_tSThingMagicIDSApplicationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->brokenWordPointer,
        &LLRP_fdThingMagicIDSApplicationData_brokenWordPointer);

    pOps->pfPut_u16(pEncoderStream,
        pThis->numberOfWords,
        &LLRP_fdThingMagicIDSApplicationData_numberOfWords);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSApplicationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogMode =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSLogMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    106,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSLogMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSLogMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogMode_encode,

  
    LLRP_ThingMagicIDSLogMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogMode[] =
{
  
    &LLRP_fdThingMagicIDSLogMode_Ext1Enable,
    &LLRP_fdThingMagicIDSLogMode_Ext2Enable,
    &LLRP_fdThingMagicIDSLogMode_TempEnable,
    &LLRP_fdThingMagicIDSLogMode_BattEnable,
    &LLRP_fdThingMagicIDSLogMode_StorageRule,
    &LLRP_fdThingMagicIDSLogMode_LoggingForm,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_Ext1Enable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Ext1Enable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_Ext2Enable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Ext2Enable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_TempEnable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TempEnable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_BattEnable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "BattEnable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_StorageRule =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "StorageRule",	// .pName
    LLRP_estThingMagicCustomIDSStorageRule,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogMode_LoggingForm =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LoggingForm",	// .pName
    LLRP_estThingMagicCustomIDSLoggingForm,	// .pEnumTable
};

LLRP_tSThingMagicIDSLogMode *
LLRP_ThingMagicIDSLogMode_construct (void)
{
    LLRP_tSThingMagicIDSLogMode *pNew;

    pNew = (LLRP_tSThingMagicIDSLogMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogMode);

    return pNew;
}

void
LLRP_ThingMagicIDSLogMode_destruct (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogMode_decodeFields (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Ext1Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_Ext1Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_Ext1Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext2Enable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_Ext2Enable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_Ext2Enable);
    }
    
    if(NULL != pThis)
    {
        pThis->TempEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_TempEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_TempEnable);
    }
    
    if(NULL != pThis)
    {
        pThis->BattEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_BattEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_BattEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 4);

    if(NULL != pThis)
    {
        pThis->eStorageRule =
                (LLRP_tEThingMagicCustomIDSStorageRule) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_StorageRule);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_StorageRule);
    }

    if(NULL != pThis)
    {
        pThis->eLoggingForm =
                (LLRP_tEThingMagicCustomIDSLoggingForm) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogMode_LoggingForm);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSLogMode_LoggingForm);
    }

}

void
LLRP_ThingMagicIDSLogMode_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicIDSLogMode_getExt1Enable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->Ext1Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setExt1Enable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext1Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogMode_getExt2Enable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->Ext2Enable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setExt2Enable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->Ext2Enable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogMode_getTempEnable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->TempEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setTempEnable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->TempEnable = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSLogMode_getBattEnable (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->BattEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setBattEnable (
  LLRP_tSThingMagicIDSLogMode *pThis,
  llrp_u1_t Value)
{
    pThis->BattEnable = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSStorageRule
LLRP_ThingMagicIDSLogMode_getStorageRule (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->eStorageRule;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setStorageRule (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tEThingMagicCustomIDSStorageRule eValue)
{
    pThis->eStorageRule = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSLoggingForm
LLRP_ThingMagicIDSLogMode_getLoggingForm (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->eLoggingForm;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_setLoggingForm (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tEThingMagicCustomIDSLoggingForm eValue)
{
    pThis->eLoggingForm = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogMode_beginCustom (
  LLRP_tSThingMagicIDSLogMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogMode_addCustom (
  LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogMode_encode (
  const LLRP_tSThingMagicIDSLogMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext1Enable,
        &LLRP_fdThingMagicIDSLogMode_Ext1Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Ext2Enable,
        &LLRP_fdThingMagicIDSLogMode_Ext2Enable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->TempEnable,
        &LLRP_fdThingMagicIDSLogMode_TempEnable);

    pOps->pfPut_u1(pEncoderStream,
        pThis->BattEnable,
        &LLRP_fdThingMagicIDSLogMode_BattEnable);

    pOps->pfPut_reserved(pEncoderStream, 4);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eStorageRule,
        &LLRP_fdThingMagicIDSLogMode_StorageRule);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eLoggingForm,
        &LLRP_fdThingMagicIDSLogMode_LoggingForm);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSLogLimits
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSLogLimits =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSLogLimits",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    107,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSLogLimits,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSLogLimits),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSLogLimits_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSLogLimits_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSLogLimits_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSLogLimits_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSLogLimits_encode,

  
    LLRP_ThingMagicIDSLogLimits_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSLogLimits[] =
{
  
    &LLRP_fdThingMagicIDSLogLimits_extremeLower,
    &LLRP_fdThingMagicIDSLogLimits_lower,
    &LLRP_fdThingMagicIDSLogLimits_upper,
    &LLRP_fdThingMagicIDSLogLimits_extremeUpper,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_extremeLower =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "extremeLower",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_lower =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "lower",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_upper =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "upper",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSLogLimits_extremeUpper =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "extremeUpper",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSLogLimits *
LLRP_ThingMagicIDSLogLimits_construct (void)
{
    LLRP_tSThingMagicIDSLogLimits *pNew;

    pNew = (LLRP_tSThingMagicIDSLogLimits *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSLogLimits);

    return pNew;
}

void
LLRP_ThingMagicIDSLogLimits_destruct (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSLogLimits_decodeFields (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->extremeLower =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_extremeLower);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_extremeLower);
    }
    
    if(NULL != pThis)
    {
        pThis->lower =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_lower);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_lower);
    }
    
    if(NULL != pThis)
    {
        pThis->upper =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_upper);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_upper);
    }
    
    if(NULL != pThis)
    {
        pThis->extremeUpper =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSLogLimits_extremeUpper);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSLogLimits_extremeUpper);
    }
    
}

void
LLRP_ThingMagicIDSLogLimits_assimilateSubParameters (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSLogLimits))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getextremeLower (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->extremeLower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setextremeLower (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->extremeLower = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getlower (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->lower;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setlower (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->lower = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getupper (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->upper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setupper (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->upper = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSLogLimits_getextremeUpper (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->extremeUpper;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_setextremeUpper (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  llrp_u16_t Value)
{
    pThis->extremeUpper = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSLogLimits_beginCustom (
  LLRP_tSThingMagicIDSLogLimits *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSLogLimits_addCustom (
  LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSLogLimits))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSLogLimits_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSLogLimits_encode (
  const LLRP_tSThingMagicIDSLogLimits *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->extremeLower,
        &LLRP_fdThingMagicIDSLogLimits_extremeLower);

    pOps->pfPut_u16(pEncoderStream,
        pThis->lower,
        &LLRP_fdThingMagicIDSLogLimits_lower);

    pOps->pfPut_u16(pEncoderStream,
        pThis->upper,
        &LLRP_fdThingMagicIDSLogLimits_upper);

    pOps->pfPut_u16(pEncoderStream,
        pThis->extremeUpper,
        &LLRP_fdThingMagicIDSLogLimits_extremeUpper);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSLogLimits_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSStartTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSStartTime =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSStartTime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    108,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSStartTime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSStartTime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSStartTime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSStartTime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSStartTime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSStartTime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSStartTime_encode,

  
    LLRP_ThingMagicIDSStartTime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSStartTime[] =
{
  
    &LLRP_fdThingMagicIDSStartTime_seconds,
    &LLRP_fdThingMagicIDSStartTime_minutes,
    &LLRP_fdThingMagicIDSStartTime_hours,
    &LLRP_fdThingMagicIDSStartTime_day,
    &LLRP_fdThingMagicIDSStartTime_month,
    &LLRP_fdThingMagicIDSStartTime_year,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_seconds =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "seconds",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_minutes =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "minutes",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_hours =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "hours",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_day =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "day",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_month =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "month",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSStartTime_year =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "year",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSStartTime *
LLRP_ThingMagicIDSStartTime_construct (void)
{
    LLRP_tSThingMagicIDSStartTime *pNew;

    pNew = (LLRP_tSThingMagicIDSStartTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSStartTime);

    return pNew;
}

void
LLRP_ThingMagicIDSStartTime_destruct (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSStartTime_decodeFields (
  LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->seconds =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_seconds);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_seconds);
    }
    
    if(NULL != pThis)
    {
        pThis->minutes =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_minutes);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_minutes);
    }
    
    if(NULL != pThis)
    {
        pThis->hours =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_hours);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_hours);
    }
    
    if(NULL != pThis)
    {
        pThis->day =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_day);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_day);
    }
    
    if(NULL != pThis)
    {
        pThis->month =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_month);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_month);
    }
    
    if(NULL != pThis)
    {
        pThis->year =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSStartTime_year);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSStartTime_year);
    }
    
}

void
LLRP_ThingMagicIDSStartTime_assimilateSubParameters (
  LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSStartTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSStartTime_getseconds (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->seconds;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setseconds (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->seconds = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getminutes (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->minutes;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setminutes (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->minutes = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_gethours (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->hours;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_sethours (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->hours = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getday (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->day;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setday (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->day = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getmonth (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->month;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setmonth (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->month = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSStartTime_getyear (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->year;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_setyear (
  LLRP_tSThingMagicIDSStartTime *pThis,
  llrp_u8_t Value)
{
    pThis->year = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSStartTime_beginCustom (
  LLRP_tSThingMagicIDSStartTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSStartTime_addCustom (
  LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSStartTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSStartTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSStartTime_encode (
  const LLRP_tSThingMagicIDSStartTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->seconds,
        &LLRP_fdThingMagicIDSStartTime_seconds);

    pOps->pfPut_u8(pEncoderStream,
        pThis->minutes,
        &LLRP_fdThingMagicIDSStartTime_minutes);

    pOps->pfPut_u8(pEncoderStream,
        pThis->hours,
        &LLRP_fdThingMagicIDSStartTime_hours);

    pOps->pfPut_u8(pEncoderStream,
        pThis->day,
        &LLRP_fdThingMagicIDSStartTime_day);

    pOps->pfPut_u8(pEncoderStream,
        pThis->month,
        &LLRP_fdThingMagicIDSStartTime_month);

    pOps->pfPut_u8(pEncoderStream,
        pThis->year,
        &LLRP_fdThingMagicIDSStartTime_year);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSStartTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSFEParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSFEParam =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSFEParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    109,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSFEParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSFEParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSFEParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSFEParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSFEParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSFEParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSFEParam_encode,

  
    LLRP_ThingMagicIDSSFEParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSFEParam[] =
{
  
    &LLRP_fdThingMagicIDSSFEParam_raw,
    &LLRP_fdThingMagicIDSSFEParam_range,
    &LLRP_fdThingMagicIDSSFEParam_seti,
    &LLRP_fdThingMagicIDSSFEParam_Ext1,
    &LLRP_fdThingMagicIDSSFEParam_Ext2,
    &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable,
    &LLRP_fdThingMagicIDSSFEParam_VerifySensorID,
    &LLRP_fdThingMagicIDSSFEParam_SFEType,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_raw =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "raw",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_range =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "range",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_seti =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "seti",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_Ext1 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Ext1",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_Ext2 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Ext2",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AutoRangeDisable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_VerifySensorID =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "VerifySensorID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSFEParam_SFEType =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "SFEType",	// .pName
    LLRP_estThingMagicCustomIDSSFEType,	// .pEnumTable
};

LLRP_tSThingMagicIDSSFEParam *
LLRP_ThingMagicIDSSFEParam_construct (void)
{
    LLRP_tSThingMagicIDSSFEParam *pNew;

    pNew = (LLRP_tSThingMagicIDSSFEParam *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSFEParam);

    return pNew;
}

void
LLRP_ThingMagicIDSSFEParam_destruct (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSFEParam_decodeFields (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_raw);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->range =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_range);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_range);
    }
    
    if(NULL != pThis)
    {
        pThis->seti =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_seti);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_seti);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext1 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_Ext1);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_Ext1);
    }
    
    if(NULL != pThis)
    {
        pThis->Ext2 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_Ext2);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_Ext2);
    }
    
    if(NULL != pThis)
    {
        pThis->AutoRangeDisable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->VerifySensorID =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_VerifySensorID);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_VerifySensorID);
    }
    
    if(NULL != pThis)
    {
        pThis->eSFEType =
                (LLRP_tEThingMagicCustomIDSSFEType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSFEParam_SFEType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSFEParam_SFEType);
    }

}

void
LLRP_ThingMagicIDSSFEParam_assimilateSubParameters (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSFEParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSSFEParam_getraw (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setraw (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u16_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getrange (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->range;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setrange (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->range = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getseti (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->seti;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setseti (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->seti = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getExt1 (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->Ext1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setExt1 (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->Ext1 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getExt2 (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->Ext2;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setExt2 (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->Ext2 = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSFEParam_getAutoRangeDisable (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->AutoRangeDisable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setAutoRangeDisable (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u1_t Value)
{
    pThis->AutoRangeDisable = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSFEParam_getVerifySensorID (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->VerifySensorID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setVerifySensorID (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  llrp_u8_t Value)
{
    pThis->VerifySensorID = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomIDSSFEType
LLRP_ThingMagicIDSSFEParam_getSFEType (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->eSFEType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_setSFEType (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tEThingMagicCustomIDSSFEType eValue)
{
    pThis->eSFEType = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSFEParam_beginCustom (
  LLRP_tSThingMagicIDSSFEParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSFEParam_addCustom (
  LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSFEParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSFEParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSFEParam_encode (
  const LLRP_tSThingMagicIDSSFEParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSFEParam_raw);

    pOps->pfPut_u8(pEncoderStream,
        pThis->range,
        &LLRP_fdThingMagicIDSSFEParam_range);

    pOps->pfPut_u8(pEncoderStream,
        pThis->seti,
        &LLRP_fdThingMagicIDSSFEParam_seti);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Ext1,
        &LLRP_fdThingMagicIDSSFEParam_Ext1);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Ext2,
        &LLRP_fdThingMagicIDSSFEParam_Ext2);

    pOps->pfPut_u1(pEncoderStream,
        pThis->AutoRangeDisable,
        &LLRP_fdThingMagicIDSSFEParam_AutoRangeDisable);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->VerifySensorID,
        &LLRP_fdThingMagicIDSSFEParam_VerifySensorID);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eSFEType,
        &LLRP_fdThingMagicIDSSFEParam_SFEType);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSFEParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSCalibrationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSCalibrationData =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSCalibrationData",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    110,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSCalibrationData,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSCalibrationData),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSCalibrationData_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSCalibrationData_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSCalibrationData_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSCalibrationData_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSCalibrationData_encode,

  
    LLRP_ThingMagicIDSCalibrationData_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSCalibrationData[] =
{
  
    &LLRP_fdThingMagicIDSCalibrationData_raw,
    &LLRP_fdThingMagicIDSCalibrationData_ad1,
    &LLRP_fdThingMagicIDSCalibrationData_coars1,
    &LLRP_fdThingMagicIDSCalibrationData_ad2,
    &LLRP_fdThingMagicIDSCalibrationData_coars2,
    &LLRP_fdThingMagicIDSCalibrationData_gndSwitch,
    &LLRP_fdThingMagicIDSCalibrationData_selp12,
    &LLRP_fdThingMagicIDSCalibrationData_adf,
    &LLRP_fdThingMagicIDSCalibrationData_df,
    &LLRP_fdThingMagicIDSCalibrationData_swExtEn,
    &LLRP_fdThingMagicIDSCalibrationData_selp22,
    &LLRP_fdThingMagicIDSCalibrationData_irlev,
    &LLRP_fdThingMagicIDSCalibrationData_ringCal,
    &LLRP_fdThingMagicIDSCalibrationData_offInt,
    &LLRP_fdThingMagicIDSCalibrationData_reftc,
    &LLRP_fdThingMagicIDSCalibrationData_excRes,
    &LLRP_fdThingMagicIDSCalibrationData_RFU,
    &LLRP_fdThingMagicIDSCalibrationData_CalibrationType,
    &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_raw =
{
    LLRP_FT_U64,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "raw",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_ad1 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ad1",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_coars1 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "coars1",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_ad2 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ad2",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_coars2 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "coars2",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_gndSwitch =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "gndSwitch",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_selp12 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "selp12",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_adf =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "adf",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_df =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "df",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_swExtEn =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "swExtEn",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_selp22 =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "selp22",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_irlev =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "irlev",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_ringCal =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ringCal",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_offInt =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "offInt",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_reftc =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "reftc",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_excRes =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "excRes",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_RFU =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "RFU",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_CalibrationType =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CalibrationType",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "calibrationValueByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSCalibrationData *
LLRP_ThingMagicIDSCalibrationData_construct (void)
{
    LLRP_tSThingMagicIDSCalibrationData *pNew;

    pNew = (LLRP_tSThingMagicIDSCalibrationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSCalibrationData);

    return pNew;
}

void
LLRP_ThingMagicIDSCalibrationData_destruct (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
  
    LLRP_u8v_clear(&pThis->calibrationValueByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSCalibrationData_decodeFields (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u64(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_raw);
    }
    else
    {
        pOps->pfGet_u64(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->ad1 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_ad1);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_ad1);
    }
    
    if(NULL != pThis)
    {
        pThis->coars1 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_coars1);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_coars1);
    }
    
    if(NULL != pThis)
    {
        pThis->ad2 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_ad2);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_ad2);
    }
    
    if(NULL != pThis)
    {
        pThis->coars2 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_coars2);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_coars2);
    }
    
    if(NULL != pThis)
    {
        pThis->gndSwitch =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_gndSwitch);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_gndSwitch);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->selp12 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_selp12);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_selp12);
    }
    
    if(NULL != pThis)
    {
        pThis->adf =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_adf);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_adf);
    }
    
    if(NULL != pThis)
    {
        pThis->df =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_df);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_df);
    }
    
    if(NULL != pThis)
    {
        pThis->swExtEn =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_swExtEn);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_swExtEn);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->selp22 =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_selp22);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_selp22);
    }
    
    if(NULL != pThis)
    {
        pThis->irlev =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_irlev);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_irlev);
    }
    
    if(NULL != pThis)
    {
        pThis->ringCal =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_ringCal);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_ringCal);
    }
    
    if(NULL != pThis)
    {
        pThis->offInt =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_offInt);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_offInt);
    }
    
    if(NULL != pThis)
    {
        pThis->reftc =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_reftc);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_reftc);
    }
    
    if(NULL != pThis)
    {
        pThis->excRes =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_excRes);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_excRes);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->RFU =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_RFU);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_RFU);
    }
    
    if(NULL != pThis)
    {
        pThis->CalibrationType =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_CalibrationType);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_CalibrationType);
    }
    
    if(NULL != pThis)
    {
        pThis->calibrationValueByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream);
    }
    
}

void
LLRP_ThingMagicIDSCalibrationData_assimilateSubParameters (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSCalibrationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u64_t
LLRP_ThingMagicIDSCalibrationData_getraw (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setraw (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u64_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getad1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->ad1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setad1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->ad1 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getcoars1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->coars1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setcoars1 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->coars1 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getad2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->ad2;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setad2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->ad2 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getcoars2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->coars2;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setcoars2 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->coars2 = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSCalibrationData_getgndSwitch (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->gndSwitch;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setgndSwitch (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u1_t Value)
{
    pThis->gndSwitch = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getselp12 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->selp12;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setselp12 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->selp12 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getadf (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->adf;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setadf (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->adf = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getdf (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->df;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setdf (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->df = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSCalibrationData_getswExtEn (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->swExtEn;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setswExtEn (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u1_t Value)
{
    pThis->swExtEn = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getselp22 (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->selp22;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setselp22 (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->selp22 = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getirlev (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->irlev;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setirlev (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->irlev = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getringCal (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->ringCal;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setringCal (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->ringCal = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getoffInt (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->offInt;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setoffInt (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->offInt = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getreftc (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->reftc;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setreftc (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->reftc = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSCalibrationData_getexcRes (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->excRes;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setexcRes (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u1_t Value)
{
    pThis->excRes = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getRFU (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->RFU;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setRFU (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->RFU = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSCalibrationData_getCalibrationType (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->CalibrationType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setCalibrationType (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8_t Value)
{
    pThis->CalibrationType = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSCalibrationData_getcalibrationValueByteStream (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->calibrationValueByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_setcalibrationValueByteStream (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->calibrationValueByteStream);

    pThis->calibrationValueByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSCalibrationData_beginCustom (
  LLRP_tSThingMagicIDSCalibrationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSCalibrationData_addCustom (
  LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSCalibrationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSCalibrationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSCalibrationData_encode (
  const LLRP_tSThingMagicIDSCalibrationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u64(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSCalibrationData_raw);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ad1,
        &LLRP_fdThingMagicIDSCalibrationData_ad1);

    pOps->pfPut_u8(pEncoderStream,
        pThis->coars1,
        &LLRP_fdThingMagicIDSCalibrationData_coars1);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ad2,
        &LLRP_fdThingMagicIDSCalibrationData_ad2);

    pOps->pfPut_u8(pEncoderStream,
        pThis->coars2,
        &LLRP_fdThingMagicIDSCalibrationData_coars2);

    pOps->pfPut_u1(pEncoderStream,
        pThis->gndSwitch,
        &LLRP_fdThingMagicIDSCalibrationData_gndSwitch);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->selp12,
        &LLRP_fdThingMagicIDSCalibrationData_selp12);

    pOps->pfPut_u8(pEncoderStream,
        pThis->adf,
        &LLRP_fdThingMagicIDSCalibrationData_adf);

    pOps->pfPut_u8(pEncoderStream,
        pThis->df,
        &LLRP_fdThingMagicIDSCalibrationData_df);

    pOps->pfPut_u1(pEncoderStream,
        pThis->swExtEn,
        &LLRP_fdThingMagicIDSCalibrationData_swExtEn);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->selp22,
        &LLRP_fdThingMagicIDSCalibrationData_selp22);

    pOps->pfPut_u8(pEncoderStream,
        pThis->irlev,
        &LLRP_fdThingMagicIDSCalibrationData_irlev);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ringCal,
        &LLRP_fdThingMagicIDSCalibrationData_ringCal);

    pOps->pfPut_u8(pEncoderStream,
        pThis->offInt,
        &LLRP_fdThingMagicIDSCalibrationData_offInt);

    pOps->pfPut_u8(pEncoderStream,
        pThis->reftc,
        &LLRP_fdThingMagicIDSCalibrationData_reftc);

    pOps->pfPut_u1(pEncoderStream,
        pThis->excRes,
        &LLRP_fdThingMagicIDSCalibrationData_excRes);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->RFU,
        &LLRP_fdThingMagicIDSCalibrationData_RFU);

    pOps->pfPut_u8(pEncoderStream,
        pThis->CalibrationType,
        &LLRP_fdThingMagicIDSCalibrationData_CalibrationType);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->calibrationValueByteStream,
        &LLRP_fdThingMagicIDSCalibrationData_calibrationValueByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSCalibrationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFORead
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFORead =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AAccessFIFORead",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    111,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AAccessFIFORead,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFORead),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFORead_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFORead_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFORead_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFORead_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFORead_encode,

  
    LLRP_ThingMagicIDSSL900AAccessFIFORead_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFORead[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "FIFOReadLength",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AAccessFIFORead *
LLRP_ThingMagicIDSSL900AAccessFIFORead_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFORead *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFORead *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFORead);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFORead_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFORead_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->FIFOReadLength =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFORead_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFORead))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicIDSSL900AAccessFIFORead_getFIFOReadLength (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
    return pThis->FIFOReadLength;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFORead_setFIFOReadLength (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  llrp_u8_t Value)
{
    pThis->FIFOReadLength = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AAccessFIFORead_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFORead_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFORead_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFORead_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFORead))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFORead_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFORead_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFORead *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->FIFOReadLength,
        &LLRP_fdThingMagicIDSSL900AAccessFIFORead_FIFOReadLength);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFORead_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOReadOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AAccessFIFOReadOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    112,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AAccessFIFOReadOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOReadOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "readPayLoad",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->readPayLoad);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->readPayLoad =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_getreadPayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->readPayLoad;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_setreadPayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->readPayLoad);

    pThis->readPayLoad = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOReadOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->readPayLoad,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOReadOpSpecResult_readPayLoad);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOReadOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOWrite
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOWrite =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AAccessFIFOWrite",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    113,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AAccessFIFOWrite,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOWrite),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOWrite_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOWrite_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWrite_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWrite_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWrite_encode,

  
    LLRP_ThingMagicIDSSL900AAccessFIFOWrite_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOWrite[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "writePayLoad",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOWrite);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
  
    LLRP_u8v_clear(&pThis->writePayLoad);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->writePayLoad =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOWrite))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_getwritePayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
    return pThis->writePayLoad;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_setwritePayLoad (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->writePayLoad);

    pThis->writePayLoad = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOWrite))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOWrite *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->writePayLoad,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOWrite_writePayLoad);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOWrite_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    114,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900AAccessFIFOWriteOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900AAccessFIFOWriteOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogLimits
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogLimits =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetLogLimits",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    115,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetLogLimits,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetLogLimits),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogLimits_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogLimits_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimits_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogLimits_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimits_encode,

  
    LLRP_ThingMagicIDSSL900ASetLogLimits_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogLimits[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSL900ASetLogLimits *
LLRP_ThingMagicIDSSL900ASetLogLimits_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogLimits *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogLimits *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogLimits);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogLimits_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogLimits_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSL900ASetLogLimits_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSLogLimits
    pType = &LLRP_tdThingMagicIDSLogLimits;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSLogLimits = (LLRP_tSThingMagicIDSLogLimits *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogLimits))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetLogLimits_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimits_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSLogLimits *
LLRP_ThingMagicIDSSL900ASetLogLimits_getThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
    return pThis->pThingMagicIDSLogLimits;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimits_setThingMagicIDSLogLimits (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSThingMagicIDSLogLimits * pValue)
{
    SUBPARAM_SET(pThingMagicIDSLogLimits, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimits_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimits_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogLimits))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimits_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogLimits_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogLimits *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSLogLimits;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSLogLimits,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogLimits_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetLogLimitsOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetLogLimitsOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    116,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetLogLimitsOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetLogLimitsOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetLogLimitsOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetLogLimitsOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetLogLimitsOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetIDSPassword
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetIDSPassword =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetIDSPassword",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    117,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetIDSPassword,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetIDSPassword),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetIDSPassword_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetIDSPassword_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetIDSPassword_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetIDSPassword_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetIDSPassword_encode,

  
    LLRP_ThingMagicIDSSL900ASetIDSPassword_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetIDSPassword[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel,
    &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NewPasswordLevel",	// .pName
    LLRP_estThingMagicCustomIDSPasswordLevel,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NewIDSPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASetIDSPassword *
LLRP_ThingMagicIDSSL900ASetIDSPassword_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetIDSPassword *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetIDSPassword *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetIDSPassword);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetIDSPassword_destruct (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetIDSPassword_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eNewPasswordLevel =
                (LLRP_tEThingMagicCustomIDSPasswordLevel) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel);
    }

    if(NULL != pThis)
    {
        pThis->NewIDSPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetIDSPassword_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetIDSPassword))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomIDSPasswordLevel
LLRP_ThingMagicIDSSL900ASetIDSPassword_getNewPasswordLevel (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->eNewPasswordLevel;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_setNewPasswordLevel (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tEThingMagicCustomIDSPasswordLevel eValue)
{
    pThis->eNewPasswordLevel = eValue;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicIDSSL900ASetIDSPassword_getNewIDSPassword (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->NewIDSPassword;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_setNewIDSPassword (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  llrp_u32_t Value)
{
    pThis->NewIDSPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSL900ASetIDSPassword_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetIDSPassword_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetIDSPassword_addCustom (
  LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetIDSPassword))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetIDSPassword_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetIDSPassword_encode (
  const LLRP_tSThingMagicIDSSL900ASetIDSPassword *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eNewPasswordLevel,
        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewPasswordLevel);

    pOps->pfPut_u32(pEncoderStream,
        pThis->NewIDSPassword,
        &LLRP_fdThingMagicIDSSL900ASetIDSPassword_NewIDSPassword);

    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetIDSPassword_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSL900ASetPasswordOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSL900ASetPasswordOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    118,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSL900ASetPasswordOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSL900ASetPasswordOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSL900ASetPasswordOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSL900ASetPasswordOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSL900ASetPasswordOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSBatteryLevel
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSBatteryLevel =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSBatteryLevel",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    120,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSBatteryLevel,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSBatteryLevel),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSBatteryLevel_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSBatteryLevel_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSBatteryLevel_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSBatteryLevel_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSBatteryLevel_encode,

  
    LLRP_ThingMagicIDSBatteryLevel_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSBatteryLevel[] =
{
  
    &LLRP_fdThingMagicIDSBatteryLevel_reply,
    &LLRP_fdThingMagicIDSBatteryLevel_ADError,
    &LLRP_fdThingMagicIDSBatteryLevel_batteryType,
    &LLRP_fdThingMagicIDSBatteryLevel_batteryValue,
    &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_reply =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "reply",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_ADError =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ADError",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_batteryType =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "batteryType",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_batteryValue =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "batteryValue",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "batteryValueByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSBatteryLevel *
LLRP_ThingMagicIDSBatteryLevel_construct (void)
{
    LLRP_tSThingMagicIDSBatteryLevel *pNew;

    pNew = (LLRP_tSThingMagicIDSBatteryLevel *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSBatteryLevel);

    return pNew;
}

void
LLRP_ThingMagicIDSBatteryLevel_destruct (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
  
    LLRP_u8v_clear(&pThis->batteryValueByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSBatteryLevel_decodeFields (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->reply =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_reply);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_reply);
    }
    
    if(NULL != pThis)
    {
        pThis->ADError =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_ADError);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_ADError);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

    if(NULL != pThis)
    {
        pThis->batteryType =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_batteryType);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_batteryType);
    }
    
    if(NULL != pThis)
    {
        pThis->batteryValue =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_batteryValue);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_batteryValue);
    }
    
    if(NULL != pThis)
    {
        pThis->batteryValueByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream);
    }
    
}

void
LLRP_ThingMagicIDSBatteryLevel_assimilateSubParameters (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSBatteryLevel))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicIDSBatteryLevel_getreply (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->reply;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setreply (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u16_t Value)
{
    pThis->reply = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSBatteryLevel_getADError (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->ADError;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setADError (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u1_t Value)
{
    pThis->ADError = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSBatteryLevel_getbatteryType (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->batteryType;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setbatteryType (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u8_t Value)
{
    pThis->batteryType = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSBatteryLevel_getbatteryValue (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->batteryValue;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setbatteryValue (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u16_t Value)
{
    pThis->batteryValue = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicIDSBatteryLevel_getbatteryValueByteStream (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->batteryValueByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_setbatteryValueByteStream (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->batteryValueByteStream);

    pThis->batteryValueByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSBatteryLevel_beginCustom (
  LLRP_tSThingMagicIDSBatteryLevel *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSBatteryLevel_addCustom (
  LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSBatteryLevel))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSBatteryLevel_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSBatteryLevel_encode (
  const LLRP_tSThingMagicIDSBatteryLevel *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->reply,
        &LLRP_fdThingMagicIDSBatteryLevel_reply);

    pOps->pfPut_u1(pEncoderStream,
        pThis->ADError,
        &LLRP_fdThingMagicIDSBatteryLevel_ADError);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pOps->pfPut_u8(pEncoderStream,
        pThis->batteryType,
        &LLRP_fdThingMagicIDSBatteryLevel_batteryType);

    pOps->pfPut_u16(pEncoderStream,
        pThis->batteryValue,
        &LLRP_fdThingMagicIDSBatteryLevel_batteryValue);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->batteryValueByteStream,
        &LLRP_fdThingMagicIDSBatteryLevel_batteryValueByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSBatteryLevel_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSetShelfLife
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSetShelfLife =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSetShelfLife",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    121,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSetShelfLife,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSetShelfLife),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSetShelfLife_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSetShelfLife_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSetShelfLife_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSetShelfLife_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSetShelfLife_encode,

  
    LLRP_ThingMagicIDSSetShelfLife_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSetShelfLife[] =
{
  
    NULL
};


LLRP_tSThingMagicIDSSetShelfLife *
LLRP_ThingMagicIDSSetShelfLife_construct (void)
{
    LLRP_tSThingMagicIDSSetShelfLife *pNew;

    pNew = (LLRP_tSThingMagicIDSSetShelfLife *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSetShelfLife);

    return pNew;
}

void
LLRP_ThingMagicIDSSetShelfLife_destruct (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSetShelfLife_decodeFields (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicIDSSetShelfLife_assimilateSubParameters (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicIDSSL900ACommandRequest
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSL900ACommandRequest = (LLRP_tSThingMagicIDSSL900ACommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSSLBlock0
    pType = &LLRP_tdThingMagicIDSSLBlock0;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSLBlock0 = (LLRP_tSThingMagicIDSSLBlock0 *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicIDSSLBlock1
    pType = &LLRP_tdThingMagicIDSSLBlock1;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicIDSSLBlock1 = (LLRP_tSThingMagicIDSSLBlock1 *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSetShelfLife))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicIDSSL900ACommandRequest *
LLRP_ThingMagicIDSSetShelfLife_getThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->pThingMagicIDSSL900ACommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_setThingMagicIDSSL900ACommandRequest (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSThingMagicIDSSL900ACommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSL900ACommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock0 *
LLRP_ThingMagicIDSSetShelfLife_getThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->pThingMagicIDSSLBlock0;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_setThingMagicIDSSLBlock0 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSThingMagicIDSSLBlock0 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock0, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicIDSSLBlock1 *
LLRP_ThingMagicIDSSetShelfLife_getThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->pThingMagicIDSSLBlock1;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_setThingMagicIDSSLBlock1 (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSThingMagicIDSSLBlock1 * pValue)
{
    SUBPARAM_SET(pThingMagicIDSSLBlock1, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLife_beginCustom (
  LLRP_tSThingMagicIDSSetShelfLife *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLife_addCustom (
  LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSetShelfLife))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLife_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSetShelfLife_encode (
  const LLRP_tSThingMagicIDSSetShelfLife *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicIDSSL900ACommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSL900ACommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock0;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock0,
        pType);
      
    pType = &LLRP_tdThingMagicIDSSLBlock1;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicIDSSLBlock1,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSetShelfLife_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSLBlock0
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSLBlock0 =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSLBlock0",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    122,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSLBlock0,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSLBlock0),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSLBlock0_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSLBlock0_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSLBlock0_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSLBlock0_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSLBlock0_encode,

  
    LLRP_ThingMagicIDSSLBlock0_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSLBlock0[] =
{
  
    &LLRP_fdThingMagicIDSSLBlock0_raw,
    &LLRP_fdThingMagicIDSSLBlock0_TimeMax,
    &LLRP_fdThingMagicIDSSLBlock0_TimeMin,
    &LLRP_fdThingMagicIDSSLBlock0_TimeStd,
    &LLRP_fdThingMagicIDSSLBlock0_Ea,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_raw =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "raw",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_TimeMax =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TimeMax",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_TimeMin =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TimeMin",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_TimeStd =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TimeStd",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock0_Ea =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Ea",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSLBlock0 *
LLRP_ThingMagicIDSSLBlock0_construct (void)
{
    LLRP_tSThingMagicIDSSLBlock0 *pNew;

    pNew = (LLRP_tSThingMagicIDSSLBlock0 *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSLBlock0);

    return pNew;
}

void
LLRP_ThingMagicIDSSLBlock0_destruct (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSLBlock0_decodeFields (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_raw);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeMax =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_TimeMax);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_TimeMax);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeMin =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_TimeMin);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_TimeMin);
    }
    
    if(NULL != pThis)
    {
        pThis->TimeStd =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_TimeStd);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_TimeStd);
    }
    
    if(NULL != pThis)
    {
        pThis->Ea =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock0_Ea);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock0_Ea);
    }
    
}

void
LLRP_ThingMagicIDSSLBlock0_assimilateSubParameters (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSLBlock0))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicIDSSLBlock0_getraw (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setraw (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u32_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getTimeMax (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->TimeMax;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setTimeMax (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->TimeMax = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getTimeMin (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->TimeMin;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setTimeMin (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->TimeMin = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getTimeStd (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->TimeStd;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setTimeStd (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->TimeStd = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock0_getEa (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->Ea;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_setEa (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  llrp_u8_t Value)
{
    pThis->Ea = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock0_beginCustom (
  LLRP_tSThingMagicIDSSLBlock0 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock0_addCustom (
  LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSLBlock0))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock0_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSLBlock0_encode (
  const LLRP_tSThingMagicIDSSLBlock0 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSLBlock0_raw);

    pOps->pfPut_u8(pEncoderStream,
        pThis->TimeMax,
        &LLRP_fdThingMagicIDSSLBlock0_TimeMax);

    pOps->pfPut_u8(pEncoderStream,
        pThis->TimeMin,
        &LLRP_fdThingMagicIDSSLBlock0_TimeMin);

    pOps->pfPut_u8(pEncoderStream,
        pThis->TimeStd,
        &LLRP_fdThingMagicIDSSLBlock0_TimeStd);

    pOps->pfPut_u8(pEncoderStream,
        pThis->Ea,
        &LLRP_fdThingMagicIDSSLBlock0_Ea);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSLBlock0_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSLBlock1
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSLBlock1 =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSLBlock1",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    123,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSLBlock1,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSLBlock1),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSLBlock1_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSLBlock1_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSLBlock1_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSLBlock1_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSLBlock1_encode,

  
    LLRP_ThingMagicIDSSLBlock1_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSLBlock1[] =
{
  
    &LLRP_fdThingMagicIDSSLBlock1_raw,
    &LLRP_fdThingMagicIDSSLBlock1_SLInit,
    &LLRP_fdThingMagicIDSSLBlock1_TInit,
    &LLRP_fdThingMagicIDSSLBlock1_SensorID,
    &LLRP_fdThingMagicIDSSLBlock1_enableNegative,
    &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable,
    &LLRP_fdThingMagicIDSSLBlock1_RFU,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_raw =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "raw",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_SLInit =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "SLInit",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_TInit =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TInit",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_SensorID =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "SensorID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_enableNegative =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "enableNegative",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_algorithmEnable =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "algorithmEnable",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSLBlock1_RFU =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "RFU",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSLBlock1 *
LLRP_ThingMagicIDSSLBlock1_construct (void)
{
    LLRP_tSThingMagicIDSSLBlock1 *pNew;

    pNew = (LLRP_tSThingMagicIDSSLBlock1 *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSLBlock1);

    return pNew;
}

void
LLRP_ThingMagicIDSSLBlock1_destruct (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSLBlock1_decodeFields (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->raw =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_raw);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_raw);
    }
    
    if(NULL != pThis)
    {
        pThis->SLInit =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_SLInit);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_SLInit);
    }
    
    if(NULL != pThis)
    {
        pThis->TInit =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_TInit);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_TInit);
    }
    
    if(NULL != pThis)
    {
        pThis->SensorID =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_SensorID);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_SensorID);
    }
    
    if(NULL != pThis)
    {
        pThis->enableNegative =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_enableNegative);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_enableNegative);
    }
    
    if(NULL != pThis)
    {
        pThis->algorithmEnable =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

    if(NULL != pThis)
    {
        pThis->RFU =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSLBlock1_RFU);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicIDSSLBlock1_RFU);
    }
    
}

void
LLRP_ThingMagicIDSSLBlock1_assimilateSubParameters (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSLBlock1))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicIDSSLBlock1_getraw (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->raw;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setraw (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u32_t Value)
{
    pThis->raw = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSLBlock1_getSLInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->SLInit;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setSLInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u16_t Value)
{
    pThis->SLInit = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSLBlock1_getTInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->TInit;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setTInit (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u16_t Value)
{
    pThis->TInit = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock1_getSensorID (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->SensorID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setSensorID (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u8_t Value)
{
    pThis->SensorID = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSLBlock1_getenableNegative (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->enableNegative;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setenableNegative (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u1_t Value)
{
    pThis->enableNegative = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_ThingMagicIDSSLBlock1_getalgorithmEnable (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->algorithmEnable;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setalgorithmEnable (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u1_t Value)
{
    pThis->algorithmEnable = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicIDSSLBlock1_getRFU (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->RFU;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_setRFU (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  llrp_u8_t Value)
{
    pThis->RFU = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock1_beginCustom (
  LLRP_tSThingMagicIDSSLBlock1 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSLBlock1_addCustom (
  LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSLBlock1))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSLBlock1_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSLBlock1_encode (
  const LLRP_tSThingMagicIDSSLBlock1 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->raw,
        &LLRP_fdThingMagicIDSSLBlock1_raw);

    pOps->pfPut_u16(pEncoderStream,
        pThis->SLInit,
        &LLRP_fdThingMagicIDSSLBlock1_SLInit);

    pOps->pfPut_u16(pEncoderStream,
        pThis->TInit,
        &LLRP_fdThingMagicIDSSLBlock1_TInit);

    pOps->pfPut_u8(pEncoderStream,
        pThis->SensorID,
        &LLRP_fdThingMagicIDSSLBlock1_SensorID);

    pOps->pfPut_u1(pEncoderStream,
        pThis->enableNegative,
        &LLRP_fdThingMagicIDSSLBlock1_enableNegative);

    pOps->pfPut_u1(pEncoderStream,
        pThis->algorithmEnable,
        &LLRP_fdThingMagicIDSSLBlock1_algorithmEnable);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pOps->pfPut_u8(pEncoderStream,
        pThis->RFU,
        &LLRP_fdThingMagicIDSSLBlock1_RFU);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSLBlock1_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicIDSSetShelfLifeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicIDSSetShelfLifeOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    124,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicIDSSetShelfLifeOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_encode,

  
    LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicIDSSetShelfLifeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result,
    &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_destruct (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_decodeFields (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID);
    }
    
}

void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_getResult (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_setResult (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_beginCustom (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_addCustom (
  LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_encode (
  const LLRP_tSThingMagicIDSSetShelfLifeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicIDSSetShelfLifeOpSpecResult_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicIDSSetShelfLifeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicHopTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicHopTime =
{
    FALSE,	// .bIsMessage
    "ThingMagicHopTime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    125,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicHopTime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicHopTime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicHopTime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicHopTime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicHopTime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicHopTime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicHopTime_encode,

  
    LLRP_ThingMagicHopTime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicHopTime[] =
{
  
    &LLRP_fdThingMagicHopTime_HopTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicHopTime_HopTime =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "HopTime",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicHopTime *
LLRP_ThingMagicHopTime_construct (void)
{
    LLRP_tSThingMagicHopTime *pNew;

    pNew = (LLRP_tSThingMagicHopTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicHopTime);

    return pNew;
}

void
LLRP_ThingMagicHopTime_destruct (
  LLRP_tSThingMagicHopTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicHopTime_decodeFields (
  LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->HopTime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicHopTime_HopTime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicHopTime_HopTime);
    }
    
}

void
LLRP_ThingMagicHopTime_assimilateSubParameters (
  LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicHopTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicHopTime_getHopTime (
  LLRP_tSThingMagicHopTime *pThis)
{
    return pThis->HopTime;
}

LLRP_tResultCode
LLRP_ThingMagicHopTime_setHopTime (
  LLRP_tSThingMagicHopTime *pThis,
  llrp_u32_t Value)
{
    pThis->HopTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicHopTime_beginCustom (
  LLRP_tSThingMagicHopTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicHopTime_addCustom (
  LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicHopTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicHopTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicHopTime_encode (
  const LLRP_tSThingMagicHopTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->HopTime,
        &LLRP_fdThingMagicHopTime_HopTime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicHopTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSecureMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSecureMode =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVActivateSecureMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    126,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVActivateSecureMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVActivateSecureMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSecureMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSecureMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSecureMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureMode_encode,

  
    LLRP_ThingMagicDenatranIAVActivateSecureMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSecureMode[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVActivateSecureMode *
LLRP_ThingMagicDenatranIAVActivateSecureMode_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSecureMode *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSecureMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSecureMode);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSecureMode_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSecureMode_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVActivateSecureMode_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSecureMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVActivateSecureMode_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureMode_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureMode_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureMode_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSecureMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSecureMode_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSecureMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSecureMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSecureModeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVActivateSecureModeOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    127,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVActivateSecureModeOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSecureModeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ActivateSecureModeByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->ActivateSecureModeByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ActivateSecureModeByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_getActivateSecureModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->ActivateSecureModeByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_setActivateSecureModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ActivateSecureModeByteStream);

    pThis->ActivateSecureModeByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSecureModeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ActivateSecureModeByteStream,
        &LLRP_fdThingMagicDenatranIAVActivateSecureModeOpSpecResult_ActivateSecureModeByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSecureModeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVAuthenticateOBU
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVAuthenticateOBU =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVAuthenticateOBU",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    128,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVAuthenticateOBU,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVAuthenticateOBU),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVAuthenticateOBU_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVAuthenticateOBU_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBU_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBU_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBU_encode,

  
    LLRP_ThingMagicDenatranIAVAuthenticateOBU_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVAuthenticateOBU[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVAuthenticateOBU *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_construct (void)
{
    LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVAuthenticateOBU *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVAuthenticateOBU);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_destruct (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_decodeFields (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVAuthenticateOBU))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBU_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_beginCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBU_addCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVAuthenticateOBU))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBU_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVAuthenticateOBU_encode (
  const LLRP_tSThingMagicDenatranIAVAuthenticateOBU *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVAuthenticateOBU_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVAuthenticateOBUOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVAuthenticateOBUOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    129,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVAuthenticateOBUOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVAuthenticateOBUOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AuthenitcateOBUByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->AuthenitcateOBUByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AuthenitcateOBUByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_getAuthenitcateOBUByteStream (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->AuthenitcateOBUByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_setAuthenitcateOBUByteStream (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->AuthenitcateOBUByteStream);

    pThis->AuthenitcateOBUByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVAuthenticateOBUOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->AuthenitcateOBUByteStream,
        &LLRP_fdThingMagicDenatranIAVAuthenticateOBUOpSpecResult_AuthenitcateOBUByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVAuthenticateOBUOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSiniavMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSiniavMode =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVActivateSiniavMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    130,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVActivateSiniavMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVActivateSiniavMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSiniavMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSiniavMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSiniavMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavMode_encode,

  
    LLRP_ThingMagicDenatranIAVActivateSiniavMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSiniavMode[] =
{
  
    &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "tokenData",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVActivateSiniavMode *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSiniavMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSiniavMode);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
  
    LLRP_u8v_clear(&pThis->tokenData);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->tokenData =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData);
    }
    
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSiniavMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicDenatranIAVActivateSiniavMode_gettokenData (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
    return pThis->tokenData;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavMode_settokenData (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->tokenData);

    pThis->tokenData = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavMode_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavMode_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSiniavMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSiniavMode_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSiniavMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->tokenData,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavMode_tokenData);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSiniavMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVActivateSiniavModeOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVActivateSiniavModeOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    131,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVActivateSiniavModeOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVActivateSiniavModeOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ActivateSiniavModeByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->ActivateSiniavModeByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ActivateSiniavModeByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_getActivateSiniavModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->ActivateSiniavModeByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_setActivateSiniavModeByteStream (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ActivateSiniavModeByteStream);

    pThis->ActivateSiniavModeByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVActivateSiniavModeOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ActivateSiniavModeByteStream,
        &LLRP_fdThingMagicDenatranIAVActivateSiniavModeOpSpecResult_ActivateSiniavModeByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVActivateSiniavModeOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateID
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateID =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthenticateID",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    132,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthenticateID,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateID),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateID_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateID_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateID_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateID_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateID_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthenticateID_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateID[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateID);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateID))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateID))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateID *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateID_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    133,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OBUAuthenticateIDByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUAuthenticateIDByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUAuthenticateIDByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_getOBUAuthenticateIDByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->OBUAuthenticateIDByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_setOBUAuthenticateIDByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUAuthenticateIDByteStream);

    pThis->OBUAuthenticateIDByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUAuthenticateIDByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_OBUAuthenticateIDByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass1
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1 =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthenticateFullPass1",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    134,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    135,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OBUAuthenticateFullPass1ByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass1ByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUAuthenticateFullPass1ByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_getOBUAuthenticateFullPass1ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->OBUAuthenticateFullPass1ByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_setOBUAuthenticateFullPass1ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass1ByteStream);

    pThis->OBUAuthenticateFullPass1ByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUAuthenticateFullPass1ByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_OBUAuthenticateFullPass1ByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass2
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2 =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthenticateFullPass2",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    136,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    137,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OBUAuthenticateFullPass2ByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass2ByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUAuthenticateFullPass2ByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_getOBUAuthenticateFullPass2ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->OBUAuthenticateFullPass2ByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_setOBUAuthenticateFullPass2ByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUAuthenticateFullPass2ByteStream);

    pThis->OBUAuthenticateFullPass2ByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUAuthenticateFullPass2ByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_OBUAuthenticateFullPass2ByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUReadFromMemMap
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUReadFromMemMap",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    138,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMap,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_encode,

  
    LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMap[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadPtr",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_destruct (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReadPtr =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_getReadPtr (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
    return pThis->ReadPtr;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_setReadPtr (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  llrp_u16_t Value)
{
    pThis->ReadPtr = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_encode (
  const LLRP_tSThingMagicDenatranIAVOBUReadFromMemMap *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->ReadPtr,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMap_ReadPtr);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMap_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    139,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OBUReadMemoryMapByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUReadMemoryMapByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUReadMemoryMapByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_getOBUReadMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->OBUReadMemoryMapByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_setOBUReadMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUReadMemoryMapByteStream);

    pThis->OBUReadMemoryMapByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUReadMemoryMapByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_OBUReadMemoryMapByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUWriteToMemMap
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUWriteToMemMap",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    140,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMap,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_encode,

  
    LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMap[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "WritePtr",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "WordData",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TagIdentification",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "DataBuf",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_destruct (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
  
    LLRP_u8v_clear(&pThis->TagIdentification);
      
    LLRP_u8v_clear(&pThis->DataBuf);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->WritePtr =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr);
    }
    
    if(NULL != pThis)
    {
        pThis->WordData =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData);
    }
    
    if(NULL != pThis)
    {
        pThis->TagIdentification =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification);
    }
    
    if(NULL != pThis)
    {
        pThis->DataBuf =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getWritePtr (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->WritePtr;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setWritePtr (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u16_t Value)
{
    pThis->WritePtr = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getWordData (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->WordData;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setWordData (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u16_t Value)
{
    pThis->WordData = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getTagIdentification (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->TagIdentification;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setTagIdentification (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->TagIdentification);

    pThis->TagIdentification = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getDataBuf (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->DataBuf;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setDataBuf (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->DataBuf);

    pThis->DataBuf = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_encode (
  const LLRP_tSThingMagicDenatranIAVOBUWriteToMemMap *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->WritePtr,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WritePtr);

    pOps->pfPut_u16(pEncoderStream,
        pThis->WordData,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_WordData);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->TagIdentification,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_TagIdentification);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->DataBuf,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMap_DataBuf);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMap_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    141,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OBUWriteMemoryMapByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUWriteMemoryMapByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUWriteMemoryMapByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_getOBUWriteMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->OBUWriteMemoryMapByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_setOBUWriteMemoryMapByteStream (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUWriteMemoryMapByteStream);

    pThis->OBUWriteMemoryMapByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUWriteMemoryMapByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_OBUWriteMemoryMapByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVG0PAOBUAuth
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVG0PAOBUAuth =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVG0PAOBUAuth",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    184,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVG0PAOBUAuth,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVG0PAOBUAuth),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVG0PAOBUAuth_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVG0PAOBUAuth_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVG0PAOBUAuth_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVG0PAOBUAuth_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVG0PAOBUAuth_encode,

  
    LLRP_ThingMagicDenatranIAVG0PAOBUAuth_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVG0PAOBUAuth[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_construct (void)
{
    LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVG0PAOBUAuth);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_destruct (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_decodeFields (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVG0PAOBUAuth))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_beginCustom (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_addCustom (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVG0PAOBUAuth))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_encode (
  const LLRP_tSThingMagicDenatranIAVG0PAOBUAuth *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVG0PAOBUAuth_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    185,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_G0PAOBUAuthByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_G0PAOBUAuthByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "G0PAOBUAuthByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->G0PAOBUAuthByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->G0PAOBUAuthByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_G0PAOBUAuthByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_G0PAOBUAuthByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_getG0PAOBUAuthByteStream (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis)
{
    return pThis->G0PAOBUAuthByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_setG0PAOBUAuthByteStream (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->G0PAOBUAuthByteStream);

    pThis->G0PAOBUAuthByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVG0PAOBUAuthOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->G0PAOBUAuthByteStream,
        &LLRP_fdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_G0PAOBUAuthByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVG0PAOBUAuthOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthFullPass
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthFullPass =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthFullPass",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    186,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthFullPass,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthFullPass),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthFullPass_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthFullPass_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthFullPass_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthFullPass_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthFullPass_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthFullPass_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthFullPass[] =
{
  
    NULL
};


LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthFullPass);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthFullPass))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthFullPass))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthFullPass *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthFullPass_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    187,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OBUAuthFullPassByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OBUAuthFullPassByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OBUAuthFullPassByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->OBUAuthFullPassByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->OBUAuthFullPassByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OBUAuthFullPassByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OBUAuthFullPassByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_getOBUAuthFullPassByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis)
{
    return pThis->OBUAuthFullPassByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_setOBUAuthFullPassByteStream (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->OBUAuthFullPassByteStream);

    pThis->OBUAuthFullPassByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVOBUAuthFullPassOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->OBUAuthFullPassByteStream,
        &LLRP_fdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_OBUAuthFullPassByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVOBUAuthFullPassOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVReadSec
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVReadSec =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVReadSec",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    188,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVReadSec,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVReadSec),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVReadSec_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVReadSec_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVReadSec_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVReadSec_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVReadSec_encode,

  
    LLRP_ThingMagicDenatranIAVReadSec_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVReadSec[] =
{
  
    &LLRP_fdThingMagicDenatranIAVReadSec_ReadSec,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVReadSec_ReadSec =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadSec",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVReadSec *
LLRP_ThingMagicDenatranIAVReadSec_construct (void)
{
    LLRP_tSThingMagicDenatranIAVReadSec *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVReadSec *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVReadSec);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVReadSec_destruct (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVReadSec_decodeFields (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ReadSec =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVReadSec_ReadSec);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVReadSec_ReadSec);
    }
    
}

void
LLRP_ThingMagicDenatranIAVReadSec_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVReadSec))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVReadSec_getReadSec (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis)
{
    return pThis->ReadSec;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVReadSec_setReadSec (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis,
  llrp_u16_t Value)
{
    pThis->ReadSec = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVReadSec_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVReadSec_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVReadSec_beginCustom (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVReadSec_addCustom (
  LLRP_tSThingMagicDenatranIAVReadSec *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVReadSec))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVReadSec_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVReadSec_encode (
  const LLRP_tSThingMagicDenatranIAVReadSec *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->ReadSec,
        &LLRP_fdThingMagicDenatranIAVReadSec_ReadSec);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVReadSec_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVReadSecOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVReadSecOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVReadSecOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    189,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVReadSecOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVReadSecOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_ReadSecByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_ReadSecByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ReadSecByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVReadSecOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->ReadSecByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->ReadSecByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_ReadSecByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_ReadSecByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVReadSecOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_getReadSecByteStream (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis)
{
    return pThis->ReadSecByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_setReadSecByteStream (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ReadSecByteStream);

    pThis->ReadSecByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVReadSecOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVReadSecOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ReadSecByteStream,
        &LLRP_fdThingMagicDenatranIAVReadSecOpSpecResult_ReadSecByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVReadSecOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVWriteSec
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVWriteSec =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVWriteSec",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    190,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVWriteSec,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVWriteSec),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVWriteSec_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVWriteSec_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVWriteSec_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVWriteSec_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVWriteSec_encode,

  
    LLRP_ThingMagicDenatranIAVWriteSec_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVWriteSec[] =
{
  
    &LLRP_fdThingMagicDenatranIAVWriteSec_DataBuf,
    &LLRP_fdThingMagicDenatranIAVWriteSec_ValueBuf,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVWriteSec_DataBuf =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "DataBuf",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVWriteSec_ValueBuf =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ValueBuf",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVWriteSec *
LLRP_ThingMagicDenatranIAVWriteSec_construct (void)
{
    LLRP_tSThingMagicDenatranIAVWriteSec *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVWriteSec *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVWriteSec);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVWriteSec_destruct (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis)
{
  
    LLRP_u8v_clear(&pThis->DataBuf);
      
    LLRP_u8v_clear(&pThis->ValueBuf);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVWriteSec_decodeFields (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->DataBuf =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVWriteSec_DataBuf);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVWriteSec_DataBuf);
    }
    
    if(NULL != pThis)
    {
        pThis->ValueBuf =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVWriteSec_ValueBuf);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVWriteSec_ValueBuf);
    }
    
}

void
LLRP_ThingMagicDenatranIAVWriteSec_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicDenatranIAVCommandRequest
    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicDenatranIAVCommandRequest = (LLRP_tSThingMagicDenatranIAVCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVWriteSec))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicDenatranIAVWriteSec_getDataBuf (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis)
{
    return pThis->DataBuf;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSec_setDataBuf (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->DataBuf);

    pThis->DataBuf = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVWriteSec_getValueBuf (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis)
{
    return pThis->ValueBuf;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSec_setValueBuf (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ValueBuf);

    pThis->ValueBuf = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVWriteSec_getThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis)
{
    return pThis->pThingMagicDenatranIAVCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSec_setThingMagicDenatranIAVCommandRequest (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis,
  LLRP_tSThingMagicDenatranIAVCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicDenatranIAVCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVWriteSec_beginCustom (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSec_addCustom (
  LLRP_tSThingMagicDenatranIAVWriteSec *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVWriteSec))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVWriteSec_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVWriteSec_encode (
  const LLRP_tSThingMagicDenatranIAVWriteSec *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->DataBuf,
        &LLRP_fdThingMagicDenatranIAVWriteSec_DataBuf);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->ValueBuf,
        &LLRP_fdThingMagicDenatranIAVWriteSec_ValueBuf);

    pType = &LLRP_tdThingMagicDenatranIAVCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicDenatranIAVCommandRequest,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVWriteSec_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVWriteSecOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVWriteSecOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVWriteSecOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    191,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVWriteSecOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVWriteSecOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_WriteSecByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_WriteSecByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "WriteSecByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVWriteSecOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->WriteSecByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->WriteSecByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_WriteSecByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_WriteSecByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVWriteSecOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_getWriteSecByteStream (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis)
{
    return pThis->WriteSecByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_setWriteSecByteStream (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->WriteSecByteStream);

    pThis->WriteSecByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVWriteSecOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVWriteSecOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->WriteSecByteStream,
        &LLRP_fdThingMagicDenatranIAVWriteSecOpSpecResult_WriteSecByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVWriteSecOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVGetTokenID
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVGetTokenID =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVGetTokenID",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    192,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVGetTokenID,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVGetTokenID),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVGetTokenID_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVGetTokenID_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVGetTokenID_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVGetTokenID_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVGetTokenID_encode,

  
    LLRP_ThingMagicDenatranIAVGetTokenID_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVGetTokenID[] =
{
  
    &LLRP_fdThingMagicDenatranIAVGetTokenID_OpSpecID,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVGetTokenID_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVGetTokenID *
LLRP_ThingMagicDenatranIAVGetTokenID_construct (void)
{
    LLRP_tSThingMagicDenatranIAVGetTokenID *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVGetTokenID *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVGetTokenID);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVGetTokenID_destruct (
  LLRP_tSThingMagicDenatranIAVGetTokenID *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVGetTokenID_decodeFields (
  LLRP_tSThingMagicDenatranIAVGetTokenID *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVGetTokenID_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVGetTokenID_OpSpecID);
    }
    
}

void
LLRP_ThingMagicDenatranIAVGetTokenID_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVGetTokenID *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVGetTokenID))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVGetTokenID_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVGetTokenID *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVGetTokenID_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVGetTokenID *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVGetTokenID_beginCustom (
  LLRP_tSThingMagicDenatranIAVGetTokenID *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVGetTokenID_addCustom (
  LLRP_tSThingMagicDenatranIAVGetTokenID *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVGetTokenID))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVGetTokenID_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVGetTokenID_encode (
  const LLRP_tSThingMagicDenatranIAVGetTokenID *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVGetTokenID_OpSpecID);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVGetTokenID_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVGetTokenIDOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVGetTokenIDOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVGetTokenIDOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    193,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVGetTokenIDOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_encode,

  
    LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVGetTokenIDOpSpecResult[] =
{
  
    &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_Result,
    &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_GetTokenIDByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_GetTokenIDByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "GetTokenIDByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_construct (void)
{
    LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVGetTokenIDOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_destruct (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->GetTokenIDByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_decodeFields (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->GetTokenIDByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_GetTokenIDByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_GetTokenIDByteStream);
    }
    
}

void
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVGetTokenIDOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_getResult (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_setResult (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_getGetTokenIDByteStream (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis)
{
    return pThis->GetTokenIDByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_setGetTokenIDByteStream (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->GetTokenIDByteStream);

    pThis->GetTokenIDByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_beginCustom (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_addCustom (
  LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVGetTokenIDOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_encode (
  const LLRP_tSThingMagicDenatranIAVGetTokenIDOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->GetTokenIDByteStream,
        &LLRP_fdThingMagicDenatranIAVGetTokenIDOpSpecResult_GetTokenIDByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVGetTokenIDOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicDenatranIAVCommandRequest
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicDenatranIAVCommandRequest =
{
    FALSE,	// .bIsMessage
    "ThingMagicDenatranIAVCommandRequest",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    201,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicDenatranIAVCommandRequest,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicDenatranIAVCommandRequest),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicDenatranIAVCommandRequest_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicDenatranIAVCommandRequest_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicDenatranIAVCommandRequest_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicDenatranIAVCommandRequest_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicDenatranIAVCommandRequest_encode,

  
    LLRP_ThingMagicDenatranIAVCommandRequest_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicDenatranIAVCommandRequest[] =
{
  
    &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID,
    &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PayLoad",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicDenatranIAVCommandRequest *
LLRP_ThingMagicDenatranIAVCommandRequest_construct (void)
{
    LLRP_tSThingMagicDenatranIAVCommandRequest *pNew;

    pNew = (LLRP_tSThingMagicDenatranIAVCommandRequest *)
        LLRP_Element_construct(&LLRP_tdThingMagicDenatranIAVCommandRequest);

    return pNew;
}

void
LLRP_ThingMagicDenatranIAVCommandRequest_destruct (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicDenatranIAVCommandRequest_decodeFields (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->PayLoad =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad);
    }
    
}

void
LLRP_ThingMagicDenatranIAVCommandRequest_assimilateSubParameters (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicDenatranIAVCommandRequest))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicDenatranIAVCommandRequest_getOpSpecID (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVCommandRequest_setOpSpecID (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicDenatranIAVCommandRequest_getPayLoad (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
    return pThis->PayLoad;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVCommandRequest_setPayLoad (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  llrp_u8_t Value)
{
    pThis->PayLoad = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVCommandRequest_beginCustom (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicDenatranIAVCommandRequest_addCustom (
  LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicDenatranIAVCommandRequest))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicDenatranIAVCommandRequest_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicDenatranIAVCommandRequest_encode (
  const LLRP_tSThingMagicDenatranIAVCommandRequest *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicDenatranIAVCommandRequest_OpSpecID);

    pOps->pfPut_u8(pEncoderStream,
        pThis->PayLoad,
        &LLRP_fdThingMagicDenatranIAVCommandRequest_PayLoad);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicDenatranIAVCommandRequest_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicTagReportContentSelector
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicTagReportContentSelector =
{
    FALSE,	// .bIsMessage
    "ThingMagicTagReportContentSelector",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    142,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicTagReportContentSelector,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicTagReportContentSelector),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicTagReportContentSelector_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicTagReportContentSelector_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicTagReportContentSelector_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicTagReportContentSelector_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicTagReportContentSelector_encode,

  
    LLRP_ThingMagicTagReportContentSelector_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicTagReportContentSelector[] =
{
  
    &LLRP_fdThingMagicTagReportContentSelector_PhaseMode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicTagReportContentSelector_PhaseMode =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "PhaseMode",	// .pName
    LLRP_estThingMagicPhaseMode,	// .pEnumTable
};

LLRP_tSThingMagicTagReportContentSelector *
LLRP_ThingMagicTagReportContentSelector_construct (void)
{
    LLRP_tSThingMagicTagReportContentSelector *pNew;

    pNew = (LLRP_tSThingMagicTagReportContentSelector *)
        LLRP_Element_construct(&LLRP_tdThingMagicTagReportContentSelector);

    return pNew;
}

void
LLRP_ThingMagicTagReportContentSelector_destruct (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicTagReportContentSelector_decodeFields (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ePhaseMode =
                (LLRP_tEThingMagicPhaseMode) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicTagReportContentSelector_PhaseMode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicTagReportContentSelector_PhaseMode);
    }

}

void
LLRP_ThingMagicTagReportContentSelector_assimilateSubParameters (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of MetadataGPIOMode
    pType = &LLRP_tdMetadataGPIOMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pMetadataGPIOMode = (LLRP_tSMetadataGPIOMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of MetadataGen2QMode
    pType = &LLRP_tdMetadataGen2QMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pMetadataGen2QMode = (LLRP_tSMetadataGen2QMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of MetadataGen2LFMode
    pType = &LLRP_tdMetadataGen2LFMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pMetadataGen2LFMode = (LLRP_tSMetadataGen2LFMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of MetadataGen2TargetMode
    pType = &LLRP_tdMetadataGen2TargetMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pMetadataGen2TargetMode = (LLRP_tSMetadataGen2TargetMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of MetadataDataMode
    pType = &LLRP_tdMetadataDataMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pMetadataDataMode = (LLRP_tSMetadataDataMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicTagReportContentSelector))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicPhaseMode
LLRP_ThingMagicTagReportContentSelector_getPhaseMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->ePhaseMode;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_setPhaseMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tEThingMagicPhaseMode eValue)
{
    pThis->ePhaseMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSMetadataGPIOMode *
LLRP_ThingMagicTagReportContentSelector_getMetadataGPIOMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->pMetadataGPIOMode;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_setMetadataGPIOMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSMetadataGPIOMode * pValue)
{
    SUBPARAM_SET(pMetadataGPIOMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSMetadataGen2QMode *
LLRP_ThingMagicTagReportContentSelector_getMetadataGen2QMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->pMetadataGen2QMode;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_setMetadataGen2QMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSMetadataGen2QMode * pValue)
{
    SUBPARAM_SET(pMetadataGen2QMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSMetadataGen2LFMode *
LLRP_ThingMagicTagReportContentSelector_getMetadataGen2LFMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->pMetadataGen2LFMode;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_setMetadataGen2LFMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSMetadataGen2LFMode * pValue)
{
    SUBPARAM_SET(pMetadataGen2LFMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSMetadataGen2TargetMode *
LLRP_ThingMagicTagReportContentSelector_getMetadataGen2TargetMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->pMetadataGen2TargetMode;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_setMetadataGen2TargetMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSMetadataGen2TargetMode * pValue)
{
    SUBPARAM_SET(pMetadataGen2TargetMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSMetadataDataMode *
LLRP_ThingMagicTagReportContentSelector_getMetadataDataMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->pMetadataDataMode;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_setMetadataDataMode (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSMetadataDataMode * pValue)
{
    SUBPARAM_SET(pMetadataDataMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicTagReportContentSelector_beginCustom (
  LLRP_tSThingMagicTagReportContentSelector *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicTagReportContentSelector_addCustom (
  LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicTagReportContentSelector))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicTagReportContentSelector_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicTagReportContentSelector_encode (
  const LLRP_tSThingMagicTagReportContentSelector *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->ePhaseMode,
        &LLRP_fdThingMagicTagReportContentSelector_PhaseMode);

    pType = &LLRP_tdMetadataGPIOMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pMetadataGPIOMode,
        pType);
      
    pType = &LLRP_tdMetadataGen2QMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pMetadataGen2QMode,
        pType);
      
    pType = &LLRP_tdMetadataGen2LFMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pMetadataGen2LFMode,
        pType);
      
    pType = &LLRP_tdMetadataGen2TargetMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pMetadataGen2TargetMode,
        pType);
      
    pType = &LLRP_tdMetadataDataMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pMetadataDataMode,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicTagReportContentSelector_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdROReportSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter MetadataGPIOMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdMetadataGPIOMode =
{
    FALSE,	// .bIsMessage
    "MetadataGPIOMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    220,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdMetadataGPIOMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSMetadataGPIOMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_MetadataGPIOMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_MetadataGPIOMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_MetadataGPIOMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_MetadataGPIOMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_MetadataGPIOMode_encode,

  
    LLRP_MetadataGPIOMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdMetadataGPIOMode[] =
{
  
    &LLRP_fdMetadataGPIOMode_Mode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdMetadataGPIOMode_Mode =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Mode",	// .pName
    LLRP_estThingMagicMetadataFlagStatus,	// .pEnumTable
};

LLRP_tSMetadataGPIOMode *
LLRP_MetadataGPIOMode_construct (void)
{
    LLRP_tSMetadataGPIOMode *pNew;

    pNew = (LLRP_tSMetadataGPIOMode *)
        LLRP_Element_construct(&LLRP_tdMetadataGPIOMode);

    return pNew;
}

void
LLRP_MetadataGPIOMode_destruct (
  LLRP_tSMetadataGPIOMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_MetadataGPIOMode_decodeFields (
  LLRP_tSMetadataGPIOMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eMode =
                (LLRP_tEThingMagicMetadataFlagStatus) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdMetadataGPIOMode_Mode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdMetadataGPIOMode_Mode);
    }

}

void
LLRP_MetadataGPIOMode_assimilateSubParameters (
  LLRP_tSMetadataGPIOMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdMetadataGPIOMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicMetadataFlagStatus
LLRP_MetadataGPIOMode_getMode (
  LLRP_tSMetadataGPIOMode *pThis)
{
    return pThis->eMode;
}

LLRP_tResultCode
LLRP_MetadataGPIOMode_setMode (
  LLRP_tSMetadataGPIOMode *pThis,
  LLRP_tEThingMagicMetadataFlagStatus eValue)
{
    pThis->eMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_MetadataGPIOMode_beginCustom (
  LLRP_tSMetadataGPIOMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_MetadataGPIOMode_addCustom (
  LLRP_tSMetadataGPIOMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdMetadataGPIOMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_MetadataGPIOMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_MetadataGPIOMode_encode (
  const LLRP_tSMetadataGPIOMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eMode,
        &LLRP_fdMetadataGPIOMode_Mode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_MetadataGPIOMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicTagReportContentSelector)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter MetadataGen2QMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdMetadataGen2QMode =
{
    FALSE,	// .bIsMessage
    "MetadataGen2QMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    221,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdMetadataGen2QMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSMetadataGen2QMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_MetadataGen2QMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_MetadataGen2QMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_MetadataGen2QMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_MetadataGen2QMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_MetadataGen2QMode_encode,

  
    LLRP_MetadataGen2QMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdMetadataGen2QMode[] =
{
  
    &LLRP_fdMetadataGen2QMode_Mode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdMetadataGen2QMode_Mode =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Mode",	// .pName
    LLRP_estThingMagicMetadataFlagStatus,	// .pEnumTable
};

LLRP_tSMetadataGen2QMode *
LLRP_MetadataGen2QMode_construct (void)
{
    LLRP_tSMetadataGen2QMode *pNew;

    pNew = (LLRP_tSMetadataGen2QMode *)
        LLRP_Element_construct(&LLRP_tdMetadataGen2QMode);

    return pNew;
}

void
LLRP_MetadataGen2QMode_destruct (
  LLRP_tSMetadataGen2QMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_MetadataGen2QMode_decodeFields (
  LLRP_tSMetadataGen2QMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eMode =
                (LLRP_tEThingMagicMetadataFlagStatus) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdMetadataGen2QMode_Mode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdMetadataGen2QMode_Mode);
    }

}

void
LLRP_MetadataGen2QMode_assimilateSubParameters (
  LLRP_tSMetadataGen2QMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdMetadataGen2QMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicMetadataFlagStatus
LLRP_MetadataGen2QMode_getMode (
  LLRP_tSMetadataGen2QMode *pThis)
{
    return pThis->eMode;
}

LLRP_tResultCode
LLRP_MetadataGen2QMode_setMode (
  LLRP_tSMetadataGen2QMode *pThis,
  LLRP_tEThingMagicMetadataFlagStatus eValue)
{
    pThis->eMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_MetadataGen2QMode_beginCustom (
  LLRP_tSMetadataGen2QMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_MetadataGen2QMode_addCustom (
  LLRP_tSMetadataGen2QMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdMetadataGen2QMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_MetadataGen2QMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_MetadataGen2QMode_encode (
  const LLRP_tSMetadataGen2QMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eMode,
        &LLRP_fdMetadataGen2QMode_Mode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_MetadataGen2QMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicTagReportContentSelector)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter MetadataGen2LFMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdMetadataGen2LFMode =
{
    FALSE,	// .bIsMessage
    "MetadataGen2LFMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    222,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdMetadataGen2LFMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSMetadataGen2LFMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_MetadataGen2LFMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_MetadataGen2LFMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_MetadataGen2LFMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_MetadataGen2LFMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_MetadataGen2LFMode_encode,

  
    LLRP_MetadataGen2LFMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdMetadataGen2LFMode[] =
{
  
    &LLRP_fdMetadataGen2LFMode_Mode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdMetadataGen2LFMode_Mode =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Mode",	// .pName
    LLRP_estThingMagicMetadataFlagStatus,	// .pEnumTable
};

LLRP_tSMetadataGen2LFMode *
LLRP_MetadataGen2LFMode_construct (void)
{
    LLRP_tSMetadataGen2LFMode *pNew;

    pNew = (LLRP_tSMetadataGen2LFMode *)
        LLRP_Element_construct(&LLRP_tdMetadataGen2LFMode);

    return pNew;
}

void
LLRP_MetadataGen2LFMode_destruct (
  LLRP_tSMetadataGen2LFMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_MetadataGen2LFMode_decodeFields (
  LLRP_tSMetadataGen2LFMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eMode =
                (LLRP_tEThingMagicMetadataFlagStatus) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdMetadataGen2LFMode_Mode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdMetadataGen2LFMode_Mode);
    }

}

void
LLRP_MetadataGen2LFMode_assimilateSubParameters (
  LLRP_tSMetadataGen2LFMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdMetadataGen2LFMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicMetadataFlagStatus
LLRP_MetadataGen2LFMode_getMode (
  LLRP_tSMetadataGen2LFMode *pThis)
{
    return pThis->eMode;
}

LLRP_tResultCode
LLRP_MetadataGen2LFMode_setMode (
  LLRP_tSMetadataGen2LFMode *pThis,
  LLRP_tEThingMagicMetadataFlagStatus eValue)
{
    pThis->eMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_MetadataGen2LFMode_beginCustom (
  LLRP_tSMetadataGen2LFMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_MetadataGen2LFMode_addCustom (
  LLRP_tSMetadataGen2LFMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdMetadataGen2LFMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_MetadataGen2LFMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_MetadataGen2LFMode_encode (
  const LLRP_tSMetadataGen2LFMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eMode,
        &LLRP_fdMetadataGen2LFMode_Mode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_MetadataGen2LFMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicTagReportContentSelector)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter MetadataGen2TargetMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdMetadataGen2TargetMode =
{
    FALSE,	// .bIsMessage
    "MetadataGen2TargetMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    223,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdMetadataGen2TargetMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSMetadataGen2TargetMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_MetadataGen2TargetMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_MetadataGen2TargetMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_MetadataGen2TargetMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_MetadataGen2TargetMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_MetadataGen2TargetMode_encode,

  
    LLRP_MetadataGen2TargetMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdMetadataGen2TargetMode[] =
{
  
    &LLRP_fdMetadataGen2TargetMode_Mode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdMetadataGen2TargetMode_Mode =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Mode",	// .pName
    LLRP_estThingMagicMetadataFlagStatus,	// .pEnumTable
};

LLRP_tSMetadataGen2TargetMode *
LLRP_MetadataGen2TargetMode_construct (void)
{
    LLRP_tSMetadataGen2TargetMode *pNew;

    pNew = (LLRP_tSMetadataGen2TargetMode *)
        LLRP_Element_construct(&LLRP_tdMetadataGen2TargetMode);

    return pNew;
}

void
LLRP_MetadataGen2TargetMode_destruct (
  LLRP_tSMetadataGen2TargetMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_MetadataGen2TargetMode_decodeFields (
  LLRP_tSMetadataGen2TargetMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eMode =
                (LLRP_tEThingMagicMetadataFlagStatus) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdMetadataGen2TargetMode_Mode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdMetadataGen2TargetMode_Mode);
    }

}

void
LLRP_MetadataGen2TargetMode_assimilateSubParameters (
  LLRP_tSMetadataGen2TargetMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdMetadataGen2TargetMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicMetadataFlagStatus
LLRP_MetadataGen2TargetMode_getMode (
  LLRP_tSMetadataGen2TargetMode *pThis)
{
    return pThis->eMode;
}

LLRP_tResultCode
LLRP_MetadataGen2TargetMode_setMode (
  LLRP_tSMetadataGen2TargetMode *pThis,
  LLRP_tEThingMagicMetadataFlagStatus eValue)
{
    pThis->eMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_MetadataGen2TargetMode_beginCustom (
  LLRP_tSMetadataGen2TargetMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_MetadataGen2TargetMode_addCustom (
  LLRP_tSMetadataGen2TargetMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdMetadataGen2TargetMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_MetadataGen2TargetMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_MetadataGen2TargetMode_encode (
  const LLRP_tSMetadataGen2TargetMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eMode,
        &LLRP_fdMetadataGen2TargetMode_Mode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_MetadataGen2TargetMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicTagReportContentSelector)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter MetadataDataMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdMetadataDataMode =
{
    FALSE,	// .bIsMessage
    "MetadataDataMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    230,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdMetadataDataMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSMetadataDataMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_MetadataDataMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_MetadataDataMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_MetadataDataMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_MetadataDataMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_MetadataDataMode_encode,

  
    LLRP_MetadataDataMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdMetadataDataMode[] =
{
  
    &LLRP_fdMetadataDataMode_Mode,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdMetadataDataMode_Mode =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Mode",	// .pName
    LLRP_estThingMagicMetadataFlagStatus,	// .pEnumTable
};

LLRP_tSMetadataDataMode *
LLRP_MetadataDataMode_construct (void)
{
    LLRP_tSMetadataDataMode *pNew;

    pNew = (LLRP_tSMetadataDataMode *)
        LLRP_Element_construct(&LLRP_tdMetadataDataMode);

    return pNew;
}

void
LLRP_MetadataDataMode_destruct (
  LLRP_tSMetadataDataMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_MetadataDataMode_decodeFields (
  LLRP_tSMetadataDataMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eMode =
                (LLRP_tEThingMagicMetadataFlagStatus) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdMetadataDataMode_Mode);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdMetadataDataMode_Mode);
    }

}

void
LLRP_MetadataDataMode_assimilateSubParameters (
  LLRP_tSMetadataDataMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdMetadataDataMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicMetadataFlagStatus
LLRP_MetadataDataMode_getMode (
  LLRP_tSMetadataDataMode *pThis)
{
    return pThis->eMode;
}

LLRP_tResultCode
LLRP_MetadataDataMode_setMode (
  LLRP_tSMetadataDataMode *pThis,
  LLRP_tEThingMagicMetadataFlagStatus eValue)
{
    pThis->eMode = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_MetadataDataMode_beginCustom (
  LLRP_tSMetadataDataMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_MetadataDataMode_addCustom (
  LLRP_tSMetadataDataMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdMetadataDataMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_MetadataDataMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_MetadataDataMode_encode (
  const LLRP_tSMetadataDataMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eMode,
        &LLRP_fdMetadataDataMode_Mode);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_MetadataDataMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicTagReportContentSelector)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicRFPhase
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicRFPhase =
{
    FALSE,	// .bIsMessage
    "ThingMagicRFPhase",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    143,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicRFPhase,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicRFPhase),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicRFPhase_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicRFPhase_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicRFPhase_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicRFPhase_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicRFPhase_encode,

  
    LLRP_ThingMagicRFPhase_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicRFPhase[] =
{
  
    &LLRP_fdThingMagicRFPhase_Phase,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicRFPhase_Phase =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Phase",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicRFPhase *
LLRP_ThingMagicRFPhase_construct (void)
{
    LLRP_tSThingMagicRFPhase *pNew;

    pNew = (LLRP_tSThingMagicRFPhase *)
        LLRP_Element_construct(&LLRP_tdThingMagicRFPhase);

    return pNew;
}

void
LLRP_ThingMagicRFPhase_destruct (
  LLRP_tSThingMagicRFPhase *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicRFPhase_decodeFields (
  LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Phase =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicRFPhase_Phase);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicRFPhase_Phase);
    }
    
}

void
LLRP_ThingMagicRFPhase_assimilateSubParameters (
  LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicRFPhase))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicRFPhase_getPhase (
  LLRP_tSThingMagicRFPhase *pThis)
{
    return pThis->Phase;
}

LLRP_tResultCode
LLRP_ThingMagicRFPhase_setPhase (
  LLRP_tSThingMagicRFPhase *pThis,
  llrp_u16_t Value)
{
    pThis->Phase = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicRFPhase_beginCustom (
  LLRP_tSThingMagicRFPhase *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicRFPhase_addCustom (
  LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicRFPhase))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicRFPhase_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicRFPhase_encode (
  const LLRP_tSThingMagicRFPhase *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->Phase,
        &LLRP_fdThingMagicRFPhase_Phase);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicRFPhase_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdTagReportData)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicMetadataGPIO
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicMetadataGPIO =
{
    FALSE,	// .bIsMessage
    "ThingMagicMetadataGPIO",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    224,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicMetadataGPIO,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicMetadataGPIO),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicMetadataGPIO_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicMetadataGPIO_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicMetadataGPIO_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicMetadataGPIO_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicMetadataGPIO_encode,

  
    LLRP_ThingMagicMetadataGPIO_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicMetadataGPIO[] =
{
  
    NULL
};


LLRP_tSThingMagicMetadataGPIO *
LLRP_ThingMagicMetadataGPIO_construct (void)
{
    LLRP_tSThingMagicMetadataGPIO *pNew;

    pNew = (LLRP_tSThingMagicMetadataGPIO *)
        LLRP_Element_construct(&LLRP_tdThingMagicMetadataGPIO);

    return pNew;
}

void
LLRP_ThingMagicMetadataGPIO_destruct (
  LLRP_tSThingMagicMetadataGPIO *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicMetadataGPIO_decodeFields (
  LLRP_tSThingMagicMetadataGPIO *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicMetadataGPIO_assimilateSubParameters (
  LLRP_tSThingMagicMetadataGPIO *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of GPIOStatus
    pType = &LLRP_tdGPIOStatus;
  
    while(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        SUBPARAM_ATTACH(listGPIOStatus, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicMetadataGPIO))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSGPIOStatus *
LLRP_ThingMagicMetadataGPIO_beginGPIOStatus (
  LLRP_tSThingMagicMetadataGPIO *pThis)
{
    return pThis->listGPIOStatus;
}

LLRP_tResultCode
LLRP_ThingMagicMetadataGPIO_addGPIOStatus (
  LLRP_tSThingMagicMetadataGPIO *pThis,
  LLRP_tSGPIOStatus *pValue)
{
    SUBPARAM_ADD(listGPIOStatus, pValue);

    return LLRP_RC_OK;
}

LLRP_tSGPIOStatus *
LLRP_ThingMagicMetadataGPIO_nextGPIOStatus (
  LLRP_tSGPIOStatus *pCurrent)
{
    return (LLRP_tSGPIOStatus *)
                pCurrent->hdr.pNextSubParameter;
}

void
LLRP_ThingMagicMetadataGPIO_clearGPIOStatus (
  LLRP_tSThingMagicMetadataGPIO *pThis)
{
    SUBPARAM_CLEAR(listGPIOStatus);
}


LLRP_tSParameter *
LLRP_ThingMagicMetadataGPIO_beginCustom (
  LLRP_tSThingMagicMetadataGPIO *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicMetadataGPIO_addCustom (
  LLRP_tSThingMagicMetadataGPIO *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicMetadataGPIO))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicMetadataGPIO_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicMetadataGPIO_encode (
  const LLRP_tSThingMagicMetadataGPIO *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdGPIOStatus;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listGPIOStatus,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicMetadataGPIO_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdTagReportData)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter GPIOStatus
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGPIOStatus =
{
    FALSE,	// .bIsMessage
    "GPIOStatus",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    225,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdGPIOStatus,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSGPIOStatus),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_GPIOStatus_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_GPIOStatus_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_GPIOStatus_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_GPIOStatus_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_GPIOStatus_encode,

  
    LLRP_GPIOStatus_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGPIOStatus[] =
{
  
    &LLRP_fdGPIOStatus_id,
    &LLRP_fdGPIOStatus_Status,
    &LLRP_fdGPIOStatus_Direction,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdGPIOStatus_id =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "id",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdGPIOStatus_Status =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Status",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdGPIOStatus_Direction =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Direction",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSGPIOStatus *
LLRP_GPIOStatus_construct (void)
{
    LLRP_tSGPIOStatus *pNew;

    pNew = (LLRP_tSGPIOStatus *)
        LLRP_Element_construct(&LLRP_tdGPIOStatus);

    return pNew;
}

void
LLRP_GPIOStatus_destruct (
  LLRP_tSGPIOStatus *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_GPIOStatus_decodeFields (
  LLRP_tSGPIOStatus *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->id =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdGPIOStatus_id);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdGPIOStatus_id);
    }
    
    if(NULL != pThis)
    {
        pThis->Status =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdGPIOStatus_Status);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdGPIOStatus_Status);
    }
    
    if(NULL != pThis)
    {
        pThis->Direction =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdGPIOStatus_Direction);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdGPIOStatus_Direction);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 6);

}

void
LLRP_GPIOStatus_assimilateSubParameters (
  LLRP_tSGPIOStatus *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGPIOStatus))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_GPIOStatus_getid (
  LLRP_tSGPIOStatus *pThis)
{
    return pThis->id;
}

LLRP_tResultCode
LLRP_GPIOStatus_setid (
  LLRP_tSGPIOStatus *pThis,
  llrp_u8_t Value)
{
    pThis->id = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_GPIOStatus_getStatus (
  LLRP_tSGPIOStatus *pThis)
{
    return pThis->Status;
}

LLRP_tResultCode
LLRP_GPIOStatus_setStatus (
  LLRP_tSGPIOStatus *pThis,
  llrp_u1_t Value)
{
    pThis->Status = Value;
    return LLRP_RC_OK;
}


llrp_u1_t
LLRP_GPIOStatus_getDirection (
  LLRP_tSGPIOStatus *pThis)
{
    return pThis->Direction;
}

LLRP_tResultCode
LLRP_GPIOStatus_setDirection (
  LLRP_tSGPIOStatus *pThis,
  llrp_u1_t Value)
{
    pThis->Direction = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_GPIOStatus_beginCustom (
  LLRP_tSGPIOStatus *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_GPIOStatus_addCustom (
  LLRP_tSGPIOStatus *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGPIOStatus))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_GPIOStatus_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_GPIOStatus_encode (
  const LLRP_tSGPIOStatus *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->id,
        &LLRP_fdGPIOStatus_id);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Status,
        &LLRP_fdGPIOStatus_Status);

    pOps->pfPut_u1(pEncoderStream,
        pThis->Direction,
        &LLRP_fdGPIOStatus_Direction);

    pOps->pfPut_reserved(pEncoderStream, 6);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_GPIOStatus_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicMetadataGPIO)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicMetadataGen2
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicMetadataGen2 =
{
    FALSE,	// .bIsMessage
    "ThingMagicMetadataGen2",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    226,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicMetadataGen2,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicMetadataGen2),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicMetadataGen2_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicMetadataGen2_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicMetadataGen2_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicMetadataGen2_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicMetadataGen2_encode,

  
    LLRP_ThingMagicMetadataGen2_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicMetadataGen2[] =
{
  
    NULL
};


LLRP_tSThingMagicMetadataGen2 *
LLRP_ThingMagicMetadataGen2_construct (void)
{
    LLRP_tSThingMagicMetadataGen2 *pNew;

    pNew = (LLRP_tSThingMagicMetadataGen2 *)
        LLRP_Element_construct(&LLRP_tdThingMagicMetadataGen2);

    return pNew;
}

void
LLRP_ThingMagicMetadataGen2_destruct (
  LLRP_tSThingMagicMetadataGen2 *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicMetadataGen2_decodeFields (
  LLRP_tSThingMagicMetadataGen2 *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicMetadataGen2_assimilateSubParameters (
  LLRP_tSThingMagicMetadataGen2 *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of Gen2QResponse
    pType = &LLRP_tdGen2QResponse;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2QResponse = (LLRP_tSGen2QResponse *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of Gen2LFResponse
    pType = &LLRP_tdGen2LFResponse;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2LFResponse = (LLRP_tSGen2LFResponse *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of Gen2TargetResponse
    pType = &LLRP_tdGen2TargetResponse;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pGen2TargetResponse = (LLRP_tSGen2TargetResponse *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicMetadataGen2))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSGen2QResponse *
LLRP_ThingMagicMetadataGen2_getGen2QResponse (
  LLRP_tSThingMagicMetadataGen2 *pThis)
{
    return pThis->pGen2QResponse;
}

LLRP_tResultCode
LLRP_ThingMagicMetadataGen2_setGen2QResponse (
  LLRP_tSThingMagicMetadataGen2 *pThis,
  LLRP_tSGen2QResponse * pValue)
{
    SUBPARAM_SET(pGen2QResponse, pValue);

    return LLRP_RC_OK;
}


LLRP_tSGen2LFResponse *
LLRP_ThingMagicMetadataGen2_getGen2LFResponse (
  LLRP_tSThingMagicMetadataGen2 *pThis)
{
    return pThis->pGen2LFResponse;
}

LLRP_tResultCode
LLRP_ThingMagicMetadataGen2_setGen2LFResponse (
  LLRP_tSThingMagicMetadataGen2 *pThis,
  LLRP_tSGen2LFResponse * pValue)
{
    SUBPARAM_SET(pGen2LFResponse, pValue);

    return LLRP_RC_OK;
}


LLRP_tSGen2TargetResponse *
LLRP_ThingMagicMetadataGen2_getGen2TargetResponse (
  LLRP_tSThingMagicMetadataGen2 *pThis)
{
    return pThis->pGen2TargetResponse;
}

LLRP_tResultCode
LLRP_ThingMagicMetadataGen2_setGen2TargetResponse (
  LLRP_tSThingMagicMetadataGen2 *pThis,
  LLRP_tSGen2TargetResponse * pValue)
{
    SUBPARAM_SET(pGen2TargetResponse, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicMetadataGen2_beginCustom (
  LLRP_tSThingMagicMetadataGen2 *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicMetadataGen2_addCustom (
  LLRP_tSThingMagicMetadataGen2 *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicMetadataGen2))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicMetadataGen2_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicMetadataGen2_encode (
  const LLRP_tSThingMagicMetadataGen2 *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdGen2QResponse;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2QResponse,
        pType);
      
    pType = &LLRP_tdGen2LFResponse;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2LFResponse,
        pType);
      
    pType = &LLRP_tdGen2TargetResponse;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pGen2TargetResponse,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicMetadataGen2_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdTagReportData)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2QResponse
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2QResponse =
{
    FALSE,	// .bIsMessage
    "Gen2QResponse",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    227,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdGen2QResponse,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSGen2QResponse),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_Gen2QResponse_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_Gen2QResponse_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2QResponse_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2QResponse_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2QResponse_encode,

  
    LLRP_Gen2QResponse_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2QResponse[] =
{
  
    &LLRP_fdGen2QResponse_QValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdGen2QResponse_QValue =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "QValue",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSGen2QResponse *
LLRP_Gen2QResponse_construct (void)
{
    LLRP_tSGen2QResponse *pNew;

    pNew = (LLRP_tSGen2QResponse *)
        LLRP_Element_construct(&LLRP_tdGen2QResponse);

    return pNew;
}

void
LLRP_Gen2QResponse_destruct (
  LLRP_tSGen2QResponse *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2QResponse_decodeFields (
  LLRP_tSGen2QResponse *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->QValue =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdGen2QResponse_QValue);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdGen2QResponse_QValue);
    }
    
}

void
LLRP_Gen2QResponse_assimilateSubParameters (
  LLRP_tSGen2QResponse *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2QResponse))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_Gen2QResponse_getQValue (
  LLRP_tSGen2QResponse *pThis)
{
    return pThis->QValue;
}

LLRP_tResultCode
LLRP_Gen2QResponse_setQValue (
  LLRP_tSGen2QResponse *pThis,
  llrp_u8_t Value)
{
    pThis->QValue = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2QResponse_beginCustom (
  LLRP_tSGen2QResponse *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2QResponse_addCustom (
  LLRP_tSGen2QResponse *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2QResponse))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2QResponse_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2QResponse_encode (
  const LLRP_tSGen2QResponse *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->QValue,
        &LLRP_fdGen2QResponse_QValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2QResponse_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicMetadataGen2)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2LFResponse
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2LFResponse =
{
    FALSE,	// .bIsMessage
    "Gen2LFResponse",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    228,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdGen2LFResponse,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSGen2LFResponse),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_Gen2LFResponse_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_Gen2LFResponse_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2LFResponse_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2LFResponse_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2LFResponse_encode,

  
    LLRP_Gen2LFResponse_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2LFResponse[] =
{
  
    &LLRP_fdGen2LFResponse_LFValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdGen2LFResponse_LFValue =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "LFValue",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSGen2LFResponse *
LLRP_Gen2LFResponse_construct (void)
{
    LLRP_tSGen2LFResponse *pNew;

    pNew = (LLRP_tSGen2LFResponse *)
        LLRP_Element_construct(&LLRP_tdGen2LFResponse);

    return pNew;
}

void
LLRP_Gen2LFResponse_destruct (
  LLRP_tSGen2LFResponse *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2LFResponse_decodeFields (
  LLRP_tSGen2LFResponse *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->LFValue =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdGen2LFResponse_LFValue);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdGen2LFResponse_LFValue);
    }
    
}

void
LLRP_Gen2LFResponse_assimilateSubParameters (
  LLRP_tSGen2LFResponse *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2LFResponse))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_Gen2LFResponse_getLFValue (
  LLRP_tSGen2LFResponse *pThis)
{
    return pThis->LFValue;
}

LLRP_tResultCode
LLRP_Gen2LFResponse_setLFValue (
  LLRP_tSGen2LFResponse *pThis,
  llrp_u16_t Value)
{
    pThis->LFValue = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2LFResponse_beginCustom (
  LLRP_tSGen2LFResponse *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2LFResponse_addCustom (
  LLRP_tSGen2LFResponse *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2LFResponse))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2LFResponse_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2LFResponse_encode (
  const LLRP_tSGen2LFResponse *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->LFValue,
        &LLRP_fdGen2LFResponse_LFValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2LFResponse_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicMetadataGen2)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter Gen2TargetResponse
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdGen2TargetResponse =
{
    FALSE,	// .bIsMessage
    "Gen2TargetResponse",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    229,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdGen2TargetResponse,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSGen2TargetResponse),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_Gen2TargetResponse_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_Gen2TargetResponse_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_Gen2TargetResponse_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_Gen2TargetResponse_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_Gen2TargetResponse_encode,

  
    LLRP_Gen2TargetResponse_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdGen2TargetResponse[] =
{
  
    &LLRP_fdGen2TargetResponse_TargetValue,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdGen2TargetResponse_TargetValue =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "TargetValue",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSGen2TargetResponse *
LLRP_Gen2TargetResponse_construct (void)
{
    LLRP_tSGen2TargetResponse *pNew;

    pNew = (LLRP_tSGen2TargetResponse *)
        LLRP_Element_construct(&LLRP_tdGen2TargetResponse);

    return pNew;
}

void
LLRP_Gen2TargetResponse_destruct (
  LLRP_tSGen2TargetResponse *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_Gen2TargetResponse_decodeFields (
  LLRP_tSGen2TargetResponse *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->TargetValue =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdGen2TargetResponse_TargetValue);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdGen2TargetResponse_TargetValue);
    }
    
}

void
LLRP_Gen2TargetResponse_assimilateSubParameters (
  LLRP_tSGen2TargetResponse *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdGen2TargetResponse))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_Gen2TargetResponse_getTargetValue (
  LLRP_tSGen2TargetResponse *pThis)
{
    return pThis->TargetValue;
}

LLRP_tResultCode
LLRP_Gen2TargetResponse_setTargetValue (
  LLRP_tSGen2TargetResponse *pThis,
  llrp_u8_t Value)
{
    pThis->TargetValue = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_Gen2TargetResponse_beginCustom (
  LLRP_tSGen2TargetResponse *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_Gen2TargetResponse_addCustom (
  LLRP_tSGen2TargetResponse *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdGen2TargetResponse))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_Gen2TargetResponse_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_Gen2TargetResponse_encode (
  const LLRP_tSGen2TargetResponse *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->TargetValue,
        &LLRP_fdGen2TargetResponse_TargetValue);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_Gen2TargetResponse_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicMetadataGen2)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicFastSearchMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicFastSearchMode =
{
    FALSE,	// .bIsMessage
    "ThingMagicFastSearchMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    144,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicFastSearchMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicFastSearchMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicFastSearchMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicFastSearchMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicFastSearchMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicFastSearchMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicFastSearchMode_encode,

  
    LLRP_ThingMagicFastSearchMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicFastSearchMode[] =
{
  
    &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ThingMagicFastSearch",	// .pName
    LLRP_estThingMagicFastSearchValue,	// .pEnumTable
};

LLRP_tSThingMagicFastSearchMode *
LLRP_ThingMagicFastSearchMode_construct (void)
{
    LLRP_tSThingMagicFastSearchMode *pNew;

    pNew = (LLRP_tSThingMagicFastSearchMode *)
        LLRP_Element_construct(&LLRP_tdThingMagicFastSearchMode);

    return pNew;
}

void
LLRP_ThingMagicFastSearchMode_destruct (
  LLRP_tSThingMagicFastSearchMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicFastSearchMode_decodeFields (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eThingMagicFastSearch =
                (LLRP_tEThingMagicFastSearchValue) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch);
    }

}

void
LLRP_ThingMagicFastSearchMode_assimilateSubParameters (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicFastSearchMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicFastSearchValue
LLRP_ThingMagicFastSearchMode_getThingMagicFastSearch (
  LLRP_tSThingMagicFastSearchMode *pThis)
{
    return pThis->eThingMagicFastSearch;
}

LLRP_tResultCode
LLRP_ThingMagicFastSearchMode_setThingMagicFastSearch (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tEThingMagicFastSearchValue eValue)
{
    pThis->eThingMagicFastSearch = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicFastSearchMode_beginCustom (
  LLRP_tSThingMagicFastSearchMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicFastSearchMode_addCustom (
  LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicFastSearchMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicFastSearchMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicFastSearchMode_encode (
  const LLRP_tSThingMagicFastSearchMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eThingMagicFastSearch,
        &LLRP_fdThingMagicFastSearchMode_ThingMagicFastSearch);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicFastSearchMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdC1G2InventoryCommand)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAsyncOFFTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAsyncOFFTime =
{
    FALSE,	// .bIsMessage
    "ThingMagicAsyncOFFTime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    145,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicAsyncOFFTime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicAsyncOFFTime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAsyncOFFTime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAsyncOFFTime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAsyncOFFTime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAsyncOFFTime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAsyncOFFTime_encode,

  
    LLRP_ThingMagicAsyncOFFTime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAsyncOFFTime[] =
{
  
    &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AsyncOFFTime",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicAsyncOFFTime *
LLRP_ThingMagicAsyncOFFTime_construct (void)
{
    LLRP_tSThingMagicAsyncOFFTime *pNew;

    pNew = (LLRP_tSThingMagicAsyncOFFTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicAsyncOFFTime);

    return pNew;
}

void
LLRP_ThingMagicAsyncOFFTime_destruct (
  LLRP_tSThingMagicAsyncOFFTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAsyncOFFTime_decodeFields (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AsyncOFFTime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime);
    }
    
}

void
LLRP_ThingMagicAsyncOFFTime_assimilateSubParameters (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAsyncOFFTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicAsyncOFFTime_getAsyncOFFTime (
  LLRP_tSThingMagicAsyncOFFTime *pThis)
{
    return pThis->AsyncOFFTime;
}

LLRP_tResultCode
LLRP_ThingMagicAsyncOFFTime_setAsyncOFFTime (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  llrp_u32_t Value)
{
    pThis->AsyncOFFTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicAsyncOFFTime_beginCustom (
  LLRP_tSThingMagicAsyncOFFTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAsyncOFFTime_addCustom (
  LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAsyncOFFTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAsyncOFFTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAsyncOFFTime_encode (
  const LLRP_tSThingMagicAsyncOFFTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->AsyncOFFTime,
        &LLRP_fdThingMagicAsyncOFFTime_AsyncOFFTime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAsyncOFFTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAsyncONTime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAsyncONTime =
{
    FALSE,	// .bIsMessage
    "ThingMagicAsyncONTime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    179,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicAsyncONTime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicAsyncONTime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAsyncONTime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAsyncONTime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAsyncONTime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAsyncONTime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAsyncONTime_encode,

  
    LLRP_ThingMagicAsyncONTime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAsyncONTime[] =
{
  
    &LLRP_fdThingMagicAsyncONTime_AsyncONTime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicAsyncONTime_AsyncONTime =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AsyncONTime",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicAsyncONTime *
LLRP_ThingMagicAsyncONTime_construct (void)
{
    LLRP_tSThingMagicAsyncONTime *pNew;

    pNew = (LLRP_tSThingMagicAsyncONTime *)
        LLRP_Element_construct(&LLRP_tdThingMagicAsyncONTime);

    return pNew;
}

void
LLRP_ThingMagicAsyncONTime_destruct (
  LLRP_tSThingMagicAsyncONTime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAsyncONTime_decodeFields (
  LLRP_tSThingMagicAsyncONTime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->AsyncONTime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicAsyncONTime_AsyncONTime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicAsyncONTime_AsyncONTime);
    }
    
}

void
LLRP_ThingMagicAsyncONTime_assimilateSubParameters (
  LLRP_tSThingMagicAsyncONTime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAsyncONTime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicAsyncONTime_getAsyncONTime (
  LLRP_tSThingMagicAsyncONTime *pThis)
{
    return pThis->AsyncONTime;
}

LLRP_tResultCode
LLRP_ThingMagicAsyncONTime_setAsyncONTime (
  LLRP_tSThingMagicAsyncONTime *pThis,
  llrp_u32_t Value)
{
    pThis->AsyncONTime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicAsyncONTime_beginCustom (
  LLRP_tSThingMagicAsyncONTime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAsyncONTime_addCustom (
  LLRP_tSThingMagicAsyncONTime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAsyncONTime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAsyncONTime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAsyncONTime_encode (
  const LLRP_tSThingMagicAsyncONTime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->AsyncONTime,
        &LLRP_fdThingMagicAsyncONTime_AsyncONTime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAsyncONTime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicLicensedFeatures
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicLicensedFeatures =
{
    FALSE,	// .bIsMessage
    "ThingMagicLicensedFeatures",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    146,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicLicensedFeatures,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicLicensedFeatures),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicLicensedFeatures_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicLicensedFeatures_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicLicensedFeatures_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicLicensedFeatures_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicLicensedFeatures_encode,

  
    LLRP_ThingMagicLicensedFeatures_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicLicensedFeatures[] =
{
  
    &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicLicensedFeatures_LicensedFeatures =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_HEX,	// .eFieldFormat
    "LicensedFeatures",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicLicensedFeatures *
LLRP_ThingMagicLicensedFeatures_construct (void)
{
    LLRP_tSThingMagicLicensedFeatures *pNew;

    pNew = (LLRP_tSThingMagicLicensedFeatures *)
        LLRP_Element_construct(&LLRP_tdThingMagicLicensedFeatures);

    return pNew;
}

void
LLRP_ThingMagicLicensedFeatures_destruct (
  LLRP_tSThingMagicLicensedFeatures *pThis)
{
  
    LLRP_u8v_clear(&pThis->LicensedFeatures);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicLicensedFeatures_decodeFields (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->LicensedFeatures =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures);
    }
    
}

void
LLRP_ThingMagicLicensedFeatures_assimilateSubParameters (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicLicensedFeatures))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ThingMagicLicensedFeatures_getLicensedFeatures (
  LLRP_tSThingMagicLicensedFeatures *pThis)
{
    return pThis->LicensedFeatures;
}

LLRP_tResultCode
LLRP_ThingMagicLicensedFeatures_setLicensedFeatures (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->LicensedFeatures);

    pThis->LicensedFeatures = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicLicensedFeatures_beginCustom (
  LLRP_tSThingMagicLicensedFeatures *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicLicensedFeatures_addCustom (
  LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicLicensedFeatures))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicLicensedFeatures_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicLicensedFeatures_encode (
  const LLRP_tSThingMagicLicensedFeatures *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->LicensedFeatures,
        &LLRP_fdThingMagicLicensedFeatures_LicensedFeatures);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicLicensedFeatures_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicSelectedProtocols
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicSelectedProtocols =
{
    FALSE,	// .bIsMessage
    "ThingMagicSelectedProtocols",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    147,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicSelectedProtocols,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicSelectedProtocols),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicSelectedProtocols_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicSelectedProtocols_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicSelectedProtocols_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicSelectedProtocols_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicSelectedProtocols_encode,

  
    LLRP_ThingMagicSelectedProtocols_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicSelectedProtocols[] =
{
  
    NULL
};


LLRP_tSThingMagicSelectedProtocols *
LLRP_ThingMagicSelectedProtocols_construct (void)
{
    LLRP_tSThingMagicSelectedProtocols *pNew;

    pNew = (LLRP_tSThingMagicSelectedProtocols *)
        LLRP_Element_construct(&LLRP_tdThingMagicSelectedProtocols);

    return pNew;
}

void
LLRP_ThingMagicSelectedProtocols_destruct (
  LLRP_tSThingMagicSelectedProtocols *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicSelectedProtocols_decodeFields (
  LLRP_tSThingMagicSelectedProtocols *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicSelectedProtocols_assimilateSubParameters (
  LLRP_tSThingMagicSelectedProtocols *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1-N of SelectedProtocol
    pType = &LLRP_tdSelectedProtocol;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    while(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        SUBPARAM_ATTACH(listSelectedProtocol, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicSelectedProtocols))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSSelectedProtocol *
LLRP_ThingMagicSelectedProtocols_beginSelectedProtocol (
  LLRP_tSThingMagicSelectedProtocols *pThis)
{
    return pThis->listSelectedProtocol;
}

LLRP_tResultCode
LLRP_ThingMagicSelectedProtocols_addSelectedProtocol (
  LLRP_tSThingMagicSelectedProtocols *pThis,
  LLRP_tSSelectedProtocol *pValue)
{
    SUBPARAM_ADD(listSelectedProtocol, pValue);

    return LLRP_RC_OK;
}

LLRP_tSSelectedProtocol *
LLRP_ThingMagicSelectedProtocols_nextSelectedProtocol (
  LLRP_tSSelectedProtocol *pCurrent)
{
    return (LLRP_tSSelectedProtocol *)
                pCurrent->hdr.pNextSubParameter;
}

void
LLRP_ThingMagicSelectedProtocols_clearSelectedProtocol (
  LLRP_tSThingMagicSelectedProtocols *pThis)
{
    SUBPARAM_CLEAR(listSelectedProtocol);
}


LLRP_tSParameter *
LLRP_ThingMagicSelectedProtocols_beginCustom (
  LLRP_tSThingMagicSelectedProtocols *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicSelectedProtocols_addCustom (
  LLRP_tSThingMagicSelectedProtocols *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicSelectedProtocols))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicSelectedProtocols_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicSelectedProtocols_encode (
  const LLRP_tSThingMagicSelectedProtocols *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdSelectedProtocol;
      
    pOps->pfPutRequiredSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listSelectedProtocol,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicSelectedProtocols_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter SelectedProtocol
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdSelectedProtocol =
{
    FALSE,	// .bIsMessage
    "SelectedProtocol",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    148,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdSelectedProtocol,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSSelectedProtocol),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_SelectedProtocol_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_SelectedProtocol_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_SelectedProtocol_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_SelectedProtocol_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_SelectedProtocol_encode,

  
    LLRP_SelectedProtocol_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdSelectedProtocol[] =
{
  
    &LLRP_fdSelectedProtocol_Protocol,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdSelectedProtocol_Protocol =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Protocol",	// .pName
    LLRP_estProtocolID,	// .pEnumTable
};

LLRP_tSSelectedProtocol *
LLRP_SelectedProtocol_construct (void)
{
    LLRP_tSSelectedProtocol *pNew;

    pNew = (LLRP_tSSelectedProtocol *)
        LLRP_Element_construct(&LLRP_tdSelectedProtocol);

    return pNew;
}

void
LLRP_SelectedProtocol_destruct (
  LLRP_tSSelectedProtocol *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_SelectedProtocol_decodeFields (
  LLRP_tSSelectedProtocol *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eProtocol =
                (LLRP_tEProtocolID) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdSelectedProtocol_Protocol);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdSelectedProtocol_Protocol);
    }

}

void
LLRP_SelectedProtocol_assimilateSubParameters (
  LLRP_tSSelectedProtocol *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdSelectedProtocol))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEProtocolID
LLRP_SelectedProtocol_getProtocol (
  LLRP_tSSelectedProtocol *pThis)
{
    return pThis->eProtocol;
}

LLRP_tResultCode
LLRP_SelectedProtocol_setProtocol (
  LLRP_tSSelectedProtocol *pThis,
  LLRP_tEProtocolID eValue)
{
    pThis->eProtocol = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_SelectedProtocol_beginCustom (
  LLRP_tSSelectedProtocol *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_SelectedProtocol_addCustom (
  LLRP_tSSelectedProtocol *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdSelectedProtocol))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_SelectedProtocol_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_SelectedProtocol_encode (
  const LLRP_tSSelectedProtocol *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eProtocol,
        &LLRP_fdSelectedProtocol_Protocol);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_SelectedProtocol_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPReadbuffer
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPReadbuffer =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPReadbuffer",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    154,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPReadbuffer,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPReadbuffer),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPReadbuffer_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPReadbuffer_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPReadbuffer_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPReadbuffer_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPReadbuffer_encode,

  
    LLRP_ThingMagicNXPReadbuffer_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPReadbuffer[] =
{
  
    &LLRP_fdThingMagicNXPReadbuffer_wordPointer,
    &LLRP_fdThingMagicNXPReadbuffer_bitCount,
    &LLRP_fdThingMagicNXPReadbuffer_Authtype,
    &LLRP_fdThingMagicNXPReadbuffer_subCommand,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPReadbuffer_wordPointer =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "wordPointer",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPReadbuffer_bitCount =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "bitCount",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPReadbuffer_Authtype =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Authtype",	// .pName
    LLRP_estThingMagicCustomNXPAuthenticationType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPReadbuffer_subCommand =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "subCommand",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPReadbuffer *
LLRP_ThingMagicNXPReadbuffer_construct (void)
{
    LLRP_tSThingMagicNXPReadbuffer *pNew;

    pNew = (LLRP_tSThingMagicNXPReadbuffer *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPReadbuffer);

    return pNew;
}

void
LLRP_ThingMagicNXPReadbuffer_destruct (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPReadbuffer_decodeFields (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->wordPointer =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPReadbuffer_wordPointer);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPReadbuffer_wordPointer);
    }
    
    if(NULL != pThis)
    {
        pThis->bitCount =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPReadbuffer_bitCount);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPReadbuffer_bitCount);
    }
    
    if(NULL != pThis)
    {
        pThis->eAuthtype =
                (LLRP_tEThingMagicCustomNXPAuthenticationType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPReadbuffer_Authtype);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPReadbuffer_Authtype);
    }

    if(NULL != pThis)
    {
        pThis->subCommand =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPReadbuffer_subCommand);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPReadbuffer_subCommand);
    }
    
}

void
LLRP_ThingMagicNXPReadbuffer_assimilateSubParameters (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicNXPCommandRequest
    pType = &LLRP_tdThingMagicNXPCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicNXPCommandRequest = (LLRP_tSThingMagicNXPCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-1 of ThingMagicNXPTAM1AuthenticationData
    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicNXPTAM1AuthenticationData = (LLRP_tSThingMagicNXPTAM1AuthenticationData *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicNXPTAM2AuthenticationData
    pType = &LLRP_tdThingMagicNXPTAM2AuthenticationData;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicNXPTAM2AuthenticationData = (LLRP_tSThingMagicNXPTAM2AuthenticationData *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPReadbuffer))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPReadbuffer_getwordPointer (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->wordPointer;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_setwordPointer (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  llrp_u16_t Value)
{
    pThis->wordPointer = Value;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPReadbuffer_getbitCount (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->bitCount;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_setbitCount (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  llrp_u16_t Value)
{
    pThis->bitCount = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomNXPAuthenticationType
LLRP_ThingMagicNXPReadbuffer_getAuthtype (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->eAuthtype;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_setAuthtype (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tEThingMagicCustomNXPAuthenticationType eValue)
{
    pThis->eAuthtype = eValue;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPReadbuffer_getsubCommand (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->subCommand;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_setsubCommand (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  llrp_u8_t Value)
{
    pThis->subCommand = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPCommandRequest *
LLRP_ThingMagicNXPReadbuffer_getThingMagicNXPCommandRequest (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->pThingMagicNXPCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_setThingMagicNXPCommandRequest (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tSThingMagicNXPCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicNXPCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPTAM1AuthenticationData *
LLRP_ThingMagicNXPReadbuffer_getThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->pThingMagicNXPTAM1AuthenticationData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_setThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tSThingMagicNXPTAM1AuthenticationData * pValue)
{
    SUBPARAM_SET(pThingMagicNXPTAM1AuthenticationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPTAM2AuthenticationData *
LLRP_ThingMagicNXPReadbuffer_getThingMagicNXPTAM2AuthenticationData (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->pThingMagicNXPTAM2AuthenticationData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_setThingMagicNXPTAM2AuthenticationData (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tSThingMagicNXPTAM2AuthenticationData * pValue)
{
    SUBPARAM_SET(pThingMagicNXPTAM2AuthenticationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPReadbuffer_beginCustom (
  LLRP_tSThingMagicNXPReadbuffer *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbuffer_addCustom (
  LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPReadbuffer))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPReadbuffer_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPReadbuffer_encode (
  const LLRP_tSThingMagicNXPReadbuffer *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->wordPointer,
        &LLRP_fdThingMagicNXPReadbuffer_wordPointer);

    pOps->pfPut_u16(pEncoderStream,
        pThis->bitCount,
        &LLRP_fdThingMagicNXPReadbuffer_bitCount);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eAuthtype,
        &LLRP_fdThingMagicNXPReadbuffer_Authtype);

    pOps->pfPut_u8(pEncoderStream,
        pThis->subCommand,
        &LLRP_fdThingMagicNXPReadbuffer_subCommand);

    pType = &LLRP_tdThingMagicNXPCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPCommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPTAM1AuthenticationData,
        pType);
      
    pType = &LLRP_tdThingMagicNXPTAM2AuthenticationData;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPTAM2AuthenticationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPReadbuffer_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPReadbufferOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPReadbufferOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPReadbufferOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    155,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPReadbufferOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPReadbufferOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPReadbufferOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPReadbufferOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPReadbufferOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPReadbufferOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPReadbufferOpSpecResult_encode,

  
    LLRP_ThingMagicNXPReadbufferOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPReadbufferOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPReadbufferOpSpecResult_Result,
    &LLRP_fdThingMagicNXPReadbufferOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPReadbufferOpSpecResult_NXPReadbufferByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPReadbufferOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPReadbufferOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPReadbufferOpSpecResult_NXPReadbufferByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NXPReadbufferByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPReadbufferOpSpecResult *
LLRP_ThingMagicNXPReadbufferOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPReadbufferOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPReadbufferOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPReadbufferOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPReadbufferOpSpecResult_destruct (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->NXPReadbufferByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPReadbufferOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPReadbufferOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPReadbufferOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPReadbufferOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPReadbufferOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->NXPReadbufferByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPReadbufferOpSpecResult_NXPReadbufferByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPReadbufferOpSpecResult_NXPReadbufferByteStream);
    }
    
}

void
LLRP_ThingMagicNXPReadbufferOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPReadbufferOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPReadbufferOpSpecResult_getResult (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbufferOpSpecResult_setResult (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPReadbufferOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbufferOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPReadbufferOpSpecResult_getNXPReadbufferByteStream (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis)
{
    return pThis->NXPReadbufferByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbufferOpSpecResult_setNXPReadbufferByteStream (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->NXPReadbufferByteStream);

    pThis->NXPReadbufferByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPReadbufferOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPReadbufferOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPReadbufferOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPReadbufferOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPReadbufferOpSpecResult_encode (
  const LLRP_tSThingMagicNXPReadbufferOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPReadbufferOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPReadbufferOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->NXPReadbufferByteStream,
        &LLRP_fdThingMagicNXPReadbufferOpSpecResult_NXPReadbufferByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPReadbufferOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPAuthentication
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPAuthentication =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPAuthentication",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    150,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPAuthentication,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPAuthentication),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPAuthentication_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPAuthentication_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPAuthentication_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPAuthentication_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPAuthentication_encode,

  
    LLRP_ThingMagicNXPAuthentication_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPAuthentication[] =
{
  
    &LLRP_fdThingMagicNXPAuthentication_type,
    &LLRP_fdThingMagicNXPAuthentication_subCommand,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPAuthentication_type =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "type",	// .pName
    LLRP_estThingMagicCustomNXPAuthenticationType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPAuthentication_subCommand =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "subCommand",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPAuthentication *
LLRP_ThingMagicNXPAuthentication_construct (void)
{
    LLRP_tSThingMagicNXPAuthentication *pNew;

    pNew = (LLRP_tSThingMagicNXPAuthentication *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPAuthentication);

    return pNew;
}

void
LLRP_ThingMagicNXPAuthentication_destruct (
  LLRP_tSThingMagicNXPAuthentication *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPAuthentication_decodeFields (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->etype =
                (LLRP_tEThingMagicCustomNXPAuthenticationType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPAuthentication_type);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPAuthentication_type);
    }

    if(NULL != pThis)
    {
        pThis->subCommand =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPAuthentication_subCommand);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPAuthentication_subCommand);
    }
    
}

void
LLRP_ThingMagicNXPAuthentication_assimilateSubParameters (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicNXPCommandRequest
    pType = &LLRP_tdThingMagicNXPCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicNXPCommandRequest = (LLRP_tSThingMagicNXPCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-1 of ThingMagicNXPTAM1AuthenticationData
    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicNXPTAM1AuthenticationData = (LLRP_tSThingMagicNXPTAM1AuthenticationData *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ThingMagicNXPTAM2AuthenticationData
    pType = &LLRP_tdThingMagicNXPTAM2AuthenticationData;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicNXPTAM2AuthenticationData = (LLRP_tSThingMagicNXPTAM2AuthenticationData *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPAuthentication))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomNXPAuthenticationType
LLRP_ThingMagicNXPAuthentication_gettype (
  LLRP_tSThingMagicNXPAuthentication *pThis)
{
    return pThis->etype;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthentication_settype (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tEThingMagicCustomNXPAuthenticationType eValue)
{
    pThis->etype = eValue;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPAuthentication_getsubCommand (
  LLRP_tSThingMagicNXPAuthentication *pThis)
{
    return pThis->subCommand;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthentication_setsubCommand (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  llrp_u8_t Value)
{
    pThis->subCommand = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPCommandRequest *
LLRP_ThingMagicNXPAuthentication_getThingMagicNXPCommandRequest (
  LLRP_tSThingMagicNXPAuthentication *pThis)
{
    return pThis->pThingMagicNXPCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthentication_setThingMagicNXPCommandRequest (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tSThingMagicNXPCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicNXPCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPTAM1AuthenticationData *
LLRP_ThingMagicNXPAuthentication_getThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPAuthentication *pThis)
{
    return pThis->pThingMagicNXPTAM1AuthenticationData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthentication_setThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tSThingMagicNXPTAM1AuthenticationData * pValue)
{
    SUBPARAM_SET(pThingMagicNXPTAM1AuthenticationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPTAM2AuthenticationData *
LLRP_ThingMagicNXPAuthentication_getThingMagicNXPTAM2AuthenticationData (
  LLRP_tSThingMagicNXPAuthentication *pThis)
{
    return pThis->pThingMagicNXPTAM2AuthenticationData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthentication_setThingMagicNXPTAM2AuthenticationData (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tSThingMagicNXPTAM2AuthenticationData * pValue)
{
    SUBPARAM_SET(pThingMagicNXPTAM2AuthenticationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPAuthentication_beginCustom (
  LLRP_tSThingMagicNXPAuthentication *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthentication_addCustom (
  LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPAuthentication))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPAuthentication_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPAuthentication_encode (
  const LLRP_tSThingMagicNXPAuthentication *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->etype,
        &LLRP_fdThingMagicNXPAuthentication_type);

    pOps->pfPut_u8(pEncoderStream,
        pThis->subCommand,
        &LLRP_fdThingMagicNXPAuthentication_subCommand);

    pType = &LLRP_tdThingMagicNXPCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPCommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPTAM1AuthenticationData,
        pType);
      
    pType = &LLRP_tdThingMagicNXPTAM2AuthenticationData;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPTAM2AuthenticationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPAuthentication_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPAuthenticationOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPAuthenticationOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPAuthenticationOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    151,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPAuthenticationOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPAuthenticationOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPAuthenticationOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPAuthenticationOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPAuthenticationOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPAuthenticationOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPAuthenticationOpSpecResult_encode,

  
    LLRP_ThingMagicNXPAuthenticationOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPAuthenticationOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_Result,
    &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_NXPAuthenticationByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPAuthenticationOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPAuthenticationOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPAuthenticationOpSpecResult_NXPAuthenticationByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NXPAuthenticationByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPAuthenticationOpSpecResult *
LLRP_ThingMagicNXPAuthenticationOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPAuthenticationOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPAuthenticationOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPAuthenticationOpSpecResult_destruct (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->NXPAuthenticationByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPAuthenticationOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->NXPAuthenticationByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_NXPAuthenticationByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_NXPAuthenticationByteStream);
    }
    
}

void
LLRP_ThingMagicNXPAuthenticationOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPAuthenticationOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPAuthenticationOpSpecResult_getResult (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthenticationOpSpecResult_setResult (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPAuthenticationOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthenticationOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPAuthenticationOpSpecResult_getNXPAuthenticationByteStream (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis)
{
    return pThis->NXPAuthenticationByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthenticationOpSpecResult_setNXPAuthenticationByteStream (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->NXPAuthenticationByteStream);

    pThis->NXPAuthenticationByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPAuthenticationOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPAuthenticationOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPAuthenticationOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPAuthenticationOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPAuthenticationOpSpecResult_encode (
  const LLRP_tSThingMagicNXPAuthenticationOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->NXPAuthenticationByteStream,
        &LLRP_fdThingMagicNXPAuthenticationOpSpecResult_NXPAuthenticationByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPAuthenticationOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPTAM2AuthenticationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPTAM2AuthenticationData =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPTAM2AuthenticationData",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    152,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPTAM2AuthenticationData,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPTAM2AuthenticationData),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPTAM2AuthenticationData_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPTAM2AuthenticationData_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPTAM2AuthenticationData_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPTAM2AuthenticationData_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPTAM2AuthenticationData_encode,

  
    LLRP_ThingMagicNXPTAM2AuthenticationData_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPTAM2AuthenticationData[] =
{
  
    &LLRP_fdThingMagicNXPTAM2AuthenticationData_offset,
    &LLRP_fdThingMagicNXPTAM2AuthenticationData_ProtMode,
    &LLRP_fdThingMagicNXPTAM2AuthenticationData_BlockCount,
    &LLRP_fdThingMagicNXPTAM2AuthenticationData_profile,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM2AuthenticationData_offset =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "offset",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM2AuthenticationData_ProtMode =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ProtMode",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM2AuthenticationData_BlockCount =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "BlockCount",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM2AuthenticationData_profile =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "profile",	// .pName
    LLRP_estThingMagicNXPProfileType,	// .pEnumTable
};

LLRP_tSThingMagicNXPTAM2AuthenticationData *
LLRP_ThingMagicNXPTAM2AuthenticationData_construct (void)
{
    LLRP_tSThingMagicNXPTAM2AuthenticationData *pNew;

    pNew = (LLRP_tSThingMagicNXPTAM2AuthenticationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPTAM2AuthenticationData);

    return pNew;
}

void
LLRP_ThingMagicNXPTAM2AuthenticationData_destruct (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPTAM2AuthenticationData_decodeFields (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->offset =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM2AuthenticationData_offset);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM2AuthenticationData_offset);
    }
    
    if(NULL != pThis)
    {
        pThis->ProtMode =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM2AuthenticationData_ProtMode);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM2AuthenticationData_ProtMode);
    }
    
    if(NULL != pThis)
    {
        pThis->BlockCount =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM2AuthenticationData_BlockCount);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM2AuthenticationData_BlockCount);
    }
    
    if(NULL != pThis)
    {
        pThis->eprofile =
                (LLRP_tEThingMagicNXPProfileType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM2AuthenticationData_profile);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM2AuthenticationData_profile);
    }

}

void
LLRP_ThingMagicNXPTAM2AuthenticationData_assimilateSubParameters (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicNXPTAM1AuthenticationData
    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicNXPTAM1AuthenticationData = (LLRP_tSThingMagicNXPTAM1AuthenticationData *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPTAM2AuthenticationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPTAM2AuthenticationData_getoffset (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis)
{
    return pThis->offset;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM2AuthenticationData_setoffset (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  llrp_u16_t Value)
{
    pThis->offset = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPTAM2AuthenticationData_getProtMode (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis)
{
    return pThis->ProtMode;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM2AuthenticationData_setProtMode (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  llrp_u8_t Value)
{
    pThis->ProtMode = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPTAM2AuthenticationData_getBlockCount (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis)
{
    return pThis->BlockCount;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM2AuthenticationData_setBlockCount (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  llrp_u8_t Value)
{
    pThis->BlockCount = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicNXPProfileType
LLRP_ThingMagicNXPTAM2AuthenticationData_getprofile (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis)
{
    return pThis->eprofile;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM2AuthenticationData_setprofile (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  LLRP_tEThingMagicNXPProfileType eValue)
{
    pThis->eprofile = eValue;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPTAM1AuthenticationData *
LLRP_ThingMagicNXPTAM2AuthenticationData_getThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis)
{
    return pThis->pThingMagicNXPTAM1AuthenticationData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM2AuthenticationData_setThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  LLRP_tSThingMagicNXPTAM1AuthenticationData * pValue)
{
    SUBPARAM_SET(pThingMagicNXPTAM1AuthenticationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPTAM2AuthenticationData_beginCustom (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM2AuthenticationData_addCustom (
  LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPTAM2AuthenticationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPTAM2AuthenticationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPTAM2AuthenticationData_encode (
  const LLRP_tSThingMagicNXPTAM2AuthenticationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->offset,
        &LLRP_fdThingMagicNXPTAM2AuthenticationData_offset);

    pOps->pfPut_u8(pEncoderStream,
        pThis->ProtMode,
        &LLRP_fdThingMagicNXPTAM2AuthenticationData_ProtMode);

    pOps->pfPut_u8(pEncoderStream,
        pThis->BlockCount,
        &LLRP_fdThingMagicNXPTAM2AuthenticationData_BlockCount);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eprofile,
        &LLRP_fdThingMagicNXPTAM2AuthenticationData_profile);

    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPTAM1AuthenticationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPTAM2AuthenticationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdThingMagicNXPAuthentication)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPCommandRequest
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPCommandRequest =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPCommandRequest",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    160,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPCommandRequest,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPCommandRequest),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPCommandRequest_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPCommandRequest_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPCommandRequest_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPCommandRequest_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPCommandRequest_encode,

  
    LLRP_ThingMagicNXPCommandRequest_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPCommandRequest[] =
{
  
    &LLRP_fdThingMagicNXPCommandRequest_OpSpecID,
    &LLRP_fdThingMagicNXPCommandRequest_AccessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPCommandRequest_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPCommandRequest_AccessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AccessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPCommandRequest *
LLRP_ThingMagicNXPCommandRequest_construct (void)
{
    LLRP_tSThingMagicNXPCommandRequest *pNew;

    pNew = (LLRP_tSThingMagicNXPCommandRequest *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPCommandRequest);

    return pNew;
}

void
LLRP_ThingMagicNXPCommandRequest_destruct (
  LLRP_tSThingMagicNXPCommandRequest *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPCommandRequest_decodeFields (
  LLRP_tSThingMagicNXPCommandRequest *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPCommandRequest_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPCommandRequest_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->AccessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPCommandRequest_AccessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPCommandRequest_AccessPassword);
    }
    
}

void
LLRP_ThingMagicNXPCommandRequest_assimilateSubParameters (
  LLRP_tSThingMagicNXPCommandRequest *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPCommandRequest))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_ThingMagicNXPCommandRequest_getOpSpecID (
  LLRP_tSThingMagicNXPCommandRequest *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPCommandRequest_setOpSpecID (
  LLRP_tSThingMagicNXPCommandRequest *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPCommandRequest_getAccessPassword (
  LLRP_tSThingMagicNXPCommandRequest *pThis)
{
    return pThis->AccessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPCommandRequest_setAccessPassword (
  LLRP_tSThingMagicNXPCommandRequest *pThis,
  llrp_u32_t Value)
{
    pThis->AccessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPCommandRequest_beginCustom (
  LLRP_tSThingMagicNXPCommandRequest *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPCommandRequest_addCustom (
  LLRP_tSThingMagicNXPCommandRequest *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPCommandRequest))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPCommandRequest_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPCommandRequest_encode (
  const LLRP_tSThingMagicNXPCommandRequest *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPCommandRequest_OpSpecID);

    pOps->pfPut_u32(pEncoderStream,
        pThis->AccessPassword,
        &LLRP_fdThingMagicNXPCommandRequest_AccessPassword);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPCommandRequest_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicGEN2ProtocolExtension
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicGEN2ProtocolExtension =
{
    FALSE,	// .bIsMessage
    "ThingMagicGEN2ProtocolExtension",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    161,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicGEN2ProtocolExtension,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicGEN2ProtocolExtension),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicGEN2ProtocolExtension_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicGEN2ProtocolExtension_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicGEN2ProtocolExtension_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicGEN2ProtocolExtension_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicGEN2ProtocolExtension_encode,

  
    LLRP_ThingMagicGEN2ProtocolExtension_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicGEN2ProtocolExtension[] =
{
  
    &LLRP_fdThingMagicGEN2ProtocolExtension_GEN2ProtocolExtension,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicGEN2ProtocolExtension_GEN2ProtocolExtension =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "GEN2ProtocolExtension",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicGEN2ProtocolExtension *
LLRP_ThingMagicGEN2ProtocolExtension_construct (void)
{
    LLRP_tSThingMagicGEN2ProtocolExtension *pNew;

    pNew = (LLRP_tSThingMagicGEN2ProtocolExtension *)
        LLRP_Element_construct(&LLRP_tdThingMagicGEN2ProtocolExtension);

    return pNew;
}

void
LLRP_ThingMagicGEN2ProtocolExtension_destruct (
  LLRP_tSThingMagicGEN2ProtocolExtension *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicGEN2ProtocolExtension_decodeFields (
  LLRP_tSThingMagicGEN2ProtocolExtension *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->GEN2ProtocolExtension =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicGEN2ProtocolExtension_GEN2ProtocolExtension);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicGEN2ProtocolExtension_GEN2ProtocolExtension);
    }
    
}

void
LLRP_ThingMagicGEN2ProtocolExtension_assimilateSubParameters (
  LLRP_tSThingMagicGEN2ProtocolExtension *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicGEN2ProtocolExtension))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicGEN2ProtocolExtension_getGEN2ProtocolExtension (
  LLRP_tSThingMagicGEN2ProtocolExtension *pThis)
{
    return pThis->GEN2ProtocolExtension;
}

LLRP_tResultCode
LLRP_ThingMagicGEN2ProtocolExtension_setGEN2ProtocolExtension (
  LLRP_tSThingMagicGEN2ProtocolExtension *pThis,
  llrp_u8_t Value)
{
    pThis->GEN2ProtocolExtension = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicGEN2ProtocolExtension_beginCustom (
  LLRP_tSThingMagicGEN2ProtocolExtension *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicGEN2ProtocolExtension_addCustom (
  LLRP_tSThingMagicGEN2ProtocolExtension *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicGEN2ProtocolExtension))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicGEN2ProtocolExtension_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicGEN2ProtocolExtension_encode (
  const LLRP_tSThingMagicGEN2ProtocolExtension *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->GEN2ProtocolExtension,
        &LLRP_fdThingMagicGEN2ProtocolExtension_GEN2ProtocolExtension);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicGEN2ProtocolExtension_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPUntraceable
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPUntraceable =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPUntraceable",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    156,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPUntraceable,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPUntraceable),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPUntraceable_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPUntraceable_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPUntraceable_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPUntraceable_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPUntraceable_encode,

  
    LLRP_ThingMagicNXPUntraceable_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPUntraceable[] =
{
  
    &LLRP_fdThingMagicNXPUntraceable_epc,
    &LLRP_fdThingMagicNXPUntraceable_epcLength,
    &LLRP_fdThingMagicNXPUntraceable_tid,
    &LLRP_fdThingMagicNXPUntraceable_userMemory,
    &LLRP_fdThingMagicNXPUntraceable_range,
    &LLRP_fdThingMagicNXPUntraceable_subCommand,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceable_epc =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "epc",	// .pName
    LLRP_estThingMagicCustomNXPUntraceableEPC,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceable_epcLength =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "epcLength",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceable_tid =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "tid",	// .pName
    LLRP_estThingMagicCustomNXPUntraceableTID,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceable_userMemory =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "userMemory",	// .pName
    LLRP_estThingMagicCustomNXPUntraceableUserMemory,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceable_range =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "range",	// .pName
    LLRP_estThingMagicCustomNXPUntraceableRange,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceable_subCommand =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "subCommand",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPUntraceable *
LLRP_ThingMagicNXPUntraceable_construct (void)
{
    LLRP_tSThingMagicNXPUntraceable *pNew;

    pNew = (LLRP_tSThingMagicNXPUntraceable *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPUntraceable);

    return pNew;
}

void
LLRP_ThingMagicNXPUntraceable_destruct (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPUntraceable_decodeFields (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eepc =
                (LLRP_tEThingMagicCustomNXPUntraceableEPC) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceable_epc);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceable_epc);
    }

    if(NULL != pThis)
    {
        pThis->epcLength =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceable_epcLength);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceable_epcLength);
    }
    
    if(NULL != pThis)
    {
        pThis->etid =
                (LLRP_tEThingMagicCustomNXPUntraceableTID) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceable_tid);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceable_tid);
    }

    if(NULL != pThis)
    {
        pThis->euserMemory =
                (LLRP_tEThingMagicCustomNXPUntraceableUserMemory) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceable_userMemory);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceable_userMemory);
    }

    if(NULL != pThis)
    {
        pThis->erange =
                (LLRP_tEThingMagicCustomNXPUntraceableRange) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceable_range);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceable_range);
    }

    if(NULL != pThis)
    {
        pThis->subCommand =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceable_subCommand);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceable_subCommand);
    }
    
}

void
LLRP_ThingMagicNXPUntraceable_assimilateSubParameters (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 1 of ThingMagicNXPCommandRequest
    pType = &LLRP_tdThingMagicNXPCommandRequest;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicNXPCommandRequest = (LLRP_tSThingMagicNXPCommandRequest *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 1 of ThingMagicNXPUntraceableAuthentication
    pType = &LLRP_tdThingMagicNXPUntraceableAuthentication;
  
    if(NULL == pCur || pCur->elementHdr.pType != pType)
    {
        goto missing;
    }
    pThis->pThingMagicNXPUntraceableAuthentication = (LLRP_tSThingMagicNXPUntraceableAuthentication *) pCur;
    pCur = pCur->pNextAllSubParameters;
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPUntraceable))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomNXPUntraceableEPC
LLRP_ThingMagicNXPUntraceable_getepc (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->eepc;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_setepc (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tEThingMagicCustomNXPUntraceableEPC eValue)
{
    pThis->eepc = eValue;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPUntraceable_getepcLength (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->epcLength;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_setepcLength (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  llrp_u32_t Value)
{
    pThis->epcLength = Value;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomNXPUntraceableTID
LLRP_ThingMagicNXPUntraceable_gettid (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->etid;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_settid (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tEThingMagicCustomNXPUntraceableTID eValue)
{
    pThis->etid = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomNXPUntraceableUserMemory
LLRP_ThingMagicNXPUntraceable_getuserMemory (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->euserMemory;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_setuserMemory (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tEThingMagicCustomNXPUntraceableUserMemory eValue)
{
    pThis->euserMemory = eValue;
    return LLRP_RC_OK;
}


LLRP_tEThingMagicCustomNXPUntraceableRange
LLRP_ThingMagicNXPUntraceable_getrange (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->erange;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_setrange (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tEThingMagicCustomNXPUntraceableRange eValue)
{
    pThis->erange = eValue;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPUntraceable_getsubCommand (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->subCommand;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_setsubCommand (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  llrp_u8_t Value)
{
    pThis->subCommand = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPCommandRequest *
LLRP_ThingMagicNXPUntraceable_getThingMagicNXPCommandRequest (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->pThingMagicNXPCommandRequest;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_setThingMagicNXPCommandRequest (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tSThingMagicNXPCommandRequest * pValue)
{
    SUBPARAM_SET(pThingMagicNXPCommandRequest, pValue);

    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPUntraceableAuthentication *
LLRP_ThingMagicNXPUntraceable_getThingMagicNXPUntraceableAuthentication (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->pThingMagicNXPUntraceableAuthentication;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_setThingMagicNXPUntraceableAuthentication (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tSThingMagicNXPUntraceableAuthentication * pValue)
{
    SUBPARAM_SET(pThingMagicNXPUntraceableAuthentication, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPUntraceable_beginCustom (
  LLRP_tSThingMagicNXPUntraceable *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceable_addCustom (
  LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPUntraceable))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPUntraceable_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPUntraceable_encode (
  const LLRP_tSThingMagicNXPUntraceable *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eepc,
        &LLRP_fdThingMagicNXPUntraceable_epc);

    pOps->pfPut_u32(pEncoderStream,
        pThis->epcLength,
        &LLRP_fdThingMagicNXPUntraceable_epcLength);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->etid,
        &LLRP_fdThingMagicNXPUntraceable_tid);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->euserMemory,
        &LLRP_fdThingMagicNXPUntraceable_userMemory);

    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->erange,
        &LLRP_fdThingMagicNXPUntraceable_range);

    pOps->pfPut_u8(pEncoderStream,
        pThis->subCommand,
        &LLRP_fdThingMagicNXPUntraceable_subCommand);

    pType = &LLRP_tdThingMagicNXPCommandRequest;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPCommandRequest,
        pType);
      
    pType = &LLRP_tdThingMagicNXPUntraceableAuthentication;
      
    pOps->pfPutRequiredSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPUntraceableAuthentication,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPUntraceable_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPUntraceableOpSpecResult
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPUntraceableOpSpecResult =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPUntraceableOpSpecResult",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    157,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPUntraceableOpSpecResult,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPUntraceableOpSpecResult),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPUntraceableOpSpecResult_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPUntraceableOpSpecResult_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPUntraceableOpSpecResult_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPUntraceableOpSpecResult_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPUntraceableOpSpecResult_encode,

  
    LLRP_ThingMagicNXPUntraceableOpSpecResult_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPUntraceableOpSpecResult[] =
{
  
    &LLRP_fdThingMagicNXPUntraceableOpSpecResult_Result,
    &LLRP_fdThingMagicNXPUntraceableOpSpecResult_OpSpecID,
    &LLRP_fdThingMagicNXPUntraceableOpSpecResult_NXPUntraceableByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceableOpSpecResult_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceableOpSpecResult_OpSpecID =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OpSpecID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceableOpSpecResult_NXPUntraceableByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "NXPUntraceableByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPUntraceableOpSpecResult *
LLRP_ThingMagicNXPUntraceableOpSpecResult_construct (void)
{
    LLRP_tSThingMagicNXPUntraceableOpSpecResult *pNew;

    pNew = (LLRP_tSThingMagicNXPUntraceableOpSpecResult *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPUntraceableOpSpecResult);

    return pNew;
}

void
LLRP_ThingMagicNXPUntraceableOpSpecResult_destruct (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis)
{
  
    LLRP_u8v_clear(&pThis->NXPUntraceableByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPUntraceableOpSpecResult_decodeFields (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceableOpSpecResult_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceableOpSpecResult_Result);
    }

    if(NULL != pThis)
    {
        pThis->OpSpecID =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceableOpSpecResult_OpSpecID);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceableOpSpecResult_OpSpecID);
    }
    
    if(NULL != pThis)
    {
        pThis->NXPUntraceableByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceableOpSpecResult_NXPUntraceableByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceableOpSpecResult_NXPUntraceableByteStream);
    }
    
}

void
LLRP_ThingMagicNXPUntraceableOpSpecResult_assimilateSubParameters (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPUntraceableOpSpecResult))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicNXPUntraceableOpSpecResult_getResult (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableOpSpecResult_setResult (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


llrp_u16_t
LLRP_ThingMagicNXPUntraceableOpSpecResult_getOpSpecID (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis)
{
    return pThis->OpSpecID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableOpSpecResult_setOpSpecID (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis,
  llrp_u16_t Value)
{
    pThis->OpSpecID = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPUntraceableOpSpecResult_getNXPUntraceableByteStream (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis)
{
    return pThis->NXPUntraceableByteStream;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableOpSpecResult_setNXPUntraceableByteStream (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->NXPUntraceableByteStream);

    pThis->NXPUntraceableByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPUntraceableOpSpecResult_beginCustom (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableOpSpecResult_addCustom (
  LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPUntraceableOpSpecResult))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPUntraceableOpSpecResult_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPUntraceableOpSpecResult_encode (
  const LLRP_tSThingMagicNXPUntraceableOpSpecResult *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicNXPUntraceableOpSpecResult_Result);

    pOps->pfPut_u16(pEncoderStream,
        pThis->OpSpecID,
        &LLRP_fdThingMagicNXPUntraceableOpSpecResult_OpSpecID);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->NXPUntraceableByteStream,
        &LLRP_fdThingMagicNXPUntraceableOpSpecResult_NXPUntraceableByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPUntraceableOpSpecResult_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpecResult)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPUntraceableAuthentication
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPUntraceableAuthentication =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPUntraceableAuthentication",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    158,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPUntraceableAuthentication,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPUntraceableAuthentication),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPUntraceableAuthentication_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPUntraceableAuthentication_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPUntraceableAuthentication_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPUntraceableAuthentication_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPUntraceableAuthentication_encode,

  
    LLRP_ThingMagicNXPUntraceableAuthentication_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPUntraceableAuthentication[] =
{
  
    &LLRP_fdThingMagicNXPUntraceableAuthentication_authType,
    &LLRP_fdThingMagicNXPUntraceableAuthentication_accessPassword,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceableAuthentication_authType =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "authType",	// .pName
    LLRP_estThingMagicCustomNXPUntraceableAuthType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPUntraceableAuthentication_accessPassword =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "accessPassword",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPUntraceableAuthentication *
LLRP_ThingMagicNXPUntraceableAuthentication_construct (void)
{
    LLRP_tSThingMagicNXPUntraceableAuthentication *pNew;

    pNew = (LLRP_tSThingMagicNXPUntraceableAuthentication *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPUntraceableAuthentication);

    return pNew;
}

void
LLRP_ThingMagicNXPUntraceableAuthentication_destruct (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPUntraceableAuthentication_decodeFields (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eauthType =
                (LLRP_tEThingMagicCustomNXPUntraceableAuthType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceableAuthentication_authType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceableAuthentication_authType);
    }

    if(NULL != pThis)
    {
        pThis->accessPassword =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicNXPUntraceableAuthentication_accessPassword);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicNXPUntraceableAuthentication_accessPassword);
    }
    
}

void
LLRP_ThingMagicNXPUntraceableAuthentication_assimilateSubParameters (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of ThingMagicNXPTAM1AuthenticationData
    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pThingMagicNXPTAM1AuthenticationData = (LLRP_tSThingMagicNXPTAM1AuthenticationData *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPUntraceableAuthentication))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomNXPUntraceableAuthType
LLRP_ThingMagicNXPUntraceableAuthentication_getauthType (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis)
{
    return pThis->eauthType;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableAuthentication_setauthType (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis,
  LLRP_tEThingMagicCustomNXPUntraceableAuthType eValue)
{
    pThis->eauthType = eValue;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicNXPUntraceableAuthentication_getaccessPassword (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis)
{
    return pThis->accessPassword;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableAuthentication_setaccessPassword (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis,
  llrp_u32_t Value)
{
    pThis->accessPassword = Value;
    return LLRP_RC_OK;
}


LLRP_tSThingMagicNXPTAM1AuthenticationData *
LLRP_ThingMagicNXPUntraceableAuthentication_getThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis)
{
    return pThis->pThingMagicNXPTAM1AuthenticationData;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableAuthentication_setThingMagicNXPTAM1AuthenticationData (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis,
  LLRP_tSThingMagicNXPTAM1AuthenticationData * pValue)
{
    SUBPARAM_SET(pThingMagicNXPTAM1AuthenticationData, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPUntraceableAuthentication_beginCustom (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPUntraceableAuthentication_addCustom (
  LLRP_tSThingMagicNXPUntraceableAuthentication *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPUntraceableAuthentication))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPUntraceableAuthentication_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPUntraceableAuthentication_encode (
  const LLRP_tSThingMagicNXPUntraceableAuthentication *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eauthType,
        &LLRP_fdThingMagicNXPUntraceableAuthentication_authType);

    pOps->pfPut_u32(pEncoderStream,
        pThis->accessPassword,
        &LLRP_fdThingMagicNXPUntraceableAuthentication_accessPassword);

    pType = &LLRP_tdThingMagicNXPTAM1AuthenticationData;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pThingMagicNXPTAM1AuthenticationData,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPUntraceableAuthentication_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdThingMagicNXPUntraceable)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicNXPTAM1AuthenticationData
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicNXPTAM1AuthenticationData =
{
    FALSE,	// .bIsMessage
    "ThingMagicNXPTAM1AuthenticationData",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    153,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicNXPTAM1AuthenticationData,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicNXPTAM1AuthenticationData),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicNXPTAM1AuthenticationData_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicNXPTAM1AuthenticationData_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicNXPTAM1AuthenticationData_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicNXPTAM1AuthenticationData_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicNXPTAM1AuthenticationData_encode,

  
    LLRP_ThingMagicNXPTAM1AuthenticationData_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicNXPTAM1AuthenticationData[] =
{
  
    &LLRP_fdThingMagicNXPTAM1AuthenticationData_Authentication,
    &LLRP_fdThingMagicNXPTAM1AuthenticationData_CSI,
    &LLRP_fdThingMagicNXPTAM1AuthenticationData_keyID,
    &LLRP_fdThingMagicNXPTAM1AuthenticationData_KeyLength,
    &LLRP_fdThingMagicNXPTAM1AuthenticationData_Key,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM1AuthenticationData_Authentication =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Authentication",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM1AuthenticationData_CSI =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "CSI",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM1AuthenticationData_keyID =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "keyID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM1AuthenticationData_KeyLength =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "KeyLength",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicNXPTAM1AuthenticationData_Key =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Key",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicNXPTAM1AuthenticationData *
LLRP_ThingMagicNXPTAM1AuthenticationData_construct (void)
{
    LLRP_tSThingMagicNXPTAM1AuthenticationData *pNew;

    pNew = (LLRP_tSThingMagicNXPTAM1AuthenticationData *)
        LLRP_Element_construct(&LLRP_tdThingMagicNXPTAM1AuthenticationData);

    return pNew;
}

void
LLRP_ThingMagicNXPTAM1AuthenticationData_destruct (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis)
{
  
    LLRP_u8v_clear(&pThis->Key);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicNXPTAM1AuthenticationData_decodeFields (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Authentication =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM1AuthenticationData_Authentication);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM1AuthenticationData_Authentication);
    }
    
    if(NULL != pThis)
    {
        pThis->CSI =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM1AuthenticationData_CSI);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM1AuthenticationData_CSI);
    }
    
    if(NULL != pThis)
    {
        pThis->keyID =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM1AuthenticationData_keyID);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM1AuthenticationData_keyID);
    }
    
    if(NULL != pThis)
    {
        pThis->KeyLength =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM1AuthenticationData_KeyLength);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM1AuthenticationData_KeyLength);
    }
    
    if(NULL != pThis)
    {
        pThis->Key =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdThingMagicNXPTAM1AuthenticationData_Key);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdThingMagicNXPTAM1AuthenticationData_Key);
    }
    
}

void
LLRP_ThingMagicNXPTAM1AuthenticationData_assimilateSubParameters (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicNXPTAM1AuthenticationData))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ThingMagicNXPTAM1AuthenticationData_getAuthentication (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis)
{
    return pThis->Authentication;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM1AuthenticationData_setAuthentication (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  llrp_u8_t Value)
{
    pThis->Authentication = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPTAM1AuthenticationData_getCSI (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis)
{
    return pThis->CSI;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM1AuthenticationData_setCSI (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  llrp_u8_t Value)
{
    pThis->CSI = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPTAM1AuthenticationData_getkeyID (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis)
{
    return pThis->keyID;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM1AuthenticationData_setkeyID (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  llrp_u8_t Value)
{
    pThis->keyID = Value;
    return LLRP_RC_OK;
}


llrp_u8_t
LLRP_ThingMagicNXPTAM1AuthenticationData_getKeyLength (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis)
{
    return pThis->KeyLength;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM1AuthenticationData_setKeyLength (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  llrp_u8_t Value)
{
    pThis->KeyLength = Value;
    return LLRP_RC_OK;
}


llrp_u8v_t
LLRP_ThingMagicNXPTAM1AuthenticationData_getKey (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis)
{
    return pThis->Key;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM1AuthenticationData_setKey (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->Key);

    pThis->Key = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicNXPTAM1AuthenticationData_beginCustom (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicNXPTAM1AuthenticationData_addCustom (
  LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicNXPTAM1AuthenticationData))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicNXPTAM1AuthenticationData_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicNXPTAM1AuthenticationData_encode (
  const LLRP_tSThingMagicNXPTAM1AuthenticationData *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->Authentication,
        &LLRP_fdThingMagicNXPTAM1AuthenticationData_Authentication);

    pOps->pfPut_u8(pEncoderStream,
        pThis->CSI,
        &LLRP_fdThingMagicNXPTAM1AuthenticationData_CSI);

    pOps->pfPut_u8(pEncoderStream,
        pThis->keyID,
        &LLRP_fdThingMagicNXPTAM1AuthenticationData_keyID);

    pOps->pfPut_u8(pEncoderStream,
        pThis->KeyLength,
        &LLRP_fdThingMagicNXPTAM1AuthenticationData_KeyLength);

    pOps->pfPut_u8v(pEncoderStream,
        pThis->Key,
        &LLRP_fdThingMagicNXPTAM1AuthenticationData_Key);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicNXPTAM1AuthenticationData_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessCommandOpSpec)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdThingMagicNXPTAM2AuthenticationData)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdThingMagicNXPAuthentication)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdThingMagicNXPUntraceableAuthentication)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicRegulatoryConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicRegulatoryConfiguration =
{
    FALSE,	// .bIsMessage
    "ThingMagicRegulatoryConfiguration",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    163,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicRegulatoryConfiguration,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicRegulatoryConfiguration),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicRegulatoryConfiguration_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicRegulatoryConfiguration_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicRegulatoryConfiguration_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicRegulatoryConfiguration_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicRegulatoryConfiguration_encode,

  
    LLRP_ThingMagicRegulatoryConfiguration_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicRegulatoryConfiguration[] =
{
  
    NULL
};


LLRP_tSThingMagicRegulatoryConfiguration *
LLRP_ThingMagicRegulatoryConfiguration_construct (void)
{
    LLRP_tSThingMagicRegulatoryConfiguration *pNew;

    pNew = (LLRP_tSThingMagicRegulatoryConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicRegulatoryConfiguration);

    return pNew;
}

void
LLRP_ThingMagicRegulatoryConfiguration_destruct (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicRegulatoryConfiguration_decodeFields (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicRegulatoryConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of RegulatoryMode
    pType = &LLRP_tdRegulatoryMode;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pRegulatoryMode = (LLRP_tSRegulatoryMode *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of RegulatoryModulation
    pType = &LLRP_tdRegulatoryModulation;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pRegulatoryModulation = (LLRP_tSRegulatoryModulation *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of RegulatoryOntime
    pType = &LLRP_tdRegulatoryOntime;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pRegulatoryOntime = (LLRP_tSRegulatoryOntime *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of RegulatoryOfftime
    pType = &LLRP_tdRegulatoryOfftime;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pRegulatoryOfftime = (LLRP_tSRegulatoryOfftime *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of RegulatoryEnable
    pType = &LLRP_tdRegulatoryEnable;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pRegulatoryEnable = (LLRP_tSRegulatoryEnable *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicRegulatoryConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSRegulatoryMode *
LLRP_ThingMagicRegulatoryConfiguration_getRegulatoryMode (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis)
{
    return pThis->pRegulatoryMode;
}

LLRP_tResultCode
LLRP_ThingMagicRegulatoryConfiguration_setRegulatoryMode (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSRegulatoryMode * pValue)
{
    SUBPARAM_SET(pRegulatoryMode, pValue);

    return LLRP_RC_OK;
}


LLRP_tSRegulatoryModulation *
LLRP_ThingMagicRegulatoryConfiguration_getRegulatoryModulation (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis)
{
    return pThis->pRegulatoryModulation;
}

LLRP_tResultCode
LLRP_ThingMagicRegulatoryConfiguration_setRegulatoryModulation (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSRegulatoryModulation * pValue)
{
    SUBPARAM_SET(pRegulatoryModulation, pValue);

    return LLRP_RC_OK;
}


LLRP_tSRegulatoryOntime *
LLRP_ThingMagicRegulatoryConfiguration_getRegulatoryOntime (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis)
{
    return pThis->pRegulatoryOntime;
}

LLRP_tResultCode
LLRP_ThingMagicRegulatoryConfiguration_setRegulatoryOntime (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSRegulatoryOntime * pValue)
{
    SUBPARAM_SET(pRegulatoryOntime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSRegulatoryOfftime *
LLRP_ThingMagicRegulatoryConfiguration_getRegulatoryOfftime (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis)
{
    return pThis->pRegulatoryOfftime;
}

LLRP_tResultCode
LLRP_ThingMagicRegulatoryConfiguration_setRegulatoryOfftime (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSRegulatoryOfftime * pValue)
{
    SUBPARAM_SET(pRegulatoryOfftime, pValue);

    return LLRP_RC_OK;
}


LLRP_tSRegulatoryEnable *
LLRP_ThingMagicRegulatoryConfiguration_getRegulatoryEnable (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis)
{
    return pThis->pRegulatoryEnable;
}

LLRP_tResultCode
LLRP_ThingMagicRegulatoryConfiguration_setRegulatoryEnable (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSRegulatoryEnable * pValue)
{
    SUBPARAM_SET(pRegulatoryEnable, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicRegulatoryConfiguration_beginCustom (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicRegulatoryConfiguration_addCustom (
  LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicRegulatoryConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicRegulatoryConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicRegulatoryConfiguration_encode (
  const LLRP_tSThingMagicRegulatoryConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdRegulatoryMode;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pRegulatoryMode,
        pType);
      
    pType = &LLRP_tdRegulatoryModulation;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pRegulatoryModulation,
        pType);
      
    pType = &LLRP_tdRegulatoryOntime;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pRegulatoryOntime,
        pType);
      
    pType = &LLRP_tdRegulatoryOfftime;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pRegulatoryOfftime,
        pType);
      
    pType = &LLRP_tdRegulatoryEnable;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pRegulatoryEnable,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicRegulatoryConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter RegulatoryMode
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdRegulatoryMode =
{
    FALSE,	// .bIsMessage
    "RegulatoryMode",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    164,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdRegulatoryMode,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSRegulatoryMode),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_RegulatoryMode_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_RegulatoryMode_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_RegulatoryMode_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_RegulatoryMode_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_RegulatoryMode_encode,

  
    LLRP_RegulatoryMode_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdRegulatoryMode[] =
{
  
    &LLRP_fdRegulatoryMode_ModeParam,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdRegulatoryMode_ModeParam =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ModeParam",	// .pName
    LLRP_estThingMagicRegulatoryMode,	// .pEnumTable
};

LLRP_tSRegulatoryMode *
LLRP_RegulatoryMode_construct (void)
{
    LLRP_tSRegulatoryMode *pNew;

    pNew = (LLRP_tSRegulatoryMode *)
        LLRP_Element_construct(&LLRP_tdRegulatoryMode);

    return pNew;
}

void
LLRP_RegulatoryMode_destruct (
  LLRP_tSRegulatoryMode *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_RegulatoryMode_decodeFields (
  LLRP_tSRegulatoryMode *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eModeParam =
                (LLRP_tEThingMagicRegulatoryMode) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdRegulatoryMode_ModeParam);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdRegulatoryMode_ModeParam);
    }

}

void
LLRP_RegulatoryMode_assimilateSubParameters (
  LLRP_tSRegulatoryMode *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdRegulatoryMode))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicRegulatoryMode
LLRP_RegulatoryMode_getModeParam (
  LLRP_tSRegulatoryMode *pThis)
{
    return pThis->eModeParam;
}

LLRP_tResultCode
LLRP_RegulatoryMode_setModeParam (
  LLRP_tSRegulatoryMode *pThis,
  LLRP_tEThingMagicRegulatoryMode eValue)
{
    pThis->eModeParam = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_RegulatoryMode_beginCustom (
  LLRP_tSRegulatoryMode *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_RegulatoryMode_addCustom (
  LLRP_tSRegulatoryMode *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdRegulatoryMode))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_RegulatoryMode_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_RegulatoryMode_encode (
  const LLRP_tSRegulatoryMode *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eModeParam,
        &LLRP_fdRegulatoryMode_ModeParam);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_RegulatoryMode_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter RegulatoryModulation
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdRegulatoryModulation =
{
    FALSE,	// .bIsMessage
    "RegulatoryModulation",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    165,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdRegulatoryModulation,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSRegulatoryModulation),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_RegulatoryModulation_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_RegulatoryModulation_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_RegulatoryModulation_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_RegulatoryModulation_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_RegulatoryModulation_encode,

  
    LLRP_RegulatoryModulation_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdRegulatoryModulation[] =
{
  
    &LLRP_fdRegulatoryModulation_ModulationParam,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdRegulatoryModulation_ModulationParam =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ModulationParam",	// .pName
    LLRP_estThingMagicRegulatoryModulation,	// .pEnumTable
};

LLRP_tSRegulatoryModulation *
LLRP_RegulatoryModulation_construct (void)
{
    LLRP_tSRegulatoryModulation *pNew;

    pNew = (LLRP_tSRegulatoryModulation *)
        LLRP_Element_construct(&LLRP_tdRegulatoryModulation);

    return pNew;
}

void
LLRP_RegulatoryModulation_destruct (
  LLRP_tSRegulatoryModulation *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_RegulatoryModulation_decodeFields (
  LLRP_tSRegulatoryModulation *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eModulationParam =
                (LLRP_tEThingMagicRegulatoryModulation) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdRegulatoryModulation_ModulationParam);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdRegulatoryModulation_ModulationParam);
    }

}

void
LLRP_RegulatoryModulation_assimilateSubParameters (
  LLRP_tSRegulatoryModulation *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdRegulatoryModulation))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicRegulatoryModulation
LLRP_RegulatoryModulation_getModulationParam (
  LLRP_tSRegulatoryModulation *pThis)
{
    return pThis->eModulationParam;
}

LLRP_tResultCode
LLRP_RegulatoryModulation_setModulationParam (
  LLRP_tSRegulatoryModulation *pThis,
  LLRP_tEThingMagicRegulatoryModulation eValue)
{
    pThis->eModulationParam = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_RegulatoryModulation_beginCustom (
  LLRP_tSRegulatoryModulation *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_RegulatoryModulation_addCustom (
  LLRP_tSRegulatoryModulation *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdRegulatoryModulation))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_RegulatoryModulation_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_RegulatoryModulation_encode (
  const LLRP_tSRegulatoryModulation *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eModulationParam,
        &LLRP_fdRegulatoryModulation_ModulationParam);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_RegulatoryModulation_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter RegulatoryOntime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdRegulatoryOntime =
{
    FALSE,	// .bIsMessage
    "RegulatoryOntime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    166,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdRegulatoryOntime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSRegulatoryOntime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_RegulatoryOntime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_RegulatoryOntime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_RegulatoryOntime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_RegulatoryOntime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_RegulatoryOntime_encode,

  
    LLRP_RegulatoryOntime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdRegulatoryOntime[] =
{
  
    &LLRP_fdRegulatoryOntime_OntimeParam,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdRegulatoryOntime_OntimeParam =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OntimeParam",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSRegulatoryOntime *
LLRP_RegulatoryOntime_construct (void)
{
    LLRP_tSRegulatoryOntime *pNew;

    pNew = (LLRP_tSRegulatoryOntime *)
        LLRP_Element_construct(&LLRP_tdRegulatoryOntime);

    return pNew;
}

void
LLRP_RegulatoryOntime_destruct (
  LLRP_tSRegulatoryOntime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_RegulatoryOntime_decodeFields (
  LLRP_tSRegulatoryOntime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OntimeParam =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdRegulatoryOntime_OntimeParam);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdRegulatoryOntime_OntimeParam);
    }
    
}

void
LLRP_RegulatoryOntime_assimilateSubParameters (
  LLRP_tSRegulatoryOntime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdRegulatoryOntime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_RegulatoryOntime_getOntimeParam (
  LLRP_tSRegulatoryOntime *pThis)
{
    return pThis->OntimeParam;
}

LLRP_tResultCode
LLRP_RegulatoryOntime_setOntimeParam (
  LLRP_tSRegulatoryOntime *pThis,
  llrp_u32_t Value)
{
    pThis->OntimeParam = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_RegulatoryOntime_beginCustom (
  LLRP_tSRegulatoryOntime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_RegulatoryOntime_addCustom (
  LLRP_tSRegulatoryOntime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdRegulatoryOntime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_RegulatoryOntime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_RegulatoryOntime_encode (
  const LLRP_tSRegulatoryOntime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->OntimeParam,
        &LLRP_fdRegulatoryOntime_OntimeParam);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_RegulatoryOntime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter RegulatoryOfftime
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdRegulatoryOfftime =
{
    FALSE,	// .bIsMessage
    "RegulatoryOfftime",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    167,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdRegulatoryOfftime,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSRegulatoryOfftime),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_RegulatoryOfftime_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_RegulatoryOfftime_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_RegulatoryOfftime_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_RegulatoryOfftime_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_RegulatoryOfftime_encode,

  
    LLRP_RegulatoryOfftime_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdRegulatoryOfftime[] =
{
  
    &LLRP_fdRegulatoryOfftime_OfftimeParam,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdRegulatoryOfftime_OfftimeParam =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "OfftimeParam",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSRegulatoryOfftime *
LLRP_RegulatoryOfftime_construct (void)
{
    LLRP_tSRegulatoryOfftime *pNew;

    pNew = (LLRP_tSRegulatoryOfftime *)
        LLRP_Element_construct(&LLRP_tdRegulatoryOfftime);

    return pNew;
}

void
LLRP_RegulatoryOfftime_destruct (
  LLRP_tSRegulatoryOfftime *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_RegulatoryOfftime_decodeFields (
  LLRP_tSRegulatoryOfftime *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->OfftimeParam =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdRegulatoryOfftime_OfftimeParam);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdRegulatoryOfftime_OfftimeParam);
    }
    
}

void
LLRP_RegulatoryOfftime_assimilateSubParameters (
  LLRP_tSRegulatoryOfftime *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdRegulatoryOfftime))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_RegulatoryOfftime_getOfftimeParam (
  LLRP_tSRegulatoryOfftime *pThis)
{
    return pThis->OfftimeParam;
}

LLRP_tResultCode
LLRP_RegulatoryOfftime_setOfftimeParam (
  LLRP_tSRegulatoryOfftime *pThis,
  llrp_u32_t Value)
{
    pThis->OfftimeParam = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_RegulatoryOfftime_beginCustom (
  LLRP_tSRegulatoryOfftime *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_RegulatoryOfftime_addCustom (
  LLRP_tSRegulatoryOfftime *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdRegulatoryOfftime))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_RegulatoryOfftime_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_RegulatoryOfftime_encode (
  const LLRP_tSRegulatoryOfftime *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->OfftimeParam,
        &LLRP_fdRegulatoryOfftime_OfftimeParam);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_RegulatoryOfftime_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter RegulatoryEnable
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdRegulatoryEnable =
{
    FALSE,	// .bIsMessage
    "RegulatoryEnable",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    168,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdRegulatoryEnable,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSRegulatoryEnable),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_RegulatoryEnable_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_RegulatoryEnable_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_RegulatoryEnable_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_RegulatoryEnable_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_RegulatoryEnable_encode,

  
    LLRP_RegulatoryEnable_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdRegulatoryEnable[] =
{
  
    &LLRP_fdRegulatoryEnable_EnableParam,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdRegulatoryEnable_EnableParam =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "EnableParam",	// .pName
    LLRP_estThingMagicRegulatoryEnable,	// .pEnumTable
};

LLRP_tSRegulatoryEnable *
LLRP_RegulatoryEnable_construct (void)
{
    LLRP_tSRegulatoryEnable *pNew;

    pNew = (LLRP_tSRegulatoryEnable *)
        LLRP_Element_construct(&LLRP_tdRegulatoryEnable);

    return pNew;
}

void
LLRP_RegulatoryEnable_destruct (
  LLRP_tSRegulatoryEnable *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_RegulatoryEnable_decodeFields (
  LLRP_tSRegulatoryEnable *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eEnableParam =
                (LLRP_tEThingMagicRegulatoryEnable) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdRegulatoryEnable_EnableParam);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdRegulatoryEnable_EnableParam);
    }

}

void
LLRP_RegulatoryEnable_assimilateSubParameters (
  LLRP_tSRegulatoryEnable *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdRegulatoryEnable))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicRegulatoryEnable
LLRP_RegulatoryEnable_getEnableParam (
  LLRP_tSRegulatoryEnable *pThis)
{
    return pThis->eEnableParam;
}

LLRP_tResultCode
LLRP_RegulatoryEnable_setEnableParam (
  LLRP_tSRegulatoryEnable *pThis,
  LLRP_tEThingMagicRegulatoryEnable eValue)
{
    pThis->eEnableParam = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_RegulatoryEnable_beginCustom (
  LLRP_tSRegulatoryEnable *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_RegulatoryEnable_addCustom (
  LLRP_tSRegulatoryEnable *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdRegulatoryEnable))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_RegulatoryEnable_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_RegulatoryEnable_encode (
  const LLRP_tSRegulatoryEnable *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eEnableParam,
        &LLRP_fdRegulatoryEnable_EnableParam);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_RegulatoryEnable_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicFrequencyConfiguration
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicFrequencyConfiguration =
{
    FALSE,	// .bIsMessage
    "ThingMagicFrequencyConfiguration",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    169,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicFrequencyConfiguration,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicFrequencyConfiguration),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicFrequencyConfiguration_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicFrequencyConfiguration_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicFrequencyConfiguration_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicFrequencyConfiguration_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicFrequencyConfiguration_encode,

  
    LLRP_ThingMagicFrequencyConfiguration_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicFrequencyConfiguration[] =
{
  
    &LLRP_fdThingMagicFrequencyConfiguration_Hopping,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicFrequencyConfiguration_Hopping =
{
    LLRP_FT_U1,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Hopping",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicFrequencyConfiguration *
LLRP_ThingMagicFrequencyConfiguration_construct (void)
{
    LLRP_tSThingMagicFrequencyConfiguration *pNew;

    pNew = (LLRP_tSThingMagicFrequencyConfiguration *)
        LLRP_Element_construct(&LLRP_tdThingMagicFrequencyConfiguration);

    return pNew;
}

void
LLRP_ThingMagicFrequencyConfiguration_destruct (
  LLRP_tSThingMagicFrequencyConfiguration *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicFrequencyConfiguration_decodeFields (
  LLRP_tSThingMagicFrequencyConfiguration *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Hopping =
                pOps->pfGet_u1(pDecoderStream,
                        &LLRP_fdThingMagicFrequencyConfiguration_Hopping);
    }
    else
    {
        pOps->pfGet_u1(pDecoderStream,
                &LLRP_fdThingMagicFrequencyConfiguration_Hopping);
    }
    
    pOps->pfGet_reserved(pDecoderStream, 7);

}

void
LLRP_ThingMagicFrequencyConfiguration_assimilateSubParameters (
  LLRP_tSThingMagicFrequencyConfiguration *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of CustomFrequencyHopTable
    pType = &LLRP_tdCustomFrequencyHopTable;
  
    while(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        SUBPARAM_ATTACH(listCustomFrequencyHopTable, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of CustomFixedFrequency
    pType = &LLRP_tdCustomFixedFrequency;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pCustomFixedFrequency = (LLRP_tSCustomFixedFrequency *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicFrequencyConfiguration))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u1_t
LLRP_ThingMagicFrequencyConfiguration_getHopping (
  LLRP_tSThingMagicFrequencyConfiguration *pThis)
{
    return pThis->Hopping;
}

LLRP_tResultCode
LLRP_ThingMagicFrequencyConfiguration_setHopping (
  LLRP_tSThingMagicFrequencyConfiguration *pThis,
  llrp_u1_t Value)
{
    pThis->Hopping = Value;
    return LLRP_RC_OK;
}


LLRP_tSCustomFrequencyHopTable *
LLRP_ThingMagicFrequencyConfiguration_beginCustomFrequencyHopTable (
  LLRP_tSThingMagicFrequencyConfiguration *pThis)
{
    return pThis->listCustomFrequencyHopTable;
}

LLRP_tResultCode
LLRP_ThingMagicFrequencyConfiguration_addCustomFrequencyHopTable (
  LLRP_tSThingMagicFrequencyConfiguration *pThis,
  LLRP_tSCustomFrequencyHopTable *pValue)
{
    SUBPARAM_ADD(listCustomFrequencyHopTable, pValue);

    return LLRP_RC_OK;
}

LLRP_tSCustomFrequencyHopTable *
LLRP_ThingMagicFrequencyConfiguration_nextCustomFrequencyHopTable (
  LLRP_tSCustomFrequencyHopTable *pCurrent)
{
    return (LLRP_tSCustomFrequencyHopTable *)
                pCurrent->hdr.pNextSubParameter;
}

void
LLRP_ThingMagicFrequencyConfiguration_clearCustomFrequencyHopTable (
  LLRP_tSThingMagicFrequencyConfiguration *pThis)
{
    SUBPARAM_CLEAR(listCustomFrequencyHopTable);
}


LLRP_tSCustomFixedFrequency *
LLRP_ThingMagicFrequencyConfiguration_getCustomFixedFrequency (
  LLRP_tSThingMagicFrequencyConfiguration *pThis)
{
    return pThis->pCustomFixedFrequency;
}

LLRP_tResultCode
LLRP_ThingMagicFrequencyConfiguration_setCustomFixedFrequency (
  LLRP_tSThingMagicFrequencyConfiguration *pThis,
  LLRP_tSCustomFixedFrequency * pValue)
{
    SUBPARAM_SET(pCustomFixedFrequency, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicFrequencyConfiguration_beginCustom (
  LLRP_tSThingMagicFrequencyConfiguration *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicFrequencyConfiguration_addCustom (
  LLRP_tSThingMagicFrequencyConfiguration *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicFrequencyConfiguration))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicFrequencyConfiguration_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicFrequencyConfiguration_encode (
  const LLRP_tSThingMagicFrequencyConfiguration *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u1(pEncoderStream,
        pThis->Hopping,
        &LLRP_fdThingMagicFrequencyConfiguration_Hopping);

    pOps->pfPut_reserved(pEncoderStream, 7);

    pType = &LLRP_tdCustomFrequencyHopTable;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustomFrequencyHopTable,
        pType);
      
    pType = &LLRP_tdCustomFixedFrequency;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pCustomFixedFrequency,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicFrequencyConfiguration_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter CustomFrequencyHopTable
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdCustomFrequencyHopTable =
{
    FALSE,	// .bIsMessage
    "CustomFrequencyHopTable",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    170,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdCustomFrequencyHopTable,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSCustomFrequencyHopTable),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_CustomFrequencyHopTable_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_CustomFrequencyHopTable_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_CustomFrequencyHopTable_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_CustomFrequencyHopTable_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_CustomFrequencyHopTable_encode,

  
    LLRP_CustomFrequencyHopTable_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdCustomFrequencyHopTable[] =
{
  
    &LLRP_fdCustomFrequencyHopTable_HopTableID,
    &LLRP_fdCustomFrequencyHopTable_Frequency,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdCustomFrequencyHopTable_HopTableID =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "HopTableID",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdCustomFrequencyHopTable_Frequency =
{
    LLRP_FT_U32V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Frequency",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSCustomFrequencyHopTable *
LLRP_CustomFrequencyHopTable_construct (void)
{
    LLRP_tSCustomFrequencyHopTable *pNew;

    pNew = (LLRP_tSCustomFrequencyHopTable *)
        LLRP_Element_construct(&LLRP_tdCustomFrequencyHopTable);

    return pNew;
}

void
LLRP_CustomFrequencyHopTable_destruct (
  LLRP_tSCustomFrequencyHopTable *pThis)
{
  
    LLRP_u32v_clear(&pThis->Frequency);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_CustomFrequencyHopTable_decodeFields (
  LLRP_tSCustomFrequencyHopTable *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->HopTableID =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdCustomFrequencyHopTable_HopTableID);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdCustomFrequencyHopTable_HopTableID);
    }
    
    if(NULL != pThis)
    {
        pThis->Frequency =
                pOps->pfGet_u32v(pDecoderStream,
                        &LLRP_fdCustomFrequencyHopTable_Frequency);
    }
    else
    {
        pOps->pfGet_u32v(pDecoderStream,
                &LLRP_fdCustomFrequencyHopTable_Frequency);
    }
    
}

void
LLRP_CustomFrequencyHopTable_assimilateSubParameters (
  LLRP_tSCustomFrequencyHopTable *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdCustomFrequencyHopTable))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_CustomFrequencyHopTable_getHopTableID (
  LLRP_tSCustomFrequencyHopTable *pThis)
{
    return pThis->HopTableID;
}

LLRP_tResultCode
LLRP_CustomFrequencyHopTable_setHopTableID (
  LLRP_tSCustomFrequencyHopTable *pThis,
  llrp_u8_t Value)
{
    pThis->HopTableID = Value;
    return LLRP_RC_OK;
}


llrp_u32v_t
LLRP_CustomFrequencyHopTable_getFrequency (
  LLRP_tSCustomFrequencyHopTable *pThis)
{
    return pThis->Frequency;
}

LLRP_tResultCode
LLRP_CustomFrequencyHopTable_setFrequency (
  LLRP_tSCustomFrequencyHopTable *pThis,
  llrp_u32v_t Value)
{
    LLRP_u32v_clear(&pThis->Frequency);

    pThis->Frequency = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_CustomFrequencyHopTable_beginCustom (
  LLRP_tSCustomFrequencyHopTable *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_CustomFrequencyHopTable_addCustom (
  LLRP_tSCustomFrequencyHopTable *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdCustomFrequencyHopTable))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_CustomFrequencyHopTable_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_CustomFrequencyHopTable_encode (
  const LLRP_tSCustomFrequencyHopTable *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->HopTableID,
        &LLRP_fdCustomFrequencyHopTable_HopTableID);

    pOps->pfPut_u32v(pEncoderStream,
        pThis->Frequency,
        &LLRP_fdCustomFrequencyHopTable_Frequency);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_CustomFrequencyHopTable_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter CustomFixedFrequency
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdCustomFixedFrequency =
{
    FALSE,	// .bIsMessage
    "CustomFixedFrequency",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    171,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdCustomFixedFrequency,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSCustomFixedFrequency),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_CustomFixedFrequency_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_CustomFixedFrequency_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_CustomFixedFrequency_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_CustomFixedFrequency_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_CustomFixedFrequency_encode,

  
    LLRP_CustomFixedFrequency_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdCustomFixedFrequency[] =
{
  
    &LLRP_fdCustomFixedFrequency_Frequency,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdCustomFixedFrequency_Frequency =
{
    LLRP_FT_U32V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Frequency",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSCustomFixedFrequency *
LLRP_CustomFixedFrequency_construct (void)
{
    LLRP_tSCustomFixedFrequency *pNew;

    pNew = (LLRP_tSCustomFixedFrequency *)
        LLRP_Element_construct(&LLRP_tdCustomFixedFrequency);

    return pNew;
}

void
LLRP_CustomFixedFrequency_destruct (
  LLRP_tSCustomFixedFrequency *pThis)
{
  
    LLRP_u32v_clear(&pThis->Frequency);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_CustomFixedFrequency_decodeFields (
  LLRP_tSCustomFixedFrequency *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Frequency =
                pOps->pfGet_u32v(pDecoderStream,
                        &LLRP_fdCustomFixedFrequency_Frequency);
    }
    else
    {
        pOps->pfGet_u32v(pDecoderStream,
                &LLRP_fdCustomFixedFrequency_Frequency);
    }
    
}

void
LLRP_CustomFixedFrequency_assimilateSubParameters (
  LLRP_tSCustomFixedFrequency *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdCustomFixedFrequency))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32v_t
LLRP_CustomFixedFrequency_getFrequency (
  LLRP_tSCustomFixedFrequency *pThis)
{
    return pThis->Frequency;
}

LLRP_tResultCode
LLRP_CustomFixedFrequency_setFrequency (
  LLRP_tSCustomFixedFrequency *pThis,
  llrp_u32v_t Value)
{
    LLRP_u32v_clear(&pThis->Frequency);

    pThis->Frequency = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_CustomFixedFrequency_beginCustom (
  LLRP_tSCustomFixedFrequency *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_CustomFixedFrequency_addCustom (
  LLRP_tSCustomFixedFrequency *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdCustomFixedFrequency))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_CustomFixedFrequency_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_CustomFixedFrequency_encode (
  const LLRP_tSCustomFixedFrequency *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32v(pEncoderStream,
        pThis->Frequency,
        &LLRP_fdCustomFixedFrequency_Frequency);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_CustomFixedFrequency_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCustomProtocolID
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCustomProtocolID =
{
    FALSE,	// .bIsMessage
    "ThingMagicCustomProtocolID",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    175,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicCustomProtocolID,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicCustomProtocolID),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCustomProtocolID_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCustomProtocolID_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCustomProtocolID_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCustomProtocolID_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCustomProtocolID_encode,

  
    LLRP_ThingMagicCustomProtocolID_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCustomProtocolID[] =
{
  
    &LLRP_fdThingMagicCustomProtocolID_ProtocolId,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomProtocolID_ProtocolId =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ProtocolId",	// .pName
    LLRP_estThingMagicCustomProtocol,	// .pEnumTable
};

LLRP_tSThingMagicCustomProtocolID *
LLRP_ThingMagicCustomProtocolID_construct (void)
{
    LLRP_tSThingMagicCustomProtocolID *pNew;

    pNew = (LLRP_tSThingMagicCustomProtocolID *)
        LLRP_Element_construct(&LLRP_tdThingMagicCustomProtocolID);

    return pNew;
}

void
LLRP_ThingMagicCustomProtocolID_destruct (
  LLRP_tSThingMagicCustomProtocolID *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCustomProtocolID_decodeFields (
  LLRP_tSThingMagicCustomProtocolID *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eProtocolId =
                (LLRP_tEThingMagicCustomProtocol) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicCustomProtocolID_ProtocolId);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicCustomProtocolID_ProtocolId);
    }

}

void
LLRP_ThingMagicCustomProtocolID_assimilateSubParameters (
  LLRP_tSThingMagicCustomProtocolID *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomProtocol
LLRP_ThingMagicCustomProtocolID_getProtocolId (
  LLRP_tSThingMagicCustomProtocolID *pThis)
{
    return pThis->eProtocolId;
}

LLRP_tResultCode
LLRP_ThingMagicCustomProtocolID_setProtocolId (
  LLRP_tSThingMagicCustomProtocolID *pThis,
  LLRP_tEThingMagicCustomProtocol eValue)
{
    pThis->eProtocolId = eValue;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicCustomProtocolID_encode (
  const LLRP_tSThingMagicCustomProtocolID *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eProtocolId,
        &LLRP_fdThingMagicCustomProtocolID_ProtocolId);

}


llrp_bool_t
LLRP_ThingMagicCustomProtocolID_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdTagReportData)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCustomReadplanWeight
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCustomReadplanWeight =
{
    FALSE,	// .bIsMessage
    "ThingMagicCustomReadplanWeight",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    176,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicCustomReadplanWeight,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicCustomReadplanWeight),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCustomReadplanWeight_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCustomReadplanWeight_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCustomReadplanWeight_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCustomReadplanWeight_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCustomReadplanWeight_encode,

  
    LLRP_ThingMagicCustomReadplanWeight_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCustomReadplanWeight[] =
{
  
    &LLRP_fdThingMagicCustomReadplanWeight_planWeight,
    &LLRP_fdThingMagicCustomReadplanWeight_multiPlanWeight,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomReadplanWeight_planWeight =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "planWeight",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomReadplanWeight_multiPlanWeight =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "multiPlanWeight",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicCustomReadplanWeight *
LLRP_ThingMagicCustomReadplanWeight_construct (void)
{
    LLRP_tSThingMagicCustomReadplanWeight *pNew;

    pNew = (LLRP_tSThingMagicCustomReadplanWeight *)
        LLRP_Element_construct(&LLRP_tdThingMagicCustomReadplanWeight);

    return pNew;
}

void
LLRP_ThingMagicCustomReadplanWeight_destruct (
  LLRP_tSThingMagicCustomReadplanWeight *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCustomReadplanWeight_decodeFields (
  LLRP_tSThingMagicCustomReadplanWeight *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->planWeight =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicCustomReadplanWeight_planWeight);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicCustomReadplanWeight_planWeight);
    }
    
    if(NULL != pThis)
    {
        pThis->multiPlanWeight =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicCustomReadplanWeight_multiPlanWeight);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicCustomReadplanWeight_multiPlanWeight);
    }
    
}

void
LLRP_ThingMagicCustomReadplanWeight_assimilateSubParameters (
  LLRP_tSThingMagicCustomReadplanWeight *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicCustomReadplanWeight_getplanWeight (
  LLRP_tSThingMagicCustomReadplanWeight *pThis)
{
    return pThis->planWeight;
}

LLRP_tResultCode
LLRP_ThingMagicCustomReadplanWeight_setplanWeight (
  LLRP_tSThingMagicCustomReadplanWeight *pThis,
  llrp_u32_t Value)
{
    pThis->planWeight = Value;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicCustomReadplanWeight_getmultiPlanWeight (
  LLRP_tSThingMagicCustomReadplanWeight *pThis)
{
    return pThis->multiPlanWeight;
}

LLRP_tResultCode
LLRP_ThingMagicCustomReadplanWeight_setmultiPlanWeight (
  LLRP_tSThingMagicCustomReadplanWeight *pThis,
  llrp_u32_t Value)
{
    pThis->multiPlanWeight = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicCustomReadplanWeight_encode (
  const LLRP_tSThingMagicCustomReadplanWeight *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->planWeight,
        &LLRP_fdThingMagicCustomReadplanWeight_planWeight);

    pOps->pfPut_u32(pEncoderStream,
        pThis->multiPlanWeight,
        &LLRP_fdThingMagicCustomReadplanWeight_multiPlanWeight);

}


llrp_bool_t
LLRP_ThingMagicCustomReadplanWeight_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdInventoryParameterSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicAntennaReturnloss
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicAntennaReturnloss =
{
    FALSE,	// .bIsMessage
    "ThingMagicAntennaReturnloss",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    181,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicAntennaReturnloss,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicAntennaReturnloss),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicAntennaReturnloss_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicAntennaReturnloss_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicAntennaReturnloss_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicAntennaReturnloss_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicAntennaReturnloss_encode,

  
    LLRP_ThingMagicAntennaReturnloss_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicAntennaReturnloss[] =
{
  
    NULL
};


LLRP_tSThingMagicAntennaReturnloss *
LLRP_ThingMagicAntennaReturnloss_construct (void)
{
    LLRP_tSThingMagicAntennaReturnloss *pNew;

    pNew = (LLRP_tSThingMagicAntennaReturnloss *)
        LLRP_Element_construct(&LLRP_tdThingMagicAntennaReturnloss);

    return pNew;
}

void
LLRP_ThingMagicAntennaReturnloss_destruct (
  LLRP_tSThingMagicAntennaReturnloss *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicAntennaReturnloss_decodeFields (
  LLRP_tSThingMagicAntennaReturnloss *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicAntennaReturnloss_assimilateSubParameters (
  LLRP_tSThingMagicAntennaReturnloss *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of ReturnlossValue
    pType = &LLRP_tdReturnlossValue;
  
    while(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        SUBPARAM_ATTACH(listReturnlossValue, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicAntennaReturnloss))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSReturnlossValue *
LLRP_ThingMagicAntennaReturnloss_beginReturnlossValue (
  LLRP_tSThingMagicAntennaReturnloss *pThis)
{
    return pThis->listReturnlossValue;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaReturnloss_addReturnlossValue (
  LLRP_tSThingMagicAntennaReturnloss *pThis,
  LLRP_tSReturnlossValue *pValue)
{
    SUBPARAM_ADD(listReturnlossValue, pValue);

    return LLRP_RC_OK;
}

LLRP_tSReturnlossValue *
LLRP_ThingMagicAntennaReturnloss_nextReturnlossValue (
  LLRP_tSReturnlossValue *pCurrent)
{
    return (LLRP_tSReturnlossValue *)
                pCurrent->hdr.pNextSubParameter;
}

void
LLRP_ThingMagicAntennaReturnloss_clearReturnlossValue (
  LLRP_tSThingMagicAntennaReturnloss *pThis)
{
    SUBPARAM_CLEAR(listReturnlossValue);
}


LLRP_tSParameter *
LLRP_ThingMagicAntennaReturnloss_beginCustom (
  LLRP_tSThingMagicAntennaReturnloss *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicAntennaReturnloss_addCustom (
  LLRP_tSThingMagicAntennaReturnloss *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicAntennaReturnloss))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicAntennaReturnloss_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicAntennaReturnloss_encode (
  const LLRP_tSThingMagicAntennaReturnloss *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdReturnlossValue;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listReturnlossValue,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicAntennaReturnloss_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ReturnlossValue
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdReturnlossValue =
{
    FALSE,	// .bIsMessage
    "ReturnlossValue",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    182,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdReturnlossValue,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSReturnlossValue),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ReturnlossValue_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ReturnlossValue_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ReturnlossValue_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ReturnlossValue_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ReturnlossValue_encode,

  
    LLRP_ReturnlossValue_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdReturnlossValue[] =
{
  
    &LLRP_fdReturnlossValue_Port,
    &LLRP_fdReturnlossValue_Value,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdReturnlossValue_Port =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Port",	// .pName
    NULL,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdReturnlossValue_Value =
{
    LLRP_FT_S32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Value",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSReturnlossValue *
LLRP_ReturnlossValue_construct (void)
{
    LLRP_tSReturnlossValue *pNew;

    pNew = (LLRP_tSReturnlossValue *)
        LLRP_Element_construct(&LLRP_tdReturnlossValue);

    return pNew;
}

void
LLRP_ReturnlossValue_destruct (
  LLRP_tSReturnlossValue *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ReturnlossValue_decodeFields (
  LLRP_tSReturnlossValue *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Port =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdReturnlossValue_Port);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdReturnlossValue_Port);
    }
    
    if(NULL != pThis)
    {
        pThis->Value =
                pOps->pfGet_s32(pDecoderStream,
                        &LLRP_fdReturnlossValue_Value);
    }
    else
    {
        pOps->pfGet_s32(pDecoderStream,
                &LLRP_fdReturnlossValue_Value);
    }
    
}

void
LLRP_ReturnlossValue_assimilateSubParameters (
  LLRP_tSReturnlossValue *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdReturnlossValue))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_ReturnlossValue_getPort (
  LLRP_tSReturnlossValue *pThis)
{
    return pThis->Port;
}

LLRP_tResultCode
LLRP_ReturnlossValue_setPort (
  LLRP_tSReturnlossValue *pThis,
  llrp_u8_t Value)
{
    pThis->Port = Value;
    return LLRP_RC_OK;
}


llrp_s32_t
LLRP_ReturnlossValue_getValue (
  LLRP_tSReturnlossValue *pThis)
{
    return pThis->Value;
}

LLRP_tResultCode
LLRP_ReturnlossValue_setValue (
  LLRP_tSReturnlossValue *pThis,
  llrp_s32_t Value)
{
    pThis->Value = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ReturnlossValue_beginCustom (
  LLRP_tSReturnlossValue *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ReturnlossValue_addCustom (
  LLRP_tSReturnlossValue *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdReturnlossValue))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ReturnlossValue_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ReturnlossValue_encode (
  const LLRP_tSReturnlossValue *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->Port,
        &LLRP_fdReturnlossValue_Port);

    pOps->pfPut_s32(pEncoderStream,
        pThis->Value,
        &LLRP_fdReturnlossValue_Value);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ReturnlossValue_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicAntennaReturnloss)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCustomInventorySpecID
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCustomInventorySpecID =
{
    FALSE,	// .bIsMessage
    "ThingMagicCustomInventorySpecID",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    183,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicCustomInventorySpecID,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicCustomInventorySpecID),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCustomInventorySpecID_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCustomInventorySpecID_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCustomInventorySpecID_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCustomInventorySpecID_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCustomInventorySpecID_encode,

  
    LLRP_ThingMagicCustomInventorySpecID_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCustomInventorySpecID[] =
{
  
    &LLRP_fdThingMagicCustomInventorySpecID_InventorySpecId,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomInventorySpecID_InventorySpecId =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "InventorySpecId",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicCustomInventorySpecID *
LLRP_ThingMagicCustomInventorySpecID_construct (void)
{
    LLRP_tSThingMagicCustomInventorySpecID *pNew;

    pNew = (LLRP_tSThingMagicCustomInventorySpecID *)
        LLRP_Element_construct(&LLRP_tdThingMagicCustomInventorySpecID);

    return pNew;
}

void
LLRP_ThingMagicCustomInventorySpecID_destruct (
  LLRP_tSThingMagicCustomInventorySpecID *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCustomInventorySpecID_decodeFields (
  LLRP_tSThingMagicCustomInventorySpecID *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->InventorySpecId =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicCustomInventorySpecID_InventorySpecId);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicCustomInventorySpecID_InventorySpecId);
    }
    
}

void
LLRP_ThingMagicCustomInventorySpecID_assimilateSubParameters (
  LLRP_tSThingMagicCustomInventorySpecID *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_ThingMagicCustomInventorySpecID_getInventorySpecId (
  LLRP_tSThingMagicCustomInventorySpecID *pThis)
{
    return pThis->InventorySpecId;
}

LLRP_tResultCode
LLRP_ThingMagicCustomInventorySpecID_setInventorySpecId (
  LLRP_tSThingMagicCustomInventorySpecID *pThis,
  llrp_u32_t Value)
{
    pThis->InventorySpecId = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicCustomInventorySpecID_encode (
  const LLRP_tSThingMagicCustomInventorySpecID *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->InventorySpecId,
        &LLRP_fdThingMagicCustomInventorySpecID_InventorySpecId);

}


llrp_bool_t
LLRP_ThingMagicCustomInventorySpecID_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdAccessSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicMetadata
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicMetadata =
{
    FALSE,	// .bIsMessage
    "ThingMagicMetadata",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    194,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicMetadata,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicMetadata),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicMetadata_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicMetadata_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicMetadata_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicMetadata_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicMetadata_encode,

  
    LLRP_ThingMagicMetadata_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicMetadata[] =
{
  
    &LLRP_fdThingMagicMetadata_Metadata,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicMetadata_Metadata =
{
    LLRP_FT_E16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Metadata",	// .pName
    LLRP_estThingMagicCustomMetadataFlag,	// .pEnumTable
};

LLRP_tSThingMagicMetadata *
LLRP_ThingMagicMetadata_construct (void)
{
    LLRP_tSThingMagicMetadata *pNew;

    pNew = (LLRP_tSThingMagicMetadata *)
        LLRP_Element_construct(&LLRP_tdThingMagicMetadata);

    return pNew;
}

void
LLRP_ThingMagicMetadata_destruct (
  LLRP_tSThingMagicMetadata *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicMetadata_decodeFields (
  LLRP_tSThingMagicMetadata *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eMetadata =
                (LLRP_tEThingMagicCustomMetadataFlag) pOps->pfGet_e16(pDecoderStream,
                        &LLRP_fdThingMagicMetadata_Metadata);
    }
    else
    {
        pOps->pfGet_e16(pDecoderStream,
                &LLRP_fdThingMagicMetadata_Metadata);
    }

}

void
LLRP_ThingMagicMetadata_assimilateSubParameters (
  LLRP_tSThingMagicMetadata *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicMetadata))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomMetadataFlag
LLRP_ThingMagicMetadata_getMetadata (
  LLRP_tSThingMagicMetadata *pThis)
{
    return pThis->eMetadata;
}

LLRP_tResultCode
LLRP_ThingMagicMetadata_setMetadata (
  LLRP_tSThingMagicMetadata *pThis,
  LLRP_tEThingMagicCustomMetadataFlag eValue)
{
    pThis->eMetadata = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicMetadata_beginCustom (
  LLRP_tSThingMagicMetadata *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicMetadata_addCustom (
  LLRP_tSThingMagicMetadata *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicMetadata))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicMetadata_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicMetadata_encode (
  const LLRP_tSThingMagicMetadata *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e16(pEncoderStream,
        (int)pThis->eMetadata,
        &LLRP_fdThingMagicMetadata_Metadata);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicMetadata_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicStatsEnable
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicStatsEnable =
{
    FALSE,	// .bIsMessage
    "ThingMagicStatsEnable",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    195,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicStatsEnable,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicStatsEnable),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicStatsEnable_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicStatsEnable_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicStatsEnable_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicStatsEnable_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicStatsEnable_encode,

  
    LLRP_ThingMagicStatsEnable_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicStatsEnable[] =
{
  
    &LLRP_fdThingMagicStatsEnable_StatsEnable,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicStatsEnable_StatsEnable =
{
    LLRP_FT_E16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "StatsEnable",	// .pName
    LLRP_estThingMagicCustomStatsEnableFlag,	// .pEnumTable
};

LLRP_tSThingMagicStatsEnable *
LLRP_ThingMagicStatsEnable_construct (void)
{
    LLRP_tSThingMagicStatsEnable *pNew;

    pNew = (LLRP_tSThingMagicStatsEnable *)
        LLRP_Element_construct(&LLRP_tdThingMagicStatsEnable);

    return pNew;
}

void
LLRP_ThingMagicStatsEnable_destruct (
  LLRP_tSThingMagicStatsEnable *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicStatsEnable_decodeFields (
  LLRP_tSThingMagicStatsEnable *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eStatsEnable =
                (LLRP_tEThingMagicCustomStatsEnableFlag) pOps->pfGet_e16(pDecoderStream,
                        &LLRP_fdThingMagicStatsEnable_StatsEnable);
    }
    else
    {
        pOps->pfGet_e16(pDecoderStream,
                &LLRP_fdThingMagicStatsEnable_StatsEnable);
    }

}

void
LLRP_ThingMagicStatsEnable_assimilateSubParameters (
  LLRP_tSThingMagicStatsEnable *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicStatsEnable))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomStatsEnableFlag
LLRP_ThingMagicStatsEnable_getStatsEnable (
  LLRP_tSThingMagicStatsEnable *pThis)
{
    return pThis->eStatsEnable;
}

LLRP_tResultCode
LLRP_ThingMagicStatsEnable_setStatsEnable (
  LLRP_tSThingMagicStatsEnable *pThis,
  LLRP_tEThingMagicCustomStatsEnableFlag eValue)
{
    pThis->eStatsEnable = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicStatsEnable_beginCustom (
  LLRP_tSThingMagicStatsEnable *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicStatsEnable_addCustom (
  LLRP_tSThingMagicStatsEnable *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicStatsEnable))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicStatsEnable_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicStatsEnable_encode (
  const LLRP_tSThingMagicStatsEnable *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e16(pEncoderStream,
        (int)pThis->eStatsEnable,
        &LLRP_fdThingMagicStatsEnable_StatsEnable);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicStatsEnable_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicReaderStats
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicReaderStats =
{
    FALSE,	// .bIsMessage
    "ThingMagicReaderStats",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    196,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicReaderStats,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicReaderStats),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicReaderStats_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicReaderStats_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicReaderStats_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicReaderStats_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicReaderStats_encode,

  
    LLRP_ThingMagicReaderStats_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicReaderStats[] =
{
  
    NULL
};


LLRP_tSThingMagicReaderStats *
LLRP_ThingMagicReaderStats_construct (void)
{
    LLRP_tSThingMagicReaderStats *pNew;

    pNew = (LLRP_tSThingMagicReaderStats *)
        LLRP_Element_construct(&LLRP_tdThingMagicReaderStats);

    return pNew;
}

void
LLRP_ThingMagicReaderStats_destruct (
  LLRP_tSThingMagicReaderStats *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicReaderStats_decodeFields (
  LLRP_tSThingMagicReaderStats *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
}

void
LLRP_ThingMagicReaderStats_assimilateSubParameters (
  LLRP_tSThingMagicReaderStats *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of CustomStatsValue
    pType = &LLRP_tdCustomStatsValue;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pCustomStatsValue = (LLRP_tSCustomStatsValue *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicReaderStats))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tSCustomStatsValue *
LLRP_ThingMagicReaderStats_getCustomStatsValue (
  LLRP_tSThingMagicReaderStats *pThis)
{
    return pThis->pCustomStatsValue;
}

LLRP_tResultCode
LLRP_ThingMagicReaderStats_setCustomStatsValue (
  LLRP_tSThingMagicReaderStats *pThis,
  LLRP_tSCustomStatsValue * pValue)
{
    SUBPARAM_SET(pCustomStatsValue, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicReaderStats_beginCustom (
  LLRP_tSThingMagicReaderStats *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicReaderStats_addCustom (
  LLRP_tSThingMagicReaderStats *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicReaderStats))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicReaderStats_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicReaderStats_encode (
  const LLRP_tSThingMagicReaderStats *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pType = &LLRP_tdCustomStatsValue;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pCustomStatsValue,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicReaderStats_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdGET_READER_CONFIG_RESPONSE)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdSET_READER_CONFIG)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter CustomRFSurveySpec
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdCustomRFSurveySpec =
{
    FALSE,	// .bIsMessage
    "CustomRFSurveySpec",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    218,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdCustomRFSurveySpec,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSCustomRFSurveySpec),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_CustomRFSurveySpec_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_CustomRFSurveySpec_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_CustomRFSurveySpec_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_CustomRFSurveySpec_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_CustomRFSurveySpec_encode,

  
    LLRP_CustomRFSurveySpec_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdCustomRFSurveySpec[] =
{
  
    &LLRP_fdCustomRFSurveySpec_StatsEnable,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdCustomRFSurveySpec_StatsEnable =
{
    LLRP_FT_E16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "StatsEnable",	// .pName
    LLRP_estThingMagicCustomStatsEnableFlag,	// .pEnumTable
};

LLRP_tSCustomRFSurveySpec *
LLRP_CustomRFSurveySpec_construct (void)
{
    LLRP_tSCustomRFSurveySpec *pNew;

    pNew = (LLRP_tSCustomRFSurveySpec *)
        LLRP_Element_construct(&LLRP_tdCustomRFSurveySpec);

    return pNew;
}

void
LLRP_CustomRFSurveySpec_destruct (
  LLRP_tSCustomRFSurveySpec *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_CustomRFSurveySpec_decodeFields (
  LLRP_tSCustomRFSurveySpec *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eStatsEnable =
                (LLRP_tEThingMagicCustomStatsEnableFlag) pOps->pfGet_e16(pDecoderStream,
                        &LLRP_fdCustomRFSurveySpec_StatsEnable);
    }
    else
    {
        pOps->pfGet_e16(pDecoderStream,
                &LLRP_fdCustomRFSurveySpec_StatsEnable);
    }

}

void
LLRP_CustomRFSurveySpec_assimilateSubParameters (
  LLRP_tSCustomRFSurveySpec *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomStatsEnableFlag
LLRP_CustomRFSurveySpec_getStatsEnable (
  LLRP_tSCustomRFSurveySpec *pThis)
{
    return pThis->eStatsEnable;
}

LLRP_tResultCode
LLRP_CustomRFSurveySpec_setStatsEnable (
  LLRP_tSCustomRFSurveySpec *pThis,
  LLRP_tEThingMagicCustomStatsEnableFlag eValue)
{
    pThis->eStatsEnable = eValue;
    return LLRP_RC_OK;
}


void
LLRP_CustomRFSurveySpec_encode (
  const LLRP_tSCustomRFSurveySpec *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e16(pEncoderStream,
        (int)pThis->eStatsEnable,
        &LLRP_fdCustomRFSurveySpec_StatsEnable);

}


llrp_bool_t
LLRP_CustomRFSurveySpec_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdRFSurveySpec)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter CustomStatsValue
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdCustomStatsValue =
{
    FALSE,	// .bIsMessage
    "CustomStatsValue",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    197,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdCustomStatsValue,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSCustomStatsValue),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_CustomStatsValue_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_CustomStatsValue_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_CustomStatsValue_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_CustomStatsValue_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_CustomStatsValue_encode,

  
    LLRP_CustomStatsValue_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdCustomStatsValue[] =
{
  
    &LLRP_fdCustomStatsValue_StatsEnable,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdCustomStatsValue_StatsEnable =
{
    LLRP_FT_E16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "StatsEnable",	// .pName
    LLRP_estThingMagicCustomStatsEnableFlag,	// .pEnumTable
};

LLRP_tSCustomStatsValue *
LLRP_CustomStatsValue_construct (void)
{
    LLRP_tSCustomStatsValue *pNew;

    pNew = (LLRP_tSCustomStatsValue *)
        LLRP_Element_construct(&LLRP_tdCustomStatsValue);

    return pNew;
}

void
LLRP_CustomStatsValue_destruct (
  LLRP_tSCustomStatsValue *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_CustomStatsValue_decodeFields (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eStatsEnable =
                (LLRP_tEThingMagicCustomStatsEnableFlag) pOps->pfGet_e16(pDecoderStream,
                        &LLRP_fdCustomStatsValue_StatsEnable);
    }
    else
    {
        pOps->pfGet_e16(pDecoderStream,
                &LLRP_fdCustomStatsValue_StatsEnable);
    }

}

void
LLRP_CustomStatsValue_assimilateSubParameters (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of TemperatureParam
    pType = &LLRP_tdTemperatureParam;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pTemperatureParam = (LLRP_tSTemperatureParam *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ProtocolParam
    pType = &LLRP_tdProtocolParam;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pProtocolParam = (LLRP_tSProtocolParam *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of AntennaParam
    pType = &LLRP_tdAntennaParam;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pAntennaParam = (LLRP_tSAntennaParam *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of FrequencyParam
    pType = &LLRP_tdFrequencyParam;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pFrequencyParam = (LLRP_tSFrequencyParam *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of ConnectedAntennaList
    pType = &LLRP_tdConnectedAntennaList;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pConnectedAntennaList = (LLRP_tSConnectedAntennaList *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of perAntennaStatsList
    pType = &LLRP_tdperAntennaStatsList;
  
    while(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        SUBPARAM_ATTACH(listperAntennaStatsList, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdCustomStatsValue))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomStatsEnableFlag
LLRP_CustomStatsValue_getStatsEnable (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->eStatsEnable;
}

LLRP_tResultCode
LLRP_CustomStatsValue_setStatsEnable (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tEThingMagicCustomStatsEnableFlag eValue)
{
    pThis->eStatsEnable = eValue;
    return LLRP_RC_OK;
}


LLRP_tSTemperatureParam *
LLRP_CustomStatsValue_getTemperatureParam (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->pTemperatureParam;
}

LLRP_tResultCode
LLRP_CustomStatsValue_setTemperatureParam (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSTemperatureParam * pValue)
{
    SUBPARAM_SET(pTemperatureParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSProtocolParam *
LLRP_CustomStatsValue_getProtocolParam (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->pProtocolParam;
}

LLRP_tResultCode
LLRP_CustomStatsValue_setProtocolParam (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSProtocolParam * pValue)
{
    SUBPARAM_SET(pProtocolParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSAntennaParam *
LLRP_CustomStatsValue_getAntennaParam (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->pAntennaParam;
}

LLRP_tResultCode
LLRP_CustomStatsValue_setAntennaParam (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSAntennaParam * pValue)
{
    SUBPARAM_SET(pAntennaParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSFrequencyParam *
LLRP_CustomStatsValue_getFrequencyParam (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->pFrequencyParam;
}

LLRP_tResultCode
LLRP_CustomStatsValue_setFrequencyParam (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSFrequencyParam * pValue)
{
    SUBPARAM_SET(pFrequencyParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSConnectedAntennaList *
LLRP_CustomStatsValue_getConnectedAntennaList (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->pConnectedAntennaList;
}

LLRP_tResultCode
LLRP_CustomStatsValue_setConnectedAntennaList (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSConnectedAntennaList * pValue)
{
    SUBPARAM_SET(pConnectedAntennaList, pValue);

    return LLRP_RC_OK;
}


LLRP_tSperAntennaStatsList *
LLRP_CustomStatsValue_beginperAntennaStatsList (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->listperAntennaStatsList;
}

LLRP_tResultCode
LLRP_CustomStatsValue_addperAntennaStatsList (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSperAntennaStatsList *pValue)
{
    SUBPARAM_ADD(listperAntennaStatsList, pValue);

    return LLRP_RC_OK;
}

LLRP_tSperAntennaStatsList *
LLRP_CustomStatsValue_nextperAntennaStatsList (
  LLRP_tSperAntennaStatsList *pCurrent)
{
    return (LLRP_tSperAntennaStatsList *)
                pCurrent->hdr.pNextSubParameter;
}

void
LLRP_CustomStatsValue_clearperAntennaStatsList (
  LLRP_tSCustomStatsValue *pThis)
{
    SUBPARAM_CLEAR(listperAntennaStatsList);
}


LLRP_tSParameter *
LLRP_CustomStatsValue_beginCustom (
  LLRP_tSCustomStatsValue *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_CustomStatsValue_addCustom (
  LLRP_tSCustomStatsValue *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdCustomStatsValue))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_CustomStatsValue_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_CustomStatsValue_encode (
  const LLRP_tSCustomStatsValue *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e16(pEncoderStream,
        (int)pThis->eStatsEnable,
        &LLRP_fdCustomStatsValue_StatsEnable);

    pType = &LLRP_tdTemperatureParam;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pTemperatureParam,
        pType);
      
    pType = &LLRP_tdProtocolParam;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pProtocolParam,
        pType);
      
    pType = &LLRP_tdAntennaParam;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pAntennaParam,
        pType);
      
    pType = &LLRP_tdFrequencyParam;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pFrequencyParam,
        pType);
      
    pType = &LLRP_tdConnectedAntennaList;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pConnectedAntennaList,
        pType);
      
    pType = &LLRP_tdperAntennaStatsList;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listperAntennaStatsList,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_CustomStatsValue_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicReaderStats)
    {
        return TRUE;
    }
  
    if(pEnclosingElementType == &LLRP_tdRFSurveyReportData)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter TemperatureParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTemperatureParam =
{
    FALSE,	// .bIsMessage
    "TemperatureParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    210,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdTemperatureParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTemperatureParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_TemperatureParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_TemperatureParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_TemperatureParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_TemperatureParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_TemperatureParam_encode,

  
    LLRP_TemperatureParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTemperatureParam[] =
{
  
    &LLRP_fdTemperatureParam_Temperature,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTemperatureParam_Temperature =
{
    LLRP_FT_S8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Temperature",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSTemperatureParam *
LLRP_TemperatureParam_construct (void)
{
    LLRP_tSTemperatureParam *pNew;

    pNew = (LLRP_tSTemperatureParam *)
        LLRP_Element_construct(&LLRP_tdTemperatureParam);

    return pNew;
}

void
LLRP_TemperatureParam_destruct (
  LLRP_tSTemperatureParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_TemperatureParam_decodeFields (
  LLRP_tSTemperatureParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Temperature =
                pOps->pfGet_s8(pDecoderStream,
                        &LLRP_fdTemperatureParam_Temperature);
    }
    else
    {
        pOps->pfGet_s8(pDecoderStream,
                &LLRP_fdTemperatureParam_Temperature);
    }
    
}

void
LLRP_TemperatureParam_assimilateSubParameters (
  LLRP_tSTemperatureParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTemperatureParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_s8_t
LLRP_TemperatureParam_getTemperature (
  LLRP_tSTemperatureParam *pThis)
{
    return pThis->Temperature;
}

LLRP_tResultCode
LLRP_TemperatureParam_setTemperature (
  LLRP_tSTemperatureParam *pThis,
  llrp_s8_t Value)
{
    pThis->Temperature = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_TemperatureParam_beginCustom (
  LLRP_tSTemperatureParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_TemperatureParam_addCustom (
  LLRP_tSTemperatureParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTemperatureParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_TemperatureParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_TemperatureParam_encode (
  const LLRP_tSTemperatureParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_s8(pEncoderStream,
        pThis->Temperature,
        &LLRP_fdTemperatureParam_Temperature);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_TemperatureParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ProtocolParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdProtocolParam =
{
    FALSE,	// .bIsMessage
    "ProtocolParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    211,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdProtocolParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSProtocolParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ProtocolParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ProtocolParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ProtocolParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ProtocolParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ProtocolParam_encode,

  
    LLRP_ProtocolParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdProtocolParam[] =
{
  
    &LLRP_fdProtocolParam_Protocol,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdProtocolParam_Protocol =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Protocol",	// .pName
    LLRP_estProtocolID,	// .pEnumTable
};

LLRP_tSProtocolParam *
LLRP_ProtocolParam_construct (void)
{
    LLRP_tSProtocolParam *pNew;

    pNew = (LLRP_tSProtocolParam *)
        LLRP_Element_construct(&LLRP_tdProtocolParam);

    return pNew;
}

void
LLRP_ProtocolParam_destruct (
  LLRP_tSProtocolParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ProtocolParam_decodeFields (
  LLRP_tSProtocolParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eProtocol =
                (LLRP_tEProtocolID) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdProtocolParam_Protocol);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdProtocolParam_Protocol);
    }

}

void
LLRP_ProtocolParam_assimilateSubParameters (
  LLRP_tSProtocolParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdProtocolParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEProtocolID
LLRP_ProtocolParam_getProtocol (
  LLRP_tSProtocolParam *pThis)
{
    return pThis->eProtocol;
}

LLRP_tResultCode
LLRP_ProtocolParam_setProtocol (
  LLRP_tSProtocolParam *pThis,
  LLRP_tEProtocolID eValue)
{
    pThis->eProtocol = eValue;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ProtocolParam_beginCustom (
  LLRP_tSProtocolParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ProtocolParam_addCustom (
  LLRP_tSProtocolParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdProtocolParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ProtocolParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ProtocolParam_encode (
  const LLRP_tSProtocolParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eProtocol,
        &LLRP_fdProtocolParam_Protocol);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ProtocolParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter AntennaParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdAntennaParam =
{
    FALSE,	// .bIsMessage
    "AntennaParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    212,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdAntennaParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSAntennaParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_AntennaParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_AntennaParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_AntennaParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_AntennaParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_AntennaParam_encode,

  
    LLRP_AntennaParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdAntennaParam[] =
{
  
    &LLRP_fdAntennaParam_Antenna,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdAntennaParam_Antenna =
{
    LLRP_FT_U16,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Antenna",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSAntennaParam *
LLRP_AntennaParam_construct (void)
{
    LLRP_tSAntennaParam *pNew;

    pNew = (LLRP_tSAntennaParam *)
        LLRP_Element_construct(&LLRP_tdAntennaParam);

    return pNew;
}

void
LLRP_AntennaParam_destruct (
  LLRP_tSAntennaParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_AntennaParam_decodeFields (
  LLRP_tSAntennaParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Antenna =
                pOps->pfGet_u16(pDecoderStream,
                        &LLRP_fdAntennaParam_Antenna);
    }
    else
    {
        pOps->pfGet_u16(pDecoderStream,
                &LLRP_fdAntennaParam_Antenna);
    }
    
}

void
LLRP_AntennaParam_assimilateSubParameters (
  LLRP_tSAntennaParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdAntennaParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u16_t
LLRP_AntennaParam_getAntenna (
  LLRP_tSAntennaParam *pThis)
{
    return pThis->Antenna;
}

LLRP_tResultCode
LLRP_AntennaParam_setAntenna (
  LLRP_tSAntennaParam *pThis,
  llrp_u16_t Value)
{
    pThis->Antenna = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_AntennaParam_beginCustom (
  LLRP_tSAntennaParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_AntennaParam_addCustom (
  LLRP_tSAntennaParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdAntennaParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_AntennaParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_AntennaParam_encode (
  const LLRP_tSAntennaParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u16(pEncoderStream,
        pThis->Antenna,
        &LLRP_fdAntennaParam_Antenna);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_AntennaParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter FrequencyParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdFrequencyParam =
{
    FALSE,	// .bIsMessage
    "FrequencyParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    213,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdFrequencyParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSFrequencyParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_FrequencyParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_FrequencyParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_FrequencyParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_FrequencyParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_FrequencyParam_encode,

  
    LLRP_FrequencyParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdFrequencyParam[] =
{
  
    &LLRP_fdFrequencyParam_Frequency,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdFrequencyParam_Frequency =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Frequency",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSFrequencyParam *
LLRP_FrequencyParam_construct (void)
{
    LLRP_tSFrequencyParam *pNew;

    pNew = (LLRP_tSFrequencyParam *)
        LLRP_Element_construct(&LLRP_tdFrequencyParam);

    return pNew;
}

void
LLRP_FrequencyParam_destruct (
  LLRP_tSFrequencyParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_FrequencyParam_decodeFields (
  LLRP_tSFrequencyParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->Frequency =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdFrequencyParam_Frequency);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdFrequencyParam_Frequency);
    }
    
}

void
LLRP_FrequencyParam_assimilateSubParameters (
  LLRP_tSFrequencyParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdFrequencyParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_FrequencyParam_getFrequency (
  LLRP_tSFrequencyParam *pThis)
{
    return pThis->Frequency;
}

LLRP_tResultCode
LLRP_FrequencyParam_setFrequency (
  LLRP_tSFrequencyParam *pThis,
  llrp_u32_t Value)
{
    pThis->Frequency = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_FrequencyParam_beginCustom (
  LLRP_tSFrequencyParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_FrequencyParam_addCustom (
  LLRP_tSFrequencyParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdFrequencyParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_FrequencyParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_FrequencyParam_encode (
  const LLRP_tSFrequencyParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->Frequency,
        &LLRP_fdFrequencyParam_Frequency);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_FrequencyParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ConnectedAntennaList
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdConnectedAntennaList =
{
    FALSE,	// .bIsMessage
    "ConnectedAntennaList",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    198,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdConnectedAntennaList,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSConnectedAntennaList),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ConnectedAntennaList_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ConnectedAntennaList_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ConnectedAntennaList_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ConnectedAntennaList_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ConnectedAntennaList_encode,

  
    LLRP_ConnectedAntennaList_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdConnectedAntennaList[] =
{
  
    &LLRP_fdConnectedAntennaList_connectedAntennas,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdConnectedAntennaList_connectedAntennas =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "connectedAntennas",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSConnectedAntennaList *
LLRP_ConnectedAntennaList_construct (void)
{
    LLRP_tSConnectedAntennaList *pNew;

    pNew = (LLRP_tSConnectedAntennaList *)
        LLRP_Element_construct(&LLRP_tdConnectedAntennaList);

    return pNew;
}

void
LLRP_ConnectedAntennaList_destruct (
  LLRP_tSConnectedAntennaList *pThis)
{
  
    LLRP_u8v_clear(&pThis->connectedAntennas);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ConnectedAntennaList_decodeFields (
  LLRP_tSConnectedAntennaList *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->connectedAntennas =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdConnectedAntennaList_connectedAntennas);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdConnectedAntennaList_connectedAntennas);
    }
    
}

void
LLRP_ConnectedAntennaList_assimilateSubParameters (
  LLRP_tSConnectedAntennaList *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdConnectedAntennaList))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_ConnectedAntennaList_getconnectedAntennas (
  LLRP_tSConnectedAntennaList *pThis)
{
    return pThis->connectedAntennas;
}

LLRP_tResultCode
LLRP_ConnectedAntennaList_setconnectedAntennas (
  LLRP_tSConnectedAntennaList *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->connectedAntennas);

    pThis->connectedAntennas = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ConnectedAntennaList_beginCustom (
  LLRP_tSConnectedAntennaList *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ConnectedAntennaList_addCustom (
  LLRP_tSConnectedAntennaList *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdConnectedAntennaList))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ConnectedAntennaList_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ConnectedAntennaList_encode (
  const LLRP_tSConnectedAntennaList *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->connectedAntennas,
        &LLRP_fdConnectedAntennaList_connectedAntennas);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ConnectedAntennaList_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter perAntennaStatsList
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdperAntennaStatsList =
{
    FALSE,	// .bIsMessage
    "perAntennaStatsList",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    199,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdperAntennaStatsList,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSperAntennaStatsList),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_perAntennaStatsList_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_perAntennaStatsList_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_perAntennaStatsList_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_perAntennaStatsList_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_perAntennaStatsList_encode,

  
    LLRP_perAntennaStatsList_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdperAntennaStatsList[] =
{
  
    &LLRP_fdperAntennaStatsList_antenna,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdperAntennaStatsList_antenna =
{
    LLRP_FT_U8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "antenna",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSperAntennaStatsList *
LLRP_perAntennaStatsList_construct (void)
{
    LLRP_tSperAntennaStatsList *pNew;

    pNew = (LLRP_tSperAntennaStatsList *)
        LLRP_Element_construct(&LLRP_tdperAntennaStatsList);

    return pNew;
}

void
LLRP_perAntennaStatsList_destruct (
  LLRP_tSperAntennaStatsList *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_perAntennaStatsList_decodeFields (
  LLRP_tSperAntennaStatsList *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->antenna =
                pOps->pfGet_u8(pDecoderStream,
                        &LLRP_fdperAntennaStatsList_antenna);
    }
    else
    {
        pOps->pfGet_u8(pDecoderStream,
                &LLRP_fdperAntennaStatsList_antenna);
    }
    
}

void
LLRP_perAntennaStatsList_assimilateSubParameters (
  LLRP_tSperAntennaStatsList *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of RFOntimeParam
    pType = &LLRP_tdRFOntimeParam;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pRFOntimeParam = (LLRP_tSRFOntimeParam *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-1 of NoiseFloorParam
    pType = &LLRP_tdNoiseFloorParam;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pNoiseFloorParam = (LLRP_tSNoiseFloorParam *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdperAntennaStatsList))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8_t
LLRP_perAntennaStatsList_getantenna (
  LLRP_tSperAntennaStatsList *pThis)
{
    return pThis->antenna;
}

LLRP_tResultCode
LLRP_perAntennaStatsList_setantenna (
  LLRP_tSperAntennaStatsList *pThis,
  llrp_u8_t Value)
{
    pThis->antenna = Value;
    return LLRP_RC_OK;
}


LLRP_tSRFOntimeParam *
LLRP_perAntennaStatsList_getRFOntimeParam (
  LLRP_tSperAntennaStatsList *pThis)
{
    return pThis->pRFOntimeParam;
}

LLRP_tResultCode
LLRP_perAntennaStatsList_setRFOntimeParam (
  LLRP_tSperAntennaStatsList *pThis,
  LLRP_tSRFOntimeParam * pValue)
{
    SUBPARAM_SET(pRFOntimeParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSNoiseFloorParam *
LLRP_perAntennaStatsList_getNoiseFloorParam (
  LLRP_tSperAntennaStatsList *pThis)
{
    return pThis->pNoiseFloorParam;
}

LLRP_tResultCode
LLRP_perAntennaStatsList_setNoiseFloorParam (
  LLRP_tSperAntennaStatsList *pThis,
  LLRP_tSNoiseFloorParam * pValue)
{
    SUBPARAM_SET(pNoiseFloorParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_perAntennaStatsList_beginCustom (
  LLRP_tSperAntennaStatsList *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_perAntennaStatsList_addCustom (
  LLRP_tSperAntennaStatsList *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdperAntennaStatsList))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_perAntennaStatsList_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_perAntennaStatsList_encode (
  const LLRP_tSperAntennaStatsList *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8(pEncoderStream,
        pThis->antenna,
        &LLRP_fdperAntennaStatsList_antenna);

    pType = &LLRP_tdRFOntimeParam;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pRFOntimeParam,
        pType);
      
    pType = &LLRP_tdNoiseFloorParam;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pNoiseFloorParam,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_perAntennaStatsList_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter RFOntimeParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdRFOntimeParam =
{
    FALSE,	// .bIsMessage
    "RFOntimeParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    214,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdRFOntimeParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSRFOntimeParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_RFOntimeParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_RFOntimeParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_RFOntimeParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_RFOntimeParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_RFOntimeParam_encode,

  
    LLRP_RFOntimeParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdRFOntimeParam[] =
{
  
    &LLRP_fdRFOntimeParam_rfOntime,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdRFOntimeParam_rfOntime =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "rfOntime",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSRFOntimeParam *
LLRP_RFOntimeParam_construct (void)
{
    LLRP_tSRFOntimeParam *pNew;

    pNew = (LLRP_tSRFOntimeParam *)
        LLRP_Element_construct(&LLRP_tdRFOntimeParam);

    return pNew;
}

void
LLRP_RFOntimeParam_destruct (
  LLRP_tSRFOntimeParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_RFOntimeParam_decodeFields (
  LLRP_tSRFOntimeParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->rfOntime =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdRFOntimeParam_rfOntime);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdRFOntimeParam_rfOntime);
    }
    
}

void
LLRP_RFOntimeParam_assimilateSubParameters (
  LLRP_tSRFOntimeParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdRFOntimeParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u32_t
LLRP_RFOntimeParam_getrfOntime (
  LLRP_tSRFOntimeParam *pThis)
{
    return pThis->rfOntime;
}

LLRP_tResultCode
LLRP_RFOntimeParam_setrfOntime (
  LLRP_tSRFOntimeParam *pThis,
  llrp_u32_t Value)
{
    pThis->rfOntime = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_RFOntimeParam_beginCustom (
  LLRP_tSRFOntimeParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_RFOntimeParam_addCustom (
  LLRP_tSRFOntimeParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdRFOntimeParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_RFOntimeParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_RFOntimeParam_encode (
  const LLRP_tSRFOntimeParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u32(pEncoderStream,
        pThis->rfOntime,
        &LLRP_fdRFOntimeParam_rfOntime);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_RFOntimeParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter NoiseFloorParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdNoiseFloorParam =
{
    FALSE,	// .bIsMessage
    "NoiseFloorParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    215,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdNoiseFloorParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSNoiseFloorParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_NoiseFloorParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_NoiseFloorParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_NoiseFloorParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_NoiseFloorParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_NoiseFloorParam_encode,

  
    LLRP_NoiseFloorParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdNoiseFloorParam[] =
{
  
    &LLRP_fdNoiseFloorParam_noiseFloor,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdNoiseFloorParam_noiseFloor =
{
    LLRP_FT_S8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "noiseFloor",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSNoiseFloorParam *
LLRP_NoiseFloorParam_construct (void)
{
    LLRP_tSNoiseFloorParam *pNew;

    pNew = (LLRP_tSNoiseFloorParam *)
        LLRP_Element_construct(&LLRP_tdNoiseFloorParam);

    return pNew;
}

void
LLRP_NoiseFloorParam_destruct (
  LLRP_tSNoiseFloorParam *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_NoiseFloorParam_decodeFields (
  LLRP_tSNoiseFloorParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->noiseFloor =
                pOps->pfGet_s8(pDecoderStream,
                        &LLRP_fdNoiseFloorParam_noiseFloor);
    }
    else
    {
        pOps->pfGet_s8(pDecoderStream,
                &LLRP_fdNoiseFloorParam_noiseFloor);
    }
    
}

void
LLRP_NoiseFloorParam_assimilateSubParameters (
  LLRP_tSNoiseFloorParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdNoiseFloorParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_s8_t
LLRP_NoiseFloorParam_getnoiseFloor (
  LLRP_tSNoiseFloorParam *pThis)
{
    return pThis->noiseFloor;
}

LLRP_tResultCode
LLRP_NoiseFloorParam_setnoiseFloor (
  LLRP_tSNoiseFloorParam *pThis,
  llrp_s8_t Value)
{
    pThis->noiseFloor = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_NoiseFloorParam_beginCustom (
  LLRP_tSNoiseFloorParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_NoiseFloorParam_addCustom (
  LLRP_tSNoiseFloorParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdNoiseFloorParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_NoiseFloorParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_NoiseFloorParam_encode (
  const LLRP_tSNoiseFloorParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_s8(pEncoderStream,
        pThis->noiseFloor,
        &LLRP_fdNoiseFloorParam_noiseFloor);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_NoiseFloorParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdCustomStatsValue)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCustomTagopResponse
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCustomTagopResponse =
{
    FALSE,	// .bIsMessage
    "ThingMagicCustomTagopResponse",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    216,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicCustomTagopResponse,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicCustomTagopResponse),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCustomTagopResponse_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCustomTagopResponse_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCustomTagopResponse_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCustomTagopResponse_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCustomTagopResponse_encode,

  
    LLRP_ThingMagicCustomTagopResponse_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCustomTagopResponse[] =
{
  
    &LLRP_fdThingMagicCustomTagopResponse_Result,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomTagopResponse_Result =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Result",	// .pName
    LLRP_estThingMagicCustomTagOpSpecResultType,	// .pEnumTable
};

LLRP_tSThingMagicCustomTagopResponse *
LLRP_ThingMagicCustomTagopResponse_construct (void)
{
    LLRP_tSThingMagicCustomTagopResponse *pNew;

    pNew = (LLRP_tSThingMagicCustomTagopResponse *)
        LLRP_Element_construct(&LLRP_tdThingMagicCustomTagopResponse);

    return pNew;
}

void
LLRP_ThingMagicCustomTagopResponse_destruct (
  LLRP_tSThingMagicCustomTagopResponse *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCustomTagopResponse_decodeFields (
  LLRP_tSThingMagicCustomTagopResponse *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eResult =
                (LLRP_tEThingMagicCustomTagOpSpecResultType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicCustomTagopResponse_Result);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicCustomTagopResponse_Result);
    }

}

void
LLRP_ThingMagicCustomTagopResponse_assimilateSubParameters (
  LLRP_tSThingMagicCustomTagopResponse *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-1 of TagopByteStreamParam
    pType = &LLRP_tdTagopByteStreamParam;
  
    if(NULL != pCur && pCur->elementHdr.pType == pType)
    {
        pThis->pTagopByteStreamParam = (LLRP_tSTagopByteStreamParam *) pCur;
        pCur = pCur->pNextAllSubParameters;
    }
    

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdThingMagicCustomTagopResponse))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomTagOpSpecResultType
LLRP_ThingMagicCustomTagopResponse_getResult (
  LLRP_tSThingMagicCustomTagopResponse *pThis)
{
    return pThis->eResult;
}

LLRP_tResultCode
LLRP_ThingMagicCustomTagopResponse_setResult (
  LLRP_tSThingMagicCustomTagopResponse *pThis,
  LLRP_tEThingMagicCustomTagOpSpecResultType eValue)
{
    pThis->eResult = eValue;
    return LLRP_RC_OK;
}


LLRP_tSTagopByteStreamParam *
LLRP_ThingMagicCustomTagopResponse_getTagopByteStreamParam (
  LLRP_tSThingMagicCustomTagopResponse *pThis)
{
    return pThis->pTagopByteStreamParam;
}

LLRP_tResultCode
LLRP_ThingMagicCustomTagopResponse_setTagopByteStreamParam (
  LLRP_tSThingMagicCustomTagopResponse *pThis,
  LLRP_tSTagopByteStreamParam * pValue)
{
    SUBPARAM_SET(pTagopByteStreamParam, pValue);

    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_ThingMagicCustomTagopResponse_beginCustom (
  LLRP_tSThingMagicCustomTagopResponse *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_ThingMagicCustomTagopResponse_addCustom (
  LLRP_tSThingMagicCustomTagopResponse *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdThingMagicCustomTagopResponse))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_ThingMagicCustomTagopResponse_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_ThingMagicCustomTagopResponse_encode (
  const LLRP_tSThingMagicCustomTagopResponse *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eResult,
        &LLRP_fdThingMagicCustomTagopResponse_Result);

    pType = &LLRP_tdTagopByteStreamParam;
      
    pOps->pfPutOptionalSubParameter(pEncoderStream,
        (LLRP_tSParameter *)pThis->pTagopByteStreamParam,
        pType);
      
    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_ThingMagicCustomTagopResponse_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdTagReportData)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter TagopByteStreamParam
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdTagopByteStreamParam =
{
    FALSE,	// .bIsMessage
    "TagopByteStreamParam",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    217,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdTagopByteStreamParam,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSTagopByteStreamParam),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_TagopByteStreamParam_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_TagopByteStreamParam_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_TagopByteStreamParam_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_TagopByteStreamParam_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_TagopByteStreamParam_encode,

  
    LLRP_TagopByteStreamParam_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdTagopByteStreamParam[] =
{
  
    &LLRP_fdTagopByteStreamParam_ByteStream,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdTagopByteStreamParam_ByteStream =
{
    LLRP_FT_U8V,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "ByteStream",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSTagopByteStreamParam *
LLRP_TagopByteStreamParam_construct (void)
{
    LLRP_tSTagopByteStreamParam *pNew;

    pNew = (LLRP_tSTagopByteStreamParam *)
        LLRP_Element_construct(&LLRP_tdTagopByteStreamParam);

    return pNew;
}

void
LLRP_TagopByteStreamParam_destruct (
  LLRP_tSTagopByteStreamParam *pThis)
{
  
    LLRP_u8v_clear(&pThis->ByteStream);
      

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_TagopByteStreamParam_decodeFields (
  LLRP_tSTagopByteStreamParam *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->ByteStream =
                pOps->pfGet_u8v(pDecoderStream,
                        &LLRP_fdTagopByteStreamParam_ByteStream);
    }
    else
    {
        pOps->pfGet_u8v(pDecoderStream,
                &LLRP_fdTagopByteStreamParam_ByteStream);
    }
    
}

void
LLRP_TagopByteStreamParam_assimilateSubParameters (
  LLRP_tSTagopByteStreamParam *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    // 0-N of choice Custom
    pType = NULL;
  
    while(NULL != pCur && LLRP_Parameter_isAllowedExtension(pCur, &LLRP_tdTagopByteStreamParam))
    {
        SUBPARAM_ATTACH(listCustom, pCur);
        pCur = pCur->pNextAllSubParameters;
    }
    

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

llrp_u8v_t
LLRP_TagopByteStreamParam_getByteStream (
  LLRP_tSTagopByteStreamParam *pThis)
{
    return pThis->ByteStream;
}

LLRP_tResultCode
LLRP_TagopByteStreamParam_setByteStream (
  LLRP_tSTagopByteStreamParam *pThis,
  llrp_u8v_t Value)
{
    LLRP_u8v_clear(&pThis->ByteStream);

    pThis->ByteStream = Value;
    return LLRP_RC_OK;
}


LLRP_tSParameter *
LLRP_TagopByteStreamParam_beginCustom (
  LLRP_tSTagopByteStreamParam *pThis)
{
    return pThis->listCustom;
}

LLRP_tResultCode
LLRP_TagopByteStreamParam_addCustom (
  LLRP_tSTagopByteStreamParam *pThis,
  LLRP_tSParameter *pValue)
{
    if(!LLRP_Parameter_isAllowedIn(pValue, &LLRP_tdTagopByteStreamParam))
    {
        return LLRP_RC_NotAllowedAtExtensionPoint;
    }

    SUBPARAM_ADD(listCustom, pValue);

    return LLRP_RC_OK;
}

LLRP_tSParameter *
LLRP_TagopByteStreamParam_nextCustom (
  LLRP_tSParameter *pCurrent)
{
    return pCurrent->pNextSubParameter;
}


void
LLRP_TagopByteStreamParam_encode (
  const LLRP_tSTagopByteStreamParam *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_u8v(pEncoderStream,
        pThis->ByteStream,
        &LLRP_fdTagopByteStreamParam_ByteStream);

    pType = &LLRP_tdCustom;
      
    pOps->pfPutOptionalSubParameterList(pEncoderStream,
        (LLRP_tSParameter *)pThis->listCustom,
        pType);
      
}


llrp_bool_t
LLRP_TagopByteStreamParam_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdThingMagicCustomTagopResponse)
    {
        return TRUE;
    }
  
    return FALSE;
}



/*
*****************************************************************
**
** Custom parameter ThingMagicCustomAntennaSwitching
**
*****************************************************************
*/ 
  

const LLRP_tSTypeDescriptor
LLRP_tdThingMagicCustomAntennaSwitching =
{
    FALSE,	// .bIsMessage
    "ThingMagicCustomAntennaSwitching",	// .pName
    &LLRP_vdescthingmagic,	// .pVendorDescriptor
    &LLRP_nsdescthingmagic,	// .pNamespaceDescriptor
    219,	// .TypeNum
    NULL,	// .pResponseType
    LLRP_apfdThingMagicCustomAntennaSwitching,	// .ppFieldDescriptorTable
    sizeof(LLRP_tSThingMagicCustomAntennaSwitching),	// .nSizeBytes
    (LLRP_tSElement *(*)(void)) LLRP_ThingMagicCustomAntennaSwitching_construct,	// .pfConstruct
    (void (*)(LLRP_tSElement *)) LLRP_ThingMagicCustomAntennaSwitching_destruct,	// .pfDestruct

    // .pfDecodeFields
        (void (*)(LLRP_tSElement *, LLRP_tSDecoderStream *))
            LLRP_ThingMagicCustomAntennaSwitching_decodeFields,

    // .pfAssimilateSubParameters
        (void (*)(LLRP_tSElement *, LLRP_tSErrorDetails *))
            LLRP_ThingMagicCustomAntennaSwitching_assimilateSubParameters,

    // .pfEncode
        (void (*)(const LLRP_tSElement *, LLRP_tSEncoderStream *))
            LLRP_ThingMagicCustomAntennaSwitching_encode,

  
    LLRP_ThingMagicCustomAntennaSwitching_isAllowedIn,	// .pfIsAllowedIn
    
};



const LLRP_tSFieldDescriptor *
LLRP_apfdThingMagicCustomAntennaSwitching[] =
{
  
    &LLRP_fdThingMagicCustomAntennaSwitching_AntSwitchingType,
    &LLRP_fdThingMagicCustomAntennaSwitching_Timeout,
    NULL
};



const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomAntennaSwitching_AntSwitchingType =
{
    LLRP_FT_E8,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "AntSwitchingType",	// .pName
    LLRP_estThingMagicCustomAntennaSwitchingType,	// .pEnumTable
};


const LLRP_tSFieldDescriptor
LLRP_fdThingMagicCustomAntennaSwitching_Timeout =
{
    LLRP_FT_U32,	// .eFieldType
    LLRP_FMT_NORMAL,	// .eFieldFormat
    "Timeout",	// .pName
    NULL,	// .pEnumTable
};

LLRP_tSThingMagicCustomAntennaSwitching *
LLRP_ThingMagicCustomAntennaSwitching_construct (void)
{
    LLRP_tSThingMagicCustomAntennaSwitching *pNew;

    pNew = (LLRP_tSThingMagicCustomAntennaSwitching *)
        LLRP_Element_construct(&LLRP_tdThingMagicCustomAntennaSwitching);

    return pNew;
}

void
LLRP_ThingMagicCustomAntennaSwitching_destruct (
  LLRP_tSThingMagicCustomAntennaSwitching *pThis)
{
  

    LLRP_Element_finalDestruct((LLRP_tSElement *) pThis);
}

void
LLRP_ThingMagicCustomAntennaSwitching_decodeFields (
  LLRP_tSThingMagicCustomAntennaSwitching *pThis,
  LLRP_tSDecoderStream *        pDecoderStream)
{
    LLRP_tSDecoderStreamOps *   pOps;

    pOps = pDecoderStream->pDecoderStreamOps;

  
    if(NULL != pThis)
    {
        pThis->eAntSwitchingType =
                (LLRP_tEThingMagicCustomAntennaSwitchingType) pOps->pfGet_e8(pDecoderStream,
                        &LLRP_fdThingMagicCustomAntennaSwitching_AntSwitchingType);
    }
    else
    {
        pOps->pfGet_e8(pDecoderStream,
                &LLRP_fdThingMagicCustomAntennaSwitching_AntSwitchingType);
    }

    if(NULL != pThis)
    {
        pThis->Timeout =
                pOps->pfGet_u32(pDecoderStream,
                        &LLRP_fdThingMagicCustomAntennaSwitching_Timeout);
    }
    else
    {
        pOps->pfGet_u32(pDecoderStream,
                &LLRP_fdThingMagicCustomAntennaSwitching_Timeout);
    }
    
}

void
LLRP_ThingMagicCustomAntennaSwitching_assimilateSubParameters (
  LLRP_tSThingMagicCustomAntennaSwitching *pThis,
  LLRP_tSErrorDetails *         pError)
{
    LLRP_tSParameter *              pCur;
    const LLRP_tSTypeDescriptor *   pType;

    pCur = pThis->hdr.elementHdr.listAllSubParameters;

  

    if(NULL != pCur)
    {
        LLRP_Error_unexpectedParameter(pError, pCur);
    }

    return;

  missing:
    LLRP_Error_missingParameter(pError, pType);
}

LLRP_tEThingMagicCustomAntennaSwitchingType
LLRP_ThingMagicCustomAntennaSwitching_getAntSwitchingType (
  LLRP_tSThingMagicCustomAntennaSwitching *pThis)
{
    return pThis->eAntSwitchingType;
}

LLRP_tResultCode
LLRP_ThingMagicCustomAntennaSwitching_setAntSwitchingType (
  LLRP_tSThingMagicCustomAntennaSwitching *pThis,
  LLRP_tEThingMagicCustomAntennaSwitchingType eValue)
{
    pThis->eAntSwitchingType = eValue;
    return LLRP_RC_OK;
}


llrp_u32_t
LLRP_ThingMagicCustomAntennaSwitching_getTimeout (
  LLRP_tSThingMagicCustomAntennaSwitching *pThis)
{
    return pThis->Timeout;
}

LLRP_tResultCode
LLRP_ThingMagicCustomAntennaSwitching_setTimeout (
  LLRP_tSThingMagicCustomAntennaSwitching *pThis,
  llrp_u32_t Value)
{
    pThis->Timeout = Value;
    return LLRP_RC_OK;
}


void
LLRP_ThingMagicCustomAntennaSwitching_encode (
  const LLRP_tSThingMagicCustomAntennaSwitching *pThis,
  LLRP_tSEncoderStream *        pEncoderStream)
{
    const LLRP_tSEncoderStreamOps *pOps = pEncoderStream->pEncoderStreamOps;
    const LLRP_tSTypeDescriptor *pType;

  
    pOps->pfPut_e8(pEncoderStream,
        (int)pThis->eAntSwitchingType,
        &LLRP_fdThingMagicCustomAntennaSwitching_AntSwitchingType);

    pOps->pfPut_u32(pEncoderStream,
        pThis->Timeout,
        &LLRP_fdThingMagicCustomAntennaSwitching_Timeout);

}


llrp_bool_t
LLRP_ThingMagicCustomAntennaSwitching_isAllowedIn (
  const LLRP_tSTypeDescriptor *pEnclosingElementType)
{
  
    if(pEnclosingElementType == &LLRP_tdInventoryParameterSpec)
    {
        return TRUE;
    }
  
    return FALSE;
}

void
LLRP_enrollTmTypesIntoRegistry (
  LLRP_tSTypeRegistry *         pTypeRegistry)
{
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_POWER_CYCLE_READER);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_POWER_CYCLE_READER);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_RESET_STATISTICS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_RESET_STATISTICS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_RESET_TIME);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_RESET_TIME);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_ANTENNA_STATS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_ANTENNA_STATS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_REQUEST_GET_READER_STATUS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTHINGMAGIC_CONTROL_RESPONSE_GET_READER_STATUS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDeviceControlCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdDeviceInformationCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdReaderProductID);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdReaderProductGroupID);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdReaderProductGroup);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDeviceControlConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicReaderConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicRegionConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicProtocolConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2CustomParameters);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAntennaConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCurrentTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDeDuplication);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdDeviceProtocolCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdSupportedProtocols);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicReaderModuleTemperature);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2Q);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdInitQ);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdqValue);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdsendSelect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAntennaDetection);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdWriteTransmitPower);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdReadPointDescription);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdAntennaMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicTargetStrategy);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2T4Param);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicLicenseKey);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicBlockPermalock);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicBlockPermalockOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2PartialLoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2PartialLoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2FullLoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs2FullLoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3FastLoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3FastLoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3LoadImage);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3LoadImageOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3BlockReadLock);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHiggs3BlockReadLockOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ISetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ISetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XSetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XSetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IResetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IResetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XResetReadProtect);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XResetReadProtectOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeEAS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeEASOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XChangeEAS);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XChangeEASOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IEASAlarm);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IEASAlarmOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XEASAlarm);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XEASAlarmOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ICalibrate);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2ICalibrateOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XCalibrate);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2XCalibrateOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeConfig);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPG2IChangeConfigOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPConfigWord);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicImpinjMonza4QTReadWrite);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicImpinjMonza4QTReadWriteOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicMonza4ControlByte);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicMonza4Payload);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicWriteTag);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicWriteTagOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BInventoryCommand);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BTagPattern);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BRead);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BReadOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCustomAirProtocols);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BWrite);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BWriteOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BLock);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BLockOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdISO18K6BCustomParameters);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO180006BDelimiter);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO18K6BModulationDepth);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO18K6BLinkFrequency);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicISO18K6BLLRPCapabilities);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASensorValue);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ACommandRequest);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASensorValueOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetLogState);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ALogStateOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogState);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogStateLimitCounter);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogStateSystemStatus);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogStateStatusFlag);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogModeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AStartLog);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AStartLogOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AEndLog);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AEndLogOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AInitialize);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AInitializeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetMeasurementSetup);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetMeasurementSetupOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetCalibrationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetCalibrationDataOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetCalibrationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetCalibrationDataOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetSFEParams);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetSFEParamsOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOStatus);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOStatusOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetBatteryLevel);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AGetBatteryLevelOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSDelayTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSApplicationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSLogLimits);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSStartTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSFEParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSCalibrationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFORead);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOReadOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOWrite);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900AAccessFIFOWriteOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogLimits);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetLogLimitsOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetIDSPassword);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSL900ASetPasswordOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSBatteryLevel);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSetShelfLife);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSLBlock0);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSLBlock1);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicIDSSetShelfLifeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicHopTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSecureMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSecureModeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVAuthenticateOBU);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVAuthenticateOBUOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSiniavMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVActivateSiniavModeOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateID);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateIDOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass1OpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthenticateFullPass2OpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMap);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUReadFromMemMapOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMap);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUWriteToMemMapOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVG0PAOBUAuth);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVG0PAOBUAuthOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthFullPass);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVOBUAuthFullPassOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVReadSec);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVReadSecOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVWriteSec);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVWriteSecOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVGetTokenID);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVGetTokenIDOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicDenatranIAVCommandRequest);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicTagReportContentSelector);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdMetadataGPIOMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdMetadataGen2QMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdMetadataGen2LFMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdMetadataGen2TargetMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdMetadataDataMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicRFPhase);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicMetadataGPIO);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGPIOStatus);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicMetadataGen2);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2QResponse);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2LFResponse);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdGen2TargetResponse);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicFastSearchMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAsyncOFFTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAsyncONTime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicLicensedFeatures);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicSelectedProtocols);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdSelectedProtocol);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPReadbuffer);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPReadbufferOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPAuthentication);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPAuthenticationOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPTAM2AuthenticationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPCommandRequest);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicGEN2ProtocolExtension);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPUntraceable);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPUntraceableOpSpecResult);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPUntraceableAuthentication);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicNXPTAM1AuthenticationData);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicRegulatoryConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdRegulatoryMode);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdRegulatoryModulation);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdRegulatoryOntime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdRegulatoryOfftime);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdRegulatoryEnable);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicFrequencyConfiguration);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdCustomFrequencyHopTable);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdCustomFixedFrequency);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCustomProtocolID);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCustomReadplanWeight);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicAntennaReturnloss);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdReturnlossValue);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCustomInventorySpecID);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicMetadata);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicStatsEnable);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicReaderStats);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdCustomRFSurveySpec);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdCustomStatsValue);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTemperatureParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdProtocolParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdAntennaParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdFrequencyParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdConnectedAntennaList);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdperAntennaStatsList);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdRFOntimeParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdNoiseFloorParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCustomTagopResponse);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdTagopByteStreamParam);
  
    LLRP_TypeRegistry_enroll(pTypeRegistry,
        &LLRP_tdThingMagicCustomAntennaSwitching);
  
}
